/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import nl.tue.gtl.ide.contentassist.antlr.internal.InternalTQLParser;
import nl.tue.gtl.services.TQLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
			builder.put(grammarAccess.getTable_ImplAccess().getAlternatives(), "rule__Table_Impl__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getBooleanFunctionAccess().getAlternatives(), "rule__BooleanFunction__Alternatives");
			builder.put(grammarAccess.getBinaryFunctionAccess().getAlternatives(), "rule__BinaryFunction__Alternatives");
			builder.put(grammarAccess.getTable_ImplAccess().getGroup_0(), "rule__Table_Impl__Group_0__0");
			builder.put(grammarAccess.getTable_ImplAccess().getGroup_1(), "rule__Table_Impl__Group_1__0");
			builder.put(grammarAccess.getSource_TableAccess().getGroup(), "rule__Source_Table__Group__0");
			builder.put(grammarAccess.getSource_TableAccess().getGroup_3(), "rule__Source_Table__Group_3__0");
			builder.put(grammarAccess.getTarget_TableAccess().getGroup(), "rule__Target_Table__Group__0");
			builder.put(grammarAccess.getTarget_TableAccess().getGroup_3(), "rule__Target_Table__Group_3__0");
			builder.put(grammarAccess.getTableFieldAccess().getGroup(), "rule__TableField__Group__0");
			builder.put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
			builder.put(grammarAccess.getMappingFieldAccess().getGroup(), "rule__MappingField__Group__0");
			builder.put(grammarAccess.getMappingFieldAccess().getGroup_6(), "rule__MappingField__Group_6__0");
			builder.put(grammarAccess.getMappingFieldAccess().getGroup_6_3(), "rule__MappingField__Group_6_3__0");
			builder.put(grammarAccess.getTransformationCallAccess().getGroup(), "rule__TransformationCall__Group__0");
			builder.put(grammarAccess.getTransformationCallAccess().getGroup_2(), "rule__TransformationCall__Group_2__0");
			builder.put(grammarAccess.getTransformationCallAccess().getGroup_2_3(), "rule__TransformationCall__Group_2_3__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getSource_TableAccess().getNameAssignment_0(), "rule__Source_Table__NameAssignment_0");
			builder.put(grammarAccess.getSource_TableAccess().getColumnsAssignment_2(), "rule__Source_Table__ColumnsAssignment_2");
			builder.put(grammarAccess.getSource_TableAccess().getColumnsAssignment_3_1(), "rule__Source_Table__ColumnsAssignment_3_1");
			builder.put(grammarAccess.getTarget_TableAccess().getNameAssignment_0(), "rule__Target_Table__NameAssignment_0");
			builder.put(grammarAccess.getTarget_TableAccess().getColumnsAssignment_2(), "rule__Target_Table__ColumnsAssignment_2");
			builder.put(grammarAccess.getTarget_TableAccess().getColumnsAssignment_3_1(), "rule__Target_Table__ColumnsAssignment_3_1");
			builder.put(grammarAccess.getTableFieldAccess().getNameAssignment_0(), "rule__TableField__NameAssignment_0");
			builder.put(grammarAccess.getTableFieldAccess().getTypeAssignment_2(), "rule__TableField__TypeAssignment_2");
			builder.put(grammarAccess.getMappingAccess().getSourcetableAssignment_1(), "rule__Mapping__SourcetableAssignment_1");
			builder.put(grammarAccess.getMappingAccess().getTargettableAssignment_3(), "rule__Mapping__TargettableAssignment_3");
			builder.put(grammarAccess.getMappingAccess().getFieldsAssignment_5(), "rule__Mapping__FieldsAssignment_5");
			builder.put(grammarAccess.getMappingFieldAccess().getSouceFieldAssignment_3(), "rule__MappingField__SouceFieldAssignment_3");
			builder.put(grammarAccess.getMappingFieldAccess().getTargetFieldAssignment_5(), "rule__MappingField__TargetFieldAssignment_5");
			builder.put(grammarAccess.getMappingFieldAccess().getCallsAssignment_6_2(), "rule__MappingField__CallsAssignment_6_2");
			builder.put(grammarAccess.getMappingFieldAccess().getCallsAssignment_6_3_1(), "rule__MappingField__CallsAssignment_6_3_1");
			builder.put(grammarAccess.getTransformationCallAccess().getParametersAssignment_2_2(), "rule__TransformationCall__ParametersAssignment_2_2");
			builder.put(grammarAccess.getTransformationCallAccess().getParametersAssignment_2_3_1(), "rule__TransformationCall__ParametersAssignment_2_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TQLGrammarAccess grammarAccess;

	@Override
	protected InternalTQLParser createParser() {
		InternalTQLParser result = new InternalTQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
