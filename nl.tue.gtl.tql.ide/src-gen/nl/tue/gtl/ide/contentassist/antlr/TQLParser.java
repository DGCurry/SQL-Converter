/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import nl.tue.gtl.ide.contentassist.antlr.internal.InternalTQLParser;
import nl.tue.gtl.services.TQLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
			builder.put(grammarAccess.getTable_ImplAccess().getAlternatives(), "rule__Table_Impl__Alternatives");
			builder.put(grammarAccess.getCall_ParameterAccess().getAlternatives(), "rule__Call_Parameter__Alternatives");
			builder.put(grammarAccess.getLiteralsAccess().getAlternatives(), "rule__Literals__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getSingle_ConstantAccess().getAlternatives(), "rule__Single_Constant__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTable_ImplAccess().getGroup_0(), "rule__Table_Impl__Group_0__0");
			builder.put(grammarAccess.getTable_ImplAccess().getGroup_1(), "rule__Table_Impl__Group_1__0");
			builder.put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
			builder.put(grammarAccess.getSource_TableAccess().getGroup(), "rule__Source_Table__Group__0");
			builder.put(grammarAccess.getSource_TableAccess().getGroup_3(), "rule__Source_Table__Group_3__0");
			builder.put(grammarAccess.getTarget_TableAccess().getGroup(), "rule__Target_Table__Group__0");
			builder.put(grammarAccess.getTarget_TableAccess().getGroup_3(), "rule__Target_Table__Group_3__0");
			builder.put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
			builder.put(grammarAccess.getMappingAccess().getGroup_6(), "rule__Mapping__Group_6__0");
			builder.put(grammarAccess.getMapped_ColumnAccess().getGroup(), "rule__Mapped_Column__Group__0");
			builder.put(grammarAccess.getMapped_ColumnAccess().getGroup_3(), "rule__Mapped_Column__Group_3__0");
			builder.put(grammarAccess.getTransformation_CallAccess().getGroup(), "rule__Transformation_Call__Group__0");
			builder.put(grammarAccess.getTransformation_CallAccess().getGroup_2(), "rule__Transformation_Call__Group_2__0");
			builder.put(grammarAccess.getTransformation_CallAccess().getGroup_2_1(), "rule__Transformation_Call__Group_2_1__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_5(), "rule__Transformation__Group_5__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_5_1(), "rule__Transformation__Group_5_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getEqualsAccess().getGroup(), "rule__Equals__Group__0");
			builder.put(grammarAccess.getEqualsAccess().getGroup_1(), "rule__Equals__Group_1__0");
			builder.put(grammarAccess.getNotEqualsAccess().getGroup(), "rule__NotEquals__Group__0");
			builder.put(grammarAccess.getNotEqualsAccess().getGroup_1(), "rule__NotEquals__Group_1__0");
			builder.put(grammarAccess.getLessAccess().getGroup(), "rule__Less__Group__0");
			builder.put(grammarAccess.getLessAccess().getGroup_1(), "rule__Less__Group_1__0");
			builder.put(grammarAccess.getGreaterAccess().getGroup(), "rule__Greater__Group__0");
			builder.put(grammarAccess.getGreaterAccess().getGroup_1(), "rule__Greater__Group_1__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup(), "rule__Multiply__Group__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1(), "rule__Multiply__Group_1__0");
			builder.put(grammarAccess.getDivideAccess().getGroup(), "rule__Divide__Group__0");
			builder.put(grammarAccess.getDivideAccess().getGroup_1(), "rule__Divide__Group_1__0");
			builder.put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
			builder.put(grammarAccess.getAddAccess().getGroup_1(), "rule__Add__Group_1__0");
			builder.put(grammarAccess.getSubtractAccess().getGroup(), "rule__Subtract__Group__0");
			builder.put(grammarAccess.getSubtractAccess().getGroup_1(), "rule__Subtract__Group_1__0");
			builder.put(grammarAccess.getString_ConstantAccess().getGroup(), "rule__String_Constant__Group__0");
			builder.put(grammarAccess.getNull_ConstantAccess().getGroup(), "rule__Null_Constant__Group__0");
			builder.put(grammarAccess.getSet_ConstantAccess().getGroup(), "rule__Set_Constant__Group__0");
			builder.put(grammarAccess.getSet_ConstantAccess().getGroup_2(), "rule__Set_Constant__Group_2__0");
			builder.put(grammarAccess.getSet_ConstantAccess().getGroup_2_1(), "rule__Set_Constant__Group_2_1__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getTQLAccess().getBlocksAssignment(), "rule__TQL__BlocksAssignment");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment_0(), "rule__Column__NameAssignment_0");
			builder.put(grammarAccess.getColumnAccess().getTypeAssignment_2(), "rule__Column__TypeAssignment_2");
			builder.put(grammarAccess.getSource_TableAccess().getNameAssignment_0(), "rule__Source_Table__NameAssignment_0");
			builder.put(grammarAccess.getSource_TableAccess().getColumnsAssignment_2(), "rule__Source_Table__ColumnsAssignment_2");
			builder.put(grammarAccess.getSource_TableAccess().getColumnsAssignment_3_1(), "rule__Source_Table__ColumnsAssignment_3_1");
			builder.put(grammarAccess.getTarget_TableAccess().getNameAssignment_0(), "rule__Target_Table__NameAssignment_0");
			builder.put(grammarAccess.getTarget_TableAccess().getColumnsAssignment_2(), "rule__Target_Table__ColumnsAssignment_2");
			builder.put(grammarAccess.getTarget_TableAccess().getColumnsAssignment_3_1(), "rule__Target_Table__ColumnsAssignment_3_1");
			builder.put(grammarAccess.getMappingAccess().getSourceAssignment_1(), "rule__Mapping__SourceAssignment_1");
			builder.put(grammarAccess.getMappingAccess().getTargetAssignment_3(), "rule__Mapping__TargetAssignment_3");
			builder.put(grammarAccess.getMappingAccess().getMappedColumnsAssignment_5(), "rule__Mapping__MappedColumnsAssignment_5");
			builder.put(grammarAccess.getMappingAccess().getMappedColumnsAssignment_6_1(), "rule__Mapping__MappedColumnsAssignment_6_1");
			builder.put(grammarAccess.getMapped_ColumnAccess().getSourceAssignment_0(), "rule__Mapped_Column__SourceAssignment_0");
			builder.put(grammarAccess.getMapped_ColumnAccess().getTargetAssignment_2(), "rule__Mapped_Column__TargetAssignment_2");
			builder.put(grammarAccess.getMapped_ColumnAccess().getTransformationCallsAssignment_3_1(), "rule__Mapped_Column__TransformationCallsAssignment_3_1");
			builder.put(grammarAccess.getTransformation_CallAccess().getTransformationAssignment_0(), "rule__Transformation_Call__TransformationAssignment_0");
			builder.put(grammarAccess.getTransformation_CallAccess().getCallParametersAssignment_2_0(), "rule__Transformation_Call__CallParametersAssignment_2_0");
			builder.put(grammarAccess.getTransformation_CallAccess().getCallParametersAssignment_2_1_1(), "rule__Transformation_Call__CallParametersAssignment_2_1_1");
			builder.put(grammarAccess.getTransformationAccess().getInTypeAssignment_1(), "rule__Transformation__InTypeAssignment_1");
			builder.put(grammarAccess.getTransformationAccess().getNameAssignment_3(), "rule__Transformation__NameAssignment_3");
			builder.put(grammarAccess.getTransformationAccess().getParametersAssignment_5_0(), "rule__Transformation__ParametersAssignment_5_0");
			builder.put(grammarAccess.getTransformationAccess().getParametersAssignment_5_1_1(), "rule__Transformation__ParametersAssignment_5_1_1");
			builder.put(grammarAccess.getTransformationAccess().getOutTypeAssignment_8(), "rule__Transformation__OutTypeAssignment_8");
			builder.put(grammarAccess.getTransformationAccess().getBodyAssignment_10(), "rule__Transformation__BodyAssignment_10");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getConstant_Call_ParameterAccess().getParameterAssignment(), "rule__Constant_Call_Parameter__ParameterAssignment");
			builder.put(grammarAccess.getReference_Call_ParameterAccess().getReferenceAssignment(), "rule__Reference_Call_Parameter__ReferenceAssignment");
			builder.put(grammarAccess.getAndAccess().getOperatorAssignment_1_1(), "rule__And__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getOrAccess().getOperatorAssignment_1_1(), "rule__Or__OperatorAssignment_1_1");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualsAccess().getOperatorAssignment_1_1(), "rule__Equals__OperatorAssignment_1_1");
			builder.put(grammarAccess.getEqualsAccess().getRightAssignment_1_2(), "rule__Equals__RightAssignment_1_2");
			builder.put(grammarAccess.getNotEqualsAccess().getOperatorAssignment_1_1(), "rule__NotEquals__OperatorAssignment_1_1");
			builder.put(grammarAccess.getNotEqualsAccess().getRightAssignment_1_2(), "rule__NotEquals__RightAssignment_1_2");
			builder.put(grammarAccess.getLessAccess().getOperatorAssignment_1_1(), "rule__Less__OperatorAssignment_1_1");
			builder.put(grammarAccess.getLessAccess().getRightAssignment_1_2(), "rule__Less__RightAssignment_1_2");
			builder.put(grammarAccess.getGreaterAccess().getOperatorAssignment_1_1(), "rule__Greater__OperatorAssignment_1_1");
			builder.put(grammarAccess.getGreaterAccess().getRightAssignment_1_2(), "rule__Greater__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplyAccess().getOperatorAssignment_1_1(), "rule__Multiply__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplyAccess().getRightAssignment_1_2(), "rule__Multiply__RightAssignment_1_2");
			builder.put(grammarAccess.getDivideAccess().getOperatorAssignment_1_1(), "rule__Divide__OperatorAssignment_1_1");
			builder.put(grammarAccess.getDivideAccess().getRightAssignment_1_2(), "rule__Divide__RightAssignment_1_2");
			builder.put(grammarAccess.getAddAccess().getOperatorAssignment_1_1(), "rule__Add__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAddAccess().getRightAssignment_1_2(), "rule__Add__RightAssignment_1_2");
			builder.put(grammarAccess.getSubtractAccess().getOperatorAssignment_1_1(), "rule__Subtract__OperatorAssignment_1_1");
			builder.put(grammarAccess.getSubtractAccess().getRightAssignment_1_2(), "rule__Subtract__RightAssignment_1_2");
			builder.put(grammarAccess.getColumn_ExpressionAccess().getColumnAssignment(), "rule__Column_Expression__ColumnAssignment");
			builder.put(grammarAccess.getParameter_ExpressionAccess().getParameterAssignment(), "rule__Parameter_Expression__ParameterAssignment");
			builder.put(grammarAccess.getBoolean_ConstantAccess().getValueAssignment(), "rule__Boolean_Constant__ValueAssignment");
			builder.put(grammarAccess.getFloat_ConstantAccess().getValueAssignment(), "rule__Float_Constant__ValueAssignment");
			builder.put(grammarAccess.getInteger_ConstantAccess().getValueAssignment(), "rule__Integer_Constant__ValueAssignment");
			builder.put(grammarAccess.getString_ConstantAccess().getValueAssignment_1(), "rule__String_Constant__ValueAssignment_1");
			builder.put(grammarAccess.getSet_ConstantAccess().getValuesAssignment_2_0(), "rule__Set_Constant__ValuesAssignment_2_0");
			builder.put(grammarAccess.getSet_ConstantAccess().getValuesAssignment_2_1_1(), "rule__Set_Constant__ValuesAssignment_2_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TQLGrammarAccess grammarAccess;

	@Override
	protected InternalTQLParser createParser() {
		InternalTQLParser result = new InternalTQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
