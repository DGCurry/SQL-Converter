/*
 * generated by Xtext 2.27.0
 */
grammar InternalTQL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.tue.gtl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.tue.gtl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.tue.gtl.services.TQLGrammarAccess;

}
@parser::members {
	private TQLGrammarAccess grammarAccess;

	public void setGrammarAccess(TQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBinaryOperationExpression
entryRuleBinaryOperationExpression
:
{ before(grammarAccess.getBinaryOperationExpressionRule()); }
	 ruleBinaryOperationExpression
{ after(grammarAccess.getBinaryOperationExpressionRule()); } 
	 EOF 
;

// Rule BinaryOperationExpression
ruleBinaryOperationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryOperationExpressionAccess().getGroup()); }
		(rule__BinaryOperationExpression__Group__0)
		{ after(grammarAccess.getBinaryOperationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterExpression
entryRuleparameterExpression
:
{ before(grammarAccess.getParameterExpressionRule()); }
	 ruleparameterExpression
{ after(grammarAccess.getParameterExpressionRule()); } 
	 EOF 
;

// Rule parameterExpression
ruleparameterExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterExpressionAccess().getGroup()); }
		(rule__ParameterExpression__Group__0)
		{ after(grammarAccess.getParameterExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringConstantExpression
entryRuleStringConstantExpression
:
{ before(grammarAccess.getStringConstantExpressionRule()); }
	 ruleStringConstantExpression
{ after(grammarAccess.getStringConstantExpressionRule()); } 
	 EOF 
;

// Rule StringConstantExpression
ruleStringConstantExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringConstantExpressionAccess().getGroup()); }
		(rule__StringConstantExpression__Group__0)
		{ after(grammarAccess.getStringConstantExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanConstantExpression
entryRuleBooleanConstantExpression
:
{ before(grammarAccess.getBooleanConstantExpressionRule()); }
	 ruleBooleanConstantExpression
{ after(grammarAccess.getBooleanConstantExpressionRule()); } 
	 EOF 
;

// Rule BooleanConstantExpression
ruleBooleanConstantExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanConstantExpressionAccess().getGroup()); }
		(rule__BooleanConstantExpression__Group__0)
		{ after(grammarAccess.getBooleanConstantExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerConstantExpression
entryRuleIntegerConstantExpression
:
{ before(grammarAccess.getIntegerConstantExpressionRule()); }
	 ruleIntegerConstantExpression
{ after(grammarAccess.getIntegerConstantExpressionRule()); } 
	 EOF 
;

// Rule IntegerConstantExpression
ruleIntegerConstantExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerConstantExpressionAccess().getGroup()); }
		(rule__IntegerConstantExpression__Group__0)
		{ after(grammarAccess.getIntegerConstantExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInExpression
entryRuleInExpression
:
{ before(grammarAccess.getInExpressionRule()); }
	 ruleInExpression
{ after(grammarAccess.getInExpressionRule()); } 
	 EOF 
;

// Rule InExpression
ruleInExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInExpressionAccess().getGroup()); }
		(rule__InExpression__Group__0)
		{ after(grammarAccess.getInExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParseExpression
entryRuleParseExpression
:
{ before(grammarAccess.getParseExpressionRule()); }
	 ruleParseExpression
{ after(grammarAccess.getParseExpressionRule()); } 
	 EOF 
;

// Rule ParseExpression
ruleParseExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParseExpressionAccess().getGroup()); }
		(rule__ParseExpression__Group__0)
		{ after(grammarAccess.getParseExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatConstantExpression
entryRuleFloatConstantExpression
:
{ before(grammarAccess.getFloatConstantExpressionRule()); }
	 ruleFloatConstantExpression
{ after(grammarAccess.getFloatConstantExpressionRule()); } 
	 EOF 
;

// Rule FloatConstantExpression
ruleFloatConstantExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatConstantExpressionAccess().getGroup()); }
		(rule__FloatConstantExpression__Group__0)
		{ after(grammarAccess.getFloatConstantExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFloat
entryRuleEFloat
:
{ before(grammarAccess.getEFloatRule()); }
	 ruleEFloat
{ after(grammarAccess.getEFloatRule()); } 
	 EOF 
;

// Rule EFloat
ruleEFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFloatAccess().getGroup()); }
		(rule__EFloat__Group__0)
		{ after(grammarAccess.getEFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinaryFunction
ruleBinaryFunction
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryFunctionAccess().getAlternatives()); }
		(rule__BinaryFunction__Alternatives)
		{ after(grammarAccess.getBinaryFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Alternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEFloatAccess().getEKeyword_4_0_0()); }
		'E'
		{ after(grammarAccess.getEFloatAccess().getEKeyword_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEFloatAccess().getEKeyword_4_0_1()); }
		'e'
		{ after(grammarAccess.getEFloatAccess().getEKeyword_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryFunction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryFunctionAccess().getMultEnumLiteralDeclaration_0()); }
		('mult')
		{ after(grammarAccess.getBinaryFunctionAccess().getMultEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryFunctionAccess().getSumEnumLiteralDeclaration_1()); }
		('sum')
		{ after(grammarAccess.getBinaryFunctionAccess().getSumEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryFunctionAccess().getDivideEnumLiteralDeclaration_2()); }
		('divide')
		{ after(grammarAccess.getBinaryFunctionAccess().getDivideEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryFunctionAccess().getConcatEnumLiteralDeclaration_3()); }
		('concat')
		{ after(grammarAccess.getBinaryFunctionAccess().getConcatEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0()); }
		('string')
		{ after(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
		('integer')
		{ after(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getFloatsEnumLiteralDeclaration_2()); }
		('floats')
		{ after(grammarAccess.getTypeAccess().getFloatsEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSetsEnumLiteralDeclaration_3()); }
		('sets')
		{ after(grammarAccess.getTypeAccess().getSetsEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDateTimeEnumLiteralDeclaration_4()); }
		('DateTime')
		{ after(grammarAccess.getTypeAccess().getDateTimeEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getNullEnumLiteralDeclaration_5()); }
		('Null')
		{ after(grammarAccess.getTypeAccess().getNullEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6()); }
		('bool')
		{ after(grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__0__Impl
	rule__BinaryOperationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getBinaryOperationExpressionKeyword_0()); }
	'BinaryOperationExpression'
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getBinaryOperationExpressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__1__Impl
	rule__BinaryOperationExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__2__Impl
	rule__BinaryOperationExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getGroup_2()); }
	(rule__BinaryOperationExpression__Group_2__0)?
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__3__Impl
	rule__BinaryOperationExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getLeftKeyword_3()); }
	'left'
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getLeftKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__4__Impl
	rule__BinaryOperationExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getLeftAssignment_4()); }
	(rule__BinaryOperationExpression__LeftAssignment_4)
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getLeftAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__5__Impl
	rule__BinaryOperationExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getRightKeyword_5()); }
	'right'
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getRightKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__6__Impl
	rule__BinaryOperationExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getRightAssignment_6()); }
	(rule__BinaryOperationExpression__RightAssignment_6)
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getRightAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryOperationExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group_2__0__Impl
	rule__BinaryOperationExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getOperationKeyword_2_0()); }
	'operation'
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getOperationKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperationExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperationExpressionAccess().getOperationAssignment_2_1()); }
	(rule__BinaryOperationExpression__OperationAssignment_2_1)
	{ after(grammarAccess.getBinaryOperationExpressionAccess().getOperationAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpression__Group__0__Impl
	rule__ParameterExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpressionAccess().getParameterExpressionAction_0()); }
	()
	{ after(grammarAccess.getParameterExpressionAccess().getParameterExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterExpressionAccess().getParameterExpressionKeyword_1()); }
	'parameterExpression'
	{ after(grammarAccess.getParameterExpressionAccess().getParameterExpressionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstantExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConstantExpression__Group__0__Impl
	rule__StringConstantExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConstantExpressionAccess().getStringConstantExpressionKeyword_0()); }
	'StringConstantExpression'
	{ after(grammarAccess.getStringConstantExpressionAccess().getStringConstantExpressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConstantExpression__Group__1__Impl
	rule__StringConstantExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConstantExpressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getStringConstantExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConstantExpression__Group__2__Impl
	rule__StringConstantExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConstantExpressionAccess().getValueKeyword_2()); }
	'value'
	{ after(grammarAccess.getStringConstantExpressionAccess().getValueKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConstantExpression__Group__3__Impl
	rule__StringConstantExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConstantExpressionAccess().getValueAssignment_3()); }
	(rule__StringConstantExpression__ValueAssignment_3)
	{ after(grammarAccess.getStringConstantExpressionAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConstantExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConstantExpressionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getStringConstantExpressionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanConstantExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanConstantExpression__Group__0__Impl
	rule__BooleanConstantExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanConstantExpressionAccess().getValueAssignment_0()); }
	(rule__BooleanConstantExpression__ValueAssignment_0)
	{ after(grammarAccess.getBooleanConstantExpressionAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanConstantExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanConstantExpressionAccess().getBooleanConstantExpressionKeyword_1()); }
	'BooleanConstantExpression'
	{ after(grammarAccess.getBooleanConstantExpressionAccess().getBooleanConstantExpressionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerConstantExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerConstantExpression__Group__0__Impl
	rule__IntegerConstantExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerConstantExpressionAccess().getIntegerConstantExpressionKeyword_0()); }
	'IntegerConstantExpression'
	{ after(grammarAccess.getIntegerConstantExpressionAccess().getIntegerConstantExpressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerConstantExpression__Group__1__Impl
	rule__IntegerConstantExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerConstantExpressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getIntegerConstantExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerConstantExpression__Group__2__Impl
	rule__IntegerConstantExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerConstantExpressionAccess().getValueKeyword_2()); }
	'value'
	{ after(grammarAccess.getIntegerConstantExpressionAccess().getValueKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerConstantExpression__Group__3__Impl
	rule__IntegerConstantExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerConstantExpressionAccess().getValueAssignment_3()); }
	(rule__IntegerConstantExpression__ValueAssignment_3)
	{ after(grammarAccess.getIntegerConstantExpressionAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerConstantExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerConstantExpressionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIntegerConstantExpressionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__0__Impl
	rule__InExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getInExpressionKeyword_0()); }
	'InExpression'
	{ after(grammarAccess.getInExpressionAccess().getInExpressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__1__Impl
	rule__InExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getInExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__2__Impl
	rule__InExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getGroup_2()); }
	(rule__InExpression__Group_2__0)?
	{ after(grammarAccess.getInExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__3__Impl
	rule__InExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getConstantSetKeyword_3()); }
	'constantSet'
	{ after(grammarAccess.getInExpressionAccess().getConstantSetKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__4__Impl
	rule__InExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getInExpressionAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__5__Impl
	rule__InExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getConstantSetAssignment_5()); }
	(rule__InExpression__ConstantSetAssignment_5)
	{ after(grammarAccess.getInExpressionAccess().getConstantSetAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__6__Impl
	rule__InExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getGroup_6()); }
	(rule__InExpression__Group_6__0)*
	{ after(grammarAccess.getInExpressionAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__7__Impl
	rule__InExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getInExpressionAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getInExpressionAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_2__0__Impl
	rule__InExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getStatementKeyword_2_0()); }
	'statement'
	{ after(grammarAccess.getInExpressionAccess().getStatementKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getStatementAssignment_2_1()); }
	(rule__InExpression__StatementAssignment_2_1)
	{ after(grammarAccess.getInExpressionAccess().getStatementAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_6__0__Impl
	rule__InExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getInExpressionAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInExpressionAccess().getConstantSetAssignment_6_1()); }
	(rule__InExpression__ConstantSetAssignment_6_1)
	{ after(grammarAccess.getInExpressionAccess().getConstantSetAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParseExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group__0__Impl
	rule__ParseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getParseExpressionKeyword_0()); }
	'ParseExpression'
	{ after(grammarAccess.getParseExpressionAccess().getParseExpressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group__1__Impl
	rule__ParseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getParseExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group__2__Impl
	rule__ParseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getGroup_2()); }
	(rule__ParseExpression__Group_2__0)?
	{ after(grammarAccess.getParseExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group__3__Impl
	rule__ParseExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getExpressionKeyword_3()); }
	'expression'
	{ after(grammarAccess.getParseExpressionAccess().getExpressionKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group__4__Impl
	rule__ParseExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getExpressionAssignment_4()); }
	(rule__ParseExpression__ExpressionAssignment_4)
	{ after(grammarAccess.getParseExpressionAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getParseExpressionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParseExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group_2__0__Impl
	rule__ParseExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getOutputTypeKeyword_2_0()); }
	'outputType'
	{ after(grammarAccess.getParseExpressionAccess().getOutputTypeKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParseExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseExpressionAccess().getOutputTypeAssignment_2_1()); }
	(rule__ParseExpression__OutputTypeAssignment_2_1)
	{ after(grammarAccess.getParseExpressionAccess().getOutputTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatConstantExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatConstantExpression__Group__0__Impl
	rule__FloatConstantExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatConstantExpressionAccess().getFloatConstantExpressionKeyword_0()); }
	'FloatConstantExpression'
	{ after(grammarAccess.getFloatConstantExpressionAccess().getFloatConstantExpressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatConstantExpression__Group__1__Impl
	rule__FloatConstantExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatConstantExpressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getFloatConstantExpressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatConstantExpression__Group__2__Impl
	rule__FloatConstantExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatConstantExpressionAccess().getValueKeyword_2()); }
	'value'
	{ after(grammarAccess.getFloatConstantExpressionAccess().getValueKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatConstantExpression__Group__3__Impl
	rule__FloatConstantExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatConstantExpressionAccess().getValueAssignment_3()); }
	(rule__FloatConstantExpression__ValueAssignment_3)
	{ after(grammarAccess.getFloatConstantExpressionAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatConstantExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatConstantExpressionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getFloatConstantExpressionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__0__Impl
	rule__EFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__1__Impl
	rule__EFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); }
	(RULE_INT)?
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__2__Impl
	rule__EFloat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getEFloatAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__3__Impl
	rule__EFloat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getGroup_4()); }
	(rule__EFloat__Group_4__0)?
	{ after(grammarAccess.getEFloatAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_4__0__Impl
	rule__EFloat__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getAlternatives_4_0()); }
	(rule__EFloat__Alternatives_4_0)
	{ after(grammarAccess.getEFloatAccess().getAlternatives_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_4__1__Impl
	rule__EFloat__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1()); }
	('-')?
	{ after(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryOperationExpression__OperationAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperationExpressionAccess().getOperationBinaryFunctionEnumRuleCall_2_1_0()); }
		ruleBinaryFunction
		{ after(grammarAccess.getBinaryOperationExpressionAccess().getOperationBinaryFunctionEnumRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__LeftAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperationExpressionAccess().getLeftExpressionCrossReference_4_0()); }
		(
			{ before(grammarAccess.getBinaryOperationExpressionAccess().getLeftExpressionEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getBinaryOperationExpressionAccess().getLeftExpressionEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getBinaryOperationExpressionAccess().getLeftExpressionCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperationExpression__RightAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperationExpressionAccess().getRightExpressionCrossReference_6_0()); }
		(
			{ before(grammarAccess.getBinaryOperationExpressionAccess().getRightExpressionEStringParserRuleCall_6_0_1()); }
			ruleEString
			{ after(grammarAccess.getBinaryOperationExpressionAccess().getRightExpressionEStringParserRuleCall_6_0_1()); }
		)
		{ after(grammarAccess.getBinaryOperationExpressionAccess().getRightExpressionCrossReference_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpression__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringConstantExpressionAccess().getValueEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getStringConstantExpressionAccess().getValueEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpression__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanConstantExpressionAccess().getValueValueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleanConstantExpressionAccess().getValueValueKeyword_0_0()); }
			'value'
			{ after(grammarAccess.getBooleanConstantExpressionAccess().getValueValueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleanConstantExpressionAccess().getValueValueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerConstantExpression__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerConstantExpressionAccess().getValueEIntParserRuleCall_3_0()); }
		ruleEInt
		{ after(grammarAccess.getIntegerConstantExpressionAccess().getValueEIntParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__StatementAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInExpressionAccess().getStatementExpressionCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getInExpressionAccess().getStatementExpressionEStringParserRuleCall_2_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getInExpressionAccess().getStatementExpressionEStringParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getInExpressionAccess().getStatementExpressionCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__ConstantSetAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionCrossReference_5_0()); }
		(
			{ before(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionEStringParserRuleCall_5_0_1()); }
			ruleEString
			{ after(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionEStringParserRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__ConstantSetAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionCrossReference_6_1_0()); }
		(
			{ before(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1()); }
		)
		{ after(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionCrossReference_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__OutputTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParseExpressionAccess().getOutputTypeTypeEnumRuleCall_2_1_0()); }
		ruleType
		{ after(grammarAccess.getParseExpressionAccess().getOutputTypeTypeEnumRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParseExpression__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParseExpressionAccess().getExpressionExpressionCrossReference_4_0()); }
		(
			{ before(grammarAccess.getParseExpressionAccess().getExpressionExpressionEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getParseExpressionAccess().getExpressionExpressionEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getParseExpressionAccess().getExpressionExpressionCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpression__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatConstantExpressionAccess().getValueEFloatParserRuleCall_3_0()); }
		ruleEFloat
		{ after(grammarAccess.getFloatConstantExpressionAccess().getValueEFloatParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
