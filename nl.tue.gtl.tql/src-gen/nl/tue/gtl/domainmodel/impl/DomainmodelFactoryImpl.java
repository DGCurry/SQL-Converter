/**
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.domainmodel.impl;

import nl.tue.gtl.domainmodel.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DomainmodelFactoryImpl extends EFactoryImpl implements DomainmodelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DomainmodelFactory init()
  {
    try
    {
      DomainmodelFactory theDomainmodelFactory = (DomainmodelFactory)EPackage.Registry.INSTANCE.getEFactory(DomainmodelPackage.eNS_URI);
      if (theDomainmodelFactory != null)
      {
        return theDomainmodelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DomainmodelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainmodelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DomainmodelPackage.TQL: return createTQL();
      case DomainmodelPackage.AND_EXPRESSION: return createAnd_Expression();
      case DomainmodelPackage.OR_EXPRESSION: return createOr_Expression();
      case DomainmodelPackage.EQUALS_EXPRESSION: return createEquals_Expression();
      case DomainmodelPackage.NOT_EQUALS_EXPRESSION: return createNotEquals_Expression();
      case DomainmodelPackage.LESS_EXPRESSION: return createLess_Expression();
      case DomainmodelPackage.GREATER_EXPRESSION: return createGreater_Expression();
      case DomainmodelPackage.MULTIPLY_EXPRESSION: return createMultiply_Expression();
      case DomainmodelPackage.DIVIDE_EXPRESSION: return createDivide_Expression();
      case DomainmodelPackage.ADD_EXPRESSION: return createAdd_Expression();
      case DomainmodelPackage.SUBTRACT_EXPRESSION: return createSubtract_Expression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TQL createTQL()
  {
    TQLImpl tql = new TQLImpl();
    return tql;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And_Expression createAnd_Expression()
  {
    And_ExpressionImpl and_Expression = new And_ExpressionImpl();
    return and_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or_Expression createOr_Expression()
  {
    Or_ExpressionImpl or_Expression = new Or_ExpressionImpl();
    return or_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equals_Expression createEquals_Expression()
  {
    Equals_ExpressionImpl equals_Expression = new Equals_ExpressionImpl();
    return equals_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotEquals_Expression createNotEquals_Expression()
  {
    NotEquals_ExpressionImpl notEquals_Expression = new NotEquals_ExpressionImpl();
    return notEquals_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Less_Expression createLess_Expression()
  {
    Less_ExpressionImpl less_Expression = new Less_ExpressionImpl();
    return less_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Greater_Expression createGreater_Expression()
  {
    Greater_ExpressionImpl greater_Expression = new Greater_ExpressionImpl();
    return greater_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiply_Expression createMultiply_Expression()
  {
    Multiply_ExpressionImpl multiply_Expression = new Multiply_ExpressionImpl();
    return multiply_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Divide_Expression createDivide_Expression()
  {
    Divide_ExpressionImpl divide_Expression = new Divide_ExpressionImpl();
    return divide_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Add_Expression createAdd_Expression()
  {
    Add_ExpressionImpl add_Expression = new Add_ExpressionImpl();
    return add_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subtract_Expression createSubtract_Expression()
  {
    Subtract_ExpressionImpl subtract_Expression = new Subtract_ExpressionImpl();
    return subtract_Expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainmodelPackage getDomainmodelPackage()
  {
    return (DomainmodelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DomainmodelPackage getPackage()
  {
    return DomainmodelPackage.eINSTANCE;
  }

} //DomainmodelFactoryImpl
