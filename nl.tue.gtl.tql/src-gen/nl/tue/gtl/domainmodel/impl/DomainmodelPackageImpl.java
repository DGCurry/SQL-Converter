/**
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.domainmodel.impl;

import nl.tue.gtl.domainmodel.Add_Expression;
import nl.tue.gtl.domainmodel.And_Expression;
import nl.tue.gtl.domainmodel.Divide_Expression;
import nl.tue.gtl.domainmodel.DomainmodelFactory;
import nl.tue.gtl.domainmodel.DomainmodelPackage;
import nl.tue.gtl.domainmodel.Equals_Expression;
import nl.tue.gtl.domainmodel.Greater_Expression;
import nl.tue.gtl.domainmodel.Less_Expression;
import nl.tue.gtl.domainmodel.Multiply_Expression;
import nl.tue.gtl.domainmodel.NotEquals_Expression;
import nl.tue.gtl.domainmodel.Or_Expression;
import nl.tue.gtl.domainmodel.Subtract_Expression;

import nl.tue.gtl.tql.model.ModelPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DomainmodelPackageImpl extends EPackageImpl implements DomainmodelPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tqlEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass and_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass or_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass equals_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notEquals_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass less_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass greater_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiply_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass divide_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass add_ExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subtract_ExpressionEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see nl.tue.gtl.domainmodel.DomainmodelPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private DomainmodelPackageImpl()
  {
    super(eNS_URI, DomainmodelFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link DomainmodelPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static DomainmodelPackage init()
  {
    if (isInited) return (DomainmodelPackage)EPackage.Registry.INSTANCE.getEPackage(DomainmodelPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredDomainmodelPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    DomainmodelPackageImpl theDomainmodelPackage = registeredDomainmodelPackage instanceof DomainmodelPackageImpl ? (DomainmodelPackageImpl)registeredDomainmodelPackage : new DomainmodelPackageImpl();

    isInited = true;

    // Initialize simple dependencies
    ModelPackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theDomainmodelPackage.createPackageContents();

    // Initialize created meta-data
    theDomainmodelPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theDomainmodelPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(DomainmodelPackage.eNS_URI, theDomainmodelPackage);
    return theDomainmodelPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTQL()
  {
    return tqlEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTQL_Blocks()
  {
    return (EReference)tqlEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAnd_Expression()
  {
    return and_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAnd_Expression_Left()
  {
    return (EReference)and_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAnd_Expression_Operator()
  {
    return (EAttribute)and_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAnd_Expression_Right()
  {
    return (EReference)and_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOr_Expression()
  {
    return or_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOr_Expression_Left()
  {
    return (EReference)or_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOr_Expression_Operator()
  {
    return (EAttribute)or_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOr_Expression_Right()
  {
    return (EReference)or_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEquals_Expression()
  {
    return equals_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEquals_Expression_Left()
  {
    return (EReference)equals_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEquals_Expression_Operator()
  {
    return (EAttribute)equals_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEquals_Expression_Right()
  {
    return (EReference)equals_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNotEquals_Expression()
  {
    return notEquals_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNotEquals_Expression_Left()
  {
    return (EReference)notEquals_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNotEquals_Expression_Operator()
  {
    return (EAttribute)notEquals_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNotEquals_Expression_Right()
  {
    return (EReference)notEquals_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLess_Expression()
  {
    return less_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLess_Expression_Left()
  {
    return (EReference)less_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLess_Expression_Operator()
  {
    return (EAttribute)less_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLess_Expression_Right()
  {
    return (EReference)less_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGreater_Expression()
  {
    return greater_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getGreater_Expression_Left()
  {
    return (EReference)greater_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGreater_Expression_Operator()
  {
    return (EAttribute)greater_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getGreater_Expression_Right()
  {
    return (EReference)greater_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiply_Expression()
  {
    return multiply_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMultiply_Expression_Left()
  {
    return (EReference)multiply_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMultiply_Expression_Operator()
  {
    return (EAttribute)multiply_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMultiply_Expression_Right()
  {
    return (EReference)multiply_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDivide_Expression()
  {
    return divide_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDivide_Expression_Left()
  {
    return (EReference)divide_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDivide_Expression_Operator()
  {
    return (EAttribute)divide_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDivide_Expression_Right()
  {
    return (EReference)divide_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAdd_Expression()
  {
    return add_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAdd_Expression_Left()
  {
    return (EReference)add_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAdd_Expression_Operator()
  {
    return (EAttribute)add_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAdd_Expression_Right()
  {
    return (EReference)add_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSubtract_Expression()
  {
    return subtract_ExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubtract_Expression_Left()
  {
    return (EReference)subtract_ExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSubtract_Expression_Operator()
  {
    return (EAttribute)subtract_ExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubtract_Expression_Right()
  {
    return (EReference)subtract_ExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainmodelFactory getDomainmodelFactory()
  {
    return (DomainmodelFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    tqlEClass = createEClass(TQL);
    createEReference(tqlEClass, TQL__BLOCKS);

    and_ExpressionEClass = createEClass(AND_EXPRESSION);
    createEReference(and_ExpressionEClass, AND_EXPRESSION__LEFT);
    createEAttribute(and_ExpressionEClass, AND_EXPRESSION__OPERATOR);
    createEReference(and_ExpressionEClass, AND_EXPRESSION__RIGHT);

    or_ExpressionEClass = createEClass(OR_EXPRESSION);
    createEReference(or_ExpressionEClass, OR_EXPRESSION__LEFT);
    createEAttribute(or_ExpressionEClass, OR_EXPRESSION__OPERATOR);
    createEReference(or_ExpressionEClass, OR_EXPRESSION__RIGHT);

    equals_ExpressionEClass = createEClass(EQUALS_EXPRESSION);
    createEReference(equals_ExpressionEClass, EQUALS_EXPRESSION__LEFT);
    createEAttribute(equals_ExpressionEClass, EQUALS_EXPRESSION__OPERATOR);
    createEReference(equals_ExpressionEClass, EQUALS_EXPRESSION__RIGHT);

    notEquals_ExpressionEClass = createEClass(NOT_EQUALS_EXPRESSION);
    createEReference(notEquals_ExpressionEClass, NOT_EQUALS_EXPRESSION__LEFT);
    createEAttribute(notEquals_ExpressionEClass, NOT_EQUALS_EXPRESSION__OPERATOR);
    createEReference(notEquals_ExpressionEClass, NOT_EQUALS_EXPRESSION__RIGHT);

    less_ExpressionEClass = createEClass(LESS_EXPRESSION);
    createEReference(less_ExpressionEClass, LESS_EXPRESSION__LEFT);
    createEAttribute(less_ExpressionEClass, LESS_EXPRESSION__OPERATOR);
    createEReference(less_ExpressionEClass, LESS_EXPRESSION__RIGHT);

    greater_ExpressionEClass = createEClass(GREATER_EXPRESSION);
    createEReference(greater_ExpressionEClass, GREATER_EXPRESSION__LEFT);
    createEAttribute(greater_ExpressionEClass, GREATER_EXPRESSION__OPERATOR);
    createEReference(greater_ExpressionEClass, GREATER_EXPRESSION__RIGHT);

    multiply_ExpressionEClass = createEClass(MULTIPLY_EXPRESSION);
    createEReference(multiply_ExpressionEClass, MULTIPLY_EXPRESSION__LEFT);
    createEAttribute(multiply_ExpressionEClass, MULTIPLY_EXPRESSION__OPERATOR);
    createEReference(multiply_ExpressionEClass, MULTIPLY_EXPRESSION__RIGHT);

    divide_ExpressionEClass = createEClass(DIVIDE_EXPRESSION);
    createEReference(divide_ExpressionEClass, DIVIDE_EXPRESSION__LEFT);
    createEAttribute(divide_ExpressionEClass, DIVIDE_EXPRESSION__OPERATOR);
    createEReference(divide_ExpressionEClass, DIVIDE_EXPRESSION__RIGHT);

    add_ExpressionEClass = createEClass(ADD_EXPRESSION);
    createEReference(add_ExpressionEClass, ADD_EXPRESSION__LEFT);
    createEAttribute(add_ExpressionEClass, ADD_EXPRESSION__OPERATOR);
    createEReference(add_ExpressionEClass, ADD_EXPRESSION__RIGHT);

    subtract_ExpressionEClass = createEClass(SUBTRACT_EXPRESSION);
    createEReference(subtract_ExpressionEClass, SUBTRACT_EXPRESSION__LEFT);
    createEAttribute(subtract_ExpressionEClass, SUBTRACT_EXPRESSION__OPERATOR);
    createEReference(subtract_ExpressionEClass, SUBTRACT_EXPRESSION__RIGHT);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    ModelPackage theModelPackage = (ModelPackage)EPackage.Registry.INSTANCE.getEPackage(ModelPackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    and_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    or_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    equals_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    notEquals_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    less_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    greater_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    multiply_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    divide_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    add_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());
    subtract_ExpressionEClass.getESuperTypes().add(theModelPackage.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(tqlEClass, nl.tue.gtl.domainmodel.TQL.class, "TQL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTQL_Blocks(), theModelPackage.getBlock(), null, "blocks", null, 0, -1, nl.tue.gtl.domainmodel.TQL.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(and_ExpressionEClass, And_Expression.class, "And_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAnd_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, And_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnd_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, And_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAnd_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, And_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(or_ExpressionEClass, Or_Expression.class, "Or_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOr_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Or_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOr_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Or_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOr_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Or_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(equals_ExpressionEClass, Equals_Expression.class, "Equals_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEquals_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Equals_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEquals_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Equals_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEquals_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Equals_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(notEquals_ExpressionEClass, NotEquals_Expression.class, "NotEquals_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNotEquals_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, NotEquals_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNotEquals_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, NotEquals_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNotEquals_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, NotEquals_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(less_ExpressionEClass, Less_Expression.class, "Less_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLess_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Less_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLess_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Less_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLess_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Less_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(greater_ExpressionEClass, Greater_Expression.class, "Greater_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getGreater_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Greater_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGreater_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Greater_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getGreater_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Greater_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiply_ExpressionEClass, Multiply_Expression.class, "Multiply_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMultiply_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Multiply_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultiply_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Multiply_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMultiply_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Multiply_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(divide_ExpressionEClass, Divide_Expression.class, "Divide_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDivide_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Divide_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDivide_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Divide_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDivide_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Divide_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(add_ExpressionEClass, Add_Expression.class, "Add_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAdd_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Add_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAdd_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Add_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAdd_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Add_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subtract_ExpressionEClass, Subtract_Expression.class, "Subtract_Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSubtract_Expression_Left(), theModelPackage.getExpression(), null, "left", null, 0, 1, Subtract_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSubtract_Expression_Operator(), theModelPackage.getOperator(), "operator", null, 0, 1, Subtract_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSubtract_Expression_Right(), theModelPackage.getExpression(), null, "right", null, 0, 1, Subtract_Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //DomainmodelPackageImpl
