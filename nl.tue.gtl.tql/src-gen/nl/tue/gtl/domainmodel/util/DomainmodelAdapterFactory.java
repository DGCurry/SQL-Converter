/**
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.domainmodel.util;

import nl.tue.gtl.domainmodel.*;

import nl.tue.gtl.tql.model.Expression;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see nl.tue.gtl.domainmodel.DomainmodelPackage
 * @generated
 */
public class DomainmodelAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DomainmodelPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainmodelAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DomainmodelPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainmodelSwitch<Adapter> modelSwitch =
    new DomainmodelSwitch<Adapter>()
    {
      @Override
      public Adapter caseTQL(TQL object)
      {
        return createTQLAdapter();
      }
      @Override
      public Adapter caseAnd_Expression(And_Expression object)
      {
        return createAnd_ExpressionAdapter();
      }
      @Override
      public Adapter caseOr_Expression(Or_Expression object)
      {
        return createOr_ExpressionAdapter();
      }
      @Override
      public Adapter caseEquals_Expression(Equals_Expression object)
      {
        return createEquals_ExpressionAdapter();
      }
      @Override
      public Adapter caseNotEquals_Expression(NotEquals_Expression object)
      {
        return createNotEquals_ExpressionAdapter();
      }
      @Override
      public Adapter caseLess_Expression(Less_Expression object)
      {
        return createLess_ExpressionAdapter();
      }
      @Override
      public Adapter caseGreater_Expression(Greater_Expression object)
      {
        return createGreater_ExpressionAdapter();
      }
      @Override
      public Adapter caseMultiply_Expression(Multiply_Expression object)
      {
        return createMultiply_ExpressionAdapter();
      }
      @Override
      public Adapter caseDivide_Expression(Divide_Expression object)
      {
        return createDivide_ExpressionAdapter();
      }
      @Override
      public Adapter caseAdd_Expression(Add_Expression object)
      {
        return createAdd_ExpressionAdapter();
      }
      @Override
      public Adapter caseSubtract_Expression(Subtract_Expression object)
      {
        return createSubtract_ExpressionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.TQL <em>TQL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.TQL
   * @generated
   */
  public Adapter createTQLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.And_Expression <em>And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.And_Expression
   * @generated
   */
  public Adapter createAnd_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Or_Expression <em>Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Or_Expression
   * @generated
   */
  public Adapter createOr_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Equals_Expression <em>Equals Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Equals_Expression
   * @generated
   */
  public Adapter createEquals_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.NotEquals_Expression <em>Not Equals Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.NotEquals_Expression
   * @generated
   */
  public Adapter createNotEquals_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Less_Expression <em>Less Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Less_Expression
   * @generated
   */
  public Adapter createLess_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Greater_Expression <em>Greater Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Greater_Expression
   * @generated
   */
  public Adapter createGreater_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Multiply_Expression <em>Multiply Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Multiply_Expression
   * @generated
   */
  public Adapter createMultiply_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Divide_Expression <em>Divide Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Divide_Expression
   * @generated
   */
  public Adapter createDivide_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Add_Expression <em>Add Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Add_Expression
   * @generated
   */
  public Adapter createAdd_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.domainmodel.Subtract_Expression <em>Subtract Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.domainmodel.Subtract_Expression
   * @generated
   */
  public Adapter createSubtract_ExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.gtl.tql.model.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.gtl.tql.model.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DomainmodelAdapterFactory
