/*
 * generated by Xtext 2.27.0
 */
grammar InternalTQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.gtl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.gtl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.gtl.services.TQLGrammarAccess;

}

@parser::members {

 	private TQLGrammarAccess grammarAccess;

    public InternalTQLParser(TokenStream input, TQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Block";
   	}

   	@Override
   	protected TQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockAccess().getTable_ImplParserRuleCall_0());
		}
		this_Table_Impl_0=ruleTable_Impl
		{
			$current = $this_Table_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getMappingParserRuleCall_1());
		}
		this_Mapping_1=ruleMapping
		{
			$current = $this_Mapping_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTable_Impl
entryRuleTable_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTable_ImplRule()); }
	iv_ruleTable_Impl=ruleTable_Impl
	{ $current=$iv_ruleTable_Impl.current; }
	EOF;

// Rule Table_Impl
ruleTable_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='source'
			{
				newLeafNode(otherlv_0, grammarAccess.getTable_ImplAccess().getSourceKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTable_ImplAccess().getSource_TableParserRuleCall_0_1());
			}
			this_Source_Table_1=ruleSource_Table
			{
				$current = $this_Source_Table_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2='target'
			{
				newLeafNode(otherlv_2, grammarAccess.getTable_ImplAccess().getTargetKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTable_ImplAccess().getTarget_TableParserRuleCall_1_1());
			}
			this_Target_Table_3=ruleTarget_Table
			{
				$current = $this_Target_Table_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSource_Table
entryRuleSource_Table returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSource_TableRule()); }
	iv_ruleSource_Table=ruleSource_Table
	{ $current=$iv_ruleSource_Table.current; }
	EOF;

// Rule Source_Table
ruleSource_Table returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSource_TableAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSource_TableRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"nl.tue.gtl.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSource_TableAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSource_TableAccess().getColumnsTableFieldParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleTableField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSource_TableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_2_0,
						"nl.tue.gtl.TQL.TableField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getSource_TableAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSource_TableAccess().getColumnsTableFieldParserRuleCall_3_1_0());
					}
					lv_columns_4_0=ruleTableField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSource_TableRule());
						}
						add(
							$current,
							"columns",
							lv_columns_4_0,
							"nl.tue.gtl.TQL.TableField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSource_TableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTarget_Table
entryRuleTarget_Table returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTarget_TableRule()); }
	iv_ruleTarget_Table=ruleTarget_Table
	{ $current=$iv_ruleTarget_Table.current; }
	EOF;

// Rule Target_Table
ruleTarget_Table returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTarget_TableAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTarget_TableRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"nl.tue.gtl.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTarget_TableAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTarget_TableAccess().getColumnsTableFieldParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleTableField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTarget_TableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_2_0,
						"nl.tue.gtl.TQL.TableField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getTarget_TableAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTarget_TableAccess().getColumnsTableFieldParserRuleCall_3_1_0());
					}
					lv_columns_4_0=ruleTableField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTarget_TableRule());
						}
						add(
							$current,
							"columns",
							lv_columns_4_0,
							"nl.tue.gtl.TQL.TableField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTarget_TableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTableField
entryRuleTableField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableFieldRule()); }
	iv_ruleTableField=ruleTableField
	{ $current=$iv_ruleTableField.current; }
	EOF;

// Rule TableField
ruleTableField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTableFieldAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableFieldRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"nl.tue.gtl.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTableFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableFieldAccess().getTypeTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"nl.tue.gtl.TQL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getTableFieldAccess().getCommaKeyword_3());
		}
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mapping'
		{
			newLeafNode(otherlv_0, grammarAccess.getMappingAccess().getMappingKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappingRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMappingAccess().getSourcetableSourceTableCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getMappingAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappingRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMappingAccess().getTargettableTargetTableCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getFieldsMappingFieldParserRuleCall_5_0());
				}
				lv_fields_5_0=ruleMappingField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					add(
						$current,
						"fields",
						lv_fields_5_0,
						"nl.tue.gtl.TQL.MappingField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMappingField
entryRuleMappingField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingFieldRule()); }
	iv_ruleMappingField=ruleMappingField
	{ $current=$iv_ruleMappingField.current; }
	EOF;

// Rule MappingField
ruleMappingField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MappingField'
		{
			newLeafNode(otherlv_0, grammarAccess.getMappingFieldAccess().getMappingFieldKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMappingFieldAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='souceField'
		{
			newLeafNode(otherlv_2, grammarAccess.getMappingFieldAccess().getSouceFieldKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappingFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMappingFieldAccess().getSouceFieldTableFieldCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='targetField'
		{
			newLeafNode(otherlv_4, grammarAccess.getMappingFieldAccess().getTargetFieldKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappingFieldRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMappingFieldAccess().getTargetFieldTableFieldCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='calls'
			{
				newLeafNode(otherlv_6, grammarAccess.getMappingFieldAccess().getCallsKeyword_6_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getMappingFieldAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMappingFieldAccess().getCallsTransformationCallParserRuleCall_6_2_0());
					}
					lv_calls_8_0=ruleTransformationCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMappingFieldRule());
						}
						add(
							$current,
							"calls",
							lv_calls_8_0,
							"nl.tue.gtl.TQL.TransformationCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getMappingFieldAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMappingFieldAccess().getCallsTransformationCallParserRuleCall_6_3_1_0());
						}
						lv_calls_10_0=ruleTransformationCall
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMappingFieldRule());
							}
							add(
								$current,
								"calls",
								lv_calls_10_0,
								"nl.tue.gtl.TQL.TransformationCall");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getMappingFieldAccess().getRightCurlyBracketKeyword_6_4());
			}
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getMappingFieldAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleTransformationCall
entryRuleTransformationCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationCallRule()); }
	iv_ruleTransformationCall=ruleTransformationCall
	{ $current=$iv_ruleTransformationCall.current; }
	EOF;

// Rule TransformationCall
ruleTransformationCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TransformationCall'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransformationCallAccess().getTransformationCallKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransformationCallAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='parameters'
			{
				newLeafNode(otherlv_2, grammarAccess.getTransformationCallAccess().getParametersKeyword_2_0());
			}
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getTransformationCallAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransformationCallRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTransformationCallAccess().getParametersTableFieldCrossReference_2_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getTransformationCallAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransformationCallRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getTransformationCallAccess().getParametersTableFieldCrossReference_2_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getTransformationCallAccess().getRightParenthesisKeyword_2_4());
			}
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getTransformationCallAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='string'
			{
				$current = grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='integer'
			{
				$current = grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='floats'
			{
				$current = grammarAccess.getTypeAccess().getFloatsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getFloatsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='sets'
			{
				$current = grammarAccess.getTypeAccess().getSetsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getSetsEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='DateTime'
			{
				$current = grammarAccess.getTypeAccess().getDateTimeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getDateTimeEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Null'
			{
				$current = grammarAccess.getTypeAccess().getNullEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getNullEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='bool'
			{
				$current = grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
