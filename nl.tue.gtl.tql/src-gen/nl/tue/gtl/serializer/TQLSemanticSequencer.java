/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.tue.gtl.services.TQLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tqlModel.Mapping;
import tqlModel.MappingField;
import tqlModel.SourceTable;
import tqlModel.TableField;
import tqlModel.TargetTable;
import tqlModel.TqlModelPackage;
import tqlModel.TransformationCall;

@SuppressWarnings("all")
public class TQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TqlModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TqlModelPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case TqlModelPackage.MAPPING_FIELD:
				sequence_MappingField(context, (MappingField) semanticObject); 
				return; 
			case TqlModelPackage.SOURCE_TABLE:
				sequence_Source_Table(context, (SourceTable) semanticObject); 
				return; 
			case TqlModelPackage.TABLE_FIELD:
				sequence_TableField(context, (TableField) semanticObject); 
				return; 
			case TqlModelPackage.TARGET_TABLE:
				sequence_Target_Table(context, (TargetTable) semanticObject); 
				return; 
			case TqlModelPackage.TRANSFORMATION_CALL:
				sequence_TransformationCall(context, (TransformationCall) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     MappingField returns MappingField
	 *
	 * Constraint:
	 *     (souceField=[TableField|EString] targetField=[TableField|EString] (calls+=TransformationCall calls+=TransformationCall*)?)
	 * </pre>
	 */
	protected void sequence_MappingField(ISerializationContext context, MappingField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Mapping
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (sourcetable=[SourceTable|EString] targettable=[TargetTable|EString] fields+=MappingField)
	 * </pre>
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns SourceTable
	 *     Table_Impl returns SourceTable
	 *     Source_Table returns SourceTable
	 *
	 * Constraint:
	 *     (name=EString columns+=TableField columns+=TableField*)
	 * </pre>
	 */
	protected void sequence_Source_Table(ISerializationContext context, SourceTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TableField returns TableField
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 * </pre>
	 */
	protected void sequence_TableField(ISerializationContext context, TableField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TqlModelPackage.Literals.TABLE_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TqlModelPackage.Literals.TABLE_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, TqlModelPackage.Literals.TABLE_FIELD__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TqlModelPackage.Literals.TABLE_FIELD__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableFieldAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTableFieldAccess().getTypeTypeEnumRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns TargetTable
	 *     Table_Impl returns TargetTable
	 *     Target_Table returns TargetTable
	 *
	 * Constraint:
	 *     (name=EString columns+=TableField columns+=TableField*)
	 * </pre>
	 */
	protected void sequence_Target_Table(ISerializationContext context, TargetTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TransformationCall returns TransformationCall
	 *
	 * Constraint:
	 *     (parameters+=[TableField|EString] parameters+=[TableField|EString]*)
	 * </pre>
	 */
	protected void sequence_TransformationCall(ISerializationContext context, TransformationCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
