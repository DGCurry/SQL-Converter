/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTable_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//    Table_Impl|Mapping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Table_Impl|Mapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Table_Impl
		public RuleCall getTable_ImplParserRuleCall_0() { return cTable_ImplParserRuleCall_0; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }
	}
	public class Table_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Table_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSourceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSource_TableParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTargetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTarget_TableParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Table_Impl returns Table:
		//    ('source' Source_Table) |
		//    ('target' Target_Table)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('source' Source_Table) |
		//('target' Target_Table)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('source' Source_Table)
		public Group getGroup_0() { return cGroup_0; }
		
		//'source'
		public Keyword getSourceKeyword_0_0() { return cSourceKeyword_0_0; }
		
		//Source_Table
		public RuleCall getSource_TableParserRuleCall_0_1() { return cSource_TableParserRuleCall_0_1; }
		
		//('target' Target_Table)
		public Group getGroup_1() { return cGroup_1; }
		
		//'target'
		public Keyword getTargetKeyword_1_0() { return cTargetKeyword_1_0; }
		
		//Target_Table
		public RuleCall getTarget_TableParserRuleCall_1_1() { return cTarget_TableParserRuleCall_1_1; }
	}
	public class Source_TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Source_Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsTableFieldParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsTableFieldParserRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Source_Table returns SourceTable:
		//    name=EString
		//    '{'
		//        columns+=TableField ( "," columns+=TableField)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    columns+=TableField ( "," columns+=TableField)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_2_0() { return cColumnsTableFieldParserRuleCall_2_0; }
		
		//( "," columns+=TableField)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_3_1_0() { return cColumnsTableFieldParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class Target_TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Target_Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsTableFieldParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsTableFieldParserRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Target_Table returns TargetTable:
		//    name=EString
		//    '{'
		//        columns+=TableField ( "," columns+=TableField)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    columns+=TableField ( "," columns+=TableField)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_2_0() { return cColumnsTableFieldParserRuleCall_2_0; }
		
		//( "," columns+=TableField)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_3_1_0() { return cColumnsTableFieldParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TableFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.TableField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TableField returns TableField:
		//    name=EString
		//    ':'
		//        type=Type ( "," )
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//':'
		//    type=Type ( "," )
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_2_0() { return cTypeTypeEnumRuleCall_2_0; }
		
		//( "," )
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourcetableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourcetableSourceTableCrossReference_1_0 = (CrossReference)cSourcetableAssignment_1.eContents().get(0);
		private final RuleCall cSourcetableSourceTableEStringParserRuleCall_1_0_1 = (RuleCall)cSourcetableSourceTableCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargettableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargettableTargetTableCrossReference_3_0 = (CrossReference)cTargettableAssignment_3.eContents().get(0);
		private final RuleCall cTargettableTargetTableEStringParserRuleCall_3_0_1 = (RuleCall)cTargettableTargetTableCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsMappingFieldParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mapping returns Mapping:
		//    'mapping' sourcetable=[SourceTable|EString] '->' targettable=[TargetTable|EString]
		//    '{'
		//        fields+=MappingField
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'mapping' sourcetable=[SourceTable|EString] '->' targettable=[TargetTable|EString]
		//'{'
		//    fields+=MappingField
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//sourcetable=[SourceTable|EString]
		public Assignment getSourcetableAssignment_1() { return cSourcetableAssignment_1; }
		
		//[SourceTable|EString]
		public CrossReference getSourcetableSourceTableCrossReference_1_0() { return cSourcetableSourceTableCrossReference_1_0; }
		
		//EString
		public RuleCall getSourcetableSourceTableEStringParserRuleCall_1_0_1() { return cSourcetableSourceTableEStringParserRuleCall_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targettable=[TargetTable|EString]
		public Assignment getTargettableAssignment_3() { return cTargettableAssignment_3; }
		
		//[TargetTable|EString]
		public CrossReference getTargettableTargetTableCrossReference_3_0() { return cTargettableTargetTableCrossReference_3_0; }
		
		//EString
		public RuleCall getTargettableTargetTableEStringParserRuleCall_3_0_1() { return cTargettableTargetTableEStringParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//fields+=MappingField
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }
		
		//MappingField
		public RuleCall getFieldsMappingFieldParserRuleCall_5_0() { return cFieldsMappingFieldParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MappingFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.MappingField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSouceFieldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSouceFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSouceFieldTableFieldCrossReference_3_0 = (CrossReference)cSouceFieldAssignment_3.eContents().get(0);
		private final RuleCall cSouceFieldTableFieldEStringParserRuleCall_3_0_1 = (RuleCall)cSouceFieldTableFieldCrossReference_3_0.eContents().get(1);
		private final Keyword cTargetFieldKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetFieldAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetFieldTableFieldCrossReference_5_0 = (CrossReference)cTargetFieldAssignment_5.eContents().get(0);
		private final RuleCall cTargetFieldTableFieldEStringParserRuleCall_5_0_1 = (RuleCall)cTargetFieldTableFieldCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCallsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCallsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCallsTransformationCallParserRuleCall_6_2_0 = (RuleCall)cCallsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cCallsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cCallsTransformationCallParserRuleCall_6_3_1_0 = (RuleCall)cCallsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MappingField returns MappingField:
		//    'MappingField'
		//    '{'
		//        'souceField' souceField=[TableField|EString]
		//        'targetField' targetField=[TableField|EString]
		//        ('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MappingField'
		//'{'
		//    'souceField' souceField=[TableField|EString]
		//    'targetField' targetField=[TableField|EString]
		//    ('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'MappingField'
		public Keyword getMappingFieldKeyword_0() { return cMappingFieldKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'souceField'
		public Keyword getSouceFieldKeyword_2() { return cSouceFieldKeyword_2; }
		
		//souceField=[TableField|EString]
		public Assignment getSouceFieldAssignment_3() { return cSouceFieldAssignment_3; }
		
		//[TableField|EString]
		public CrossReference getSouceFieldTableFieldCrossReference_3_0() { return cSouceFieldTableFieldCrossReference_3_0; }
		
		//EString
		public RuleCall getSouceFieldTableFieldEStringParserRuleCall_3_0_1() { return cSouceFieldTableFieldEStringParserRuleCall_3_0_1; }
		
		//'targetField'
		public Keyword getTargetFieldKeyword_4() { return cTargetFieldKeyword_4; }
		
		//targetField=[TableField|EString]
		public Assignment getTargetFieldAssignment_5() { return cTargetFieldAssignment_5; }
		
		//[TableField|EString]
		public CrossReference getTargetFieldTableFieldCrossReference_5_0() { return cTargetFieldTableFieldCrossReference_5_0; }
		
		//EString
		public RuleCall getTargetFieldTableFieldEStringParserRuleCall_5_0_1() { return cTargetFieldTableFieldEStringParserRuleCall_5_0_1; }
		
		//('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'calls'
		public Keyword getCallsKeyword_6_0() { return cCallsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//calls+=TransformationCall
		public Assignment getCallsAssignment_6_2() { return cCallsAssignment_6_2; }
		
		//TransformationCall
		public RuleCall getCallsTransformationCallParserRuleCall_6_2_0() { return cCallsTransformationCallParserRuleCall_6_2_0; }
		
		//( "," calls+=TransformationCall)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//calls+=TransformationCall
		public Assignment getCallsAssignment_6_3_1() { return cCallsAssignment_6_3_1; }
		
		//TransformationCall
		public RuleCall getCallsTransformationCallParserRuleCall_6_3_1_0() { return cCallsTransformationCallParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TransformationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.TransformationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cParametersTableFieldCrossReference_2_2_0 = (CrossReference)cParametersAssignment_2_2.eContents().get(0);
		private final RuleCall cParametersTableFieldEStringParserRuleCall_2_2_0_1 = (RuleCall)cParametersTableFieldCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cParametersAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final CrossReference cParametersTableFieldCrossReference_2_3_1_0 = (CrossReference)cParametersAssignment_2_3_1.eContents().get(0);
		private final RuleCall cParametersTableFieldEStringParserRuleCall_2_3_1_0_1 = (RuleCall)cParametersTableFieldCrossReference_2_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TransformationCall returns TransformationCall:
		//    'TransformationCall'
		//    '{'
		//        ('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TransformationCall'
		//'{'
		//    ('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'TransformationCall'
		public Keyword getTransformationCallKeyword_0() { return cTransformationCallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'parameters'
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//parameters+=[TableField|EString]
		public Assignment getParametersAssignment_2_2() { return cParametersAssignment_2_2; }
		
		//[TableField|EString]
		public CrossReference getParametersTableFieldCrossReference_2_2_0() { return cParametersTableFieldCrossReference_2_2_0; }
		
		//EString
		public RuleCall getParametersTableFieldEStringParserRuleCall_2_2_0_1() { return cParametersTableFieldEStringParserRuleCall_2_2_0_1; }
		
		//( "," parameters+=[TableField|EString])*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//parameters+=[TableField|EString]
		public Assignment getParametersAssignment_2_3_1() { return cParametersAssignment_2_3_1; }
		
		//[TableField|EString]
		public CrossReference getParametersTableFieldCrossReference_2_3_1_0() { return cParametersTableFieldCrossReference_2_3_1_0; }
		
		//EString
		public RuleCall getParametersTableFieldEStringParserRuleCall_2_3_1_0_1() { return cParametersTableFieldEStringParserRuleCall_2_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatsFloatsKeyword_2_0 = (Keyword)cFloatsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSetsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSetsSetsKeyword_3_0 = (Keyword)cSetsEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateTimeDateTimeKeyword_4_0 = (Keyword)cDateTimeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNullNullKeyword_5_0 = (Keyword)cNullEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBoolBoolKeyword_6_0 = (Keyword)cBoolEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Type returns Type:
		//                string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';
		public EnumRule getRule() { return rule; }
		
		//string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string = 'string'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//integer = 'integer'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		//'integer'
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }
		
		//floats = 'floats'
		public EnumLiteralDeclaration getFloatsEnumLiteralDeclaration_2() { return cFloatsEnumLiteralDeclaration_2; }
		
		//'floats'
		public Keyword getFloatsFloatsKeyword_2_0() { return cFloatsFloatsKeyword_2_0; }
		
		//sets = 'sets'
		public EnumLiteralDeclaration getSetsEnumLiteralDeclaration_3() { return cSetsEnumLiteralDeclaration_3; }
		
		//'sets'
		public Keyword getSetsSetsKeyword_3_0() { return cSetsSetsKeyword_3_0; }
		
		//DateTime = 'DateTime'
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_4() { return cDateTimeEnumLiteralDeclaration_4; }
		
		//'DateTime'
		public Keyword getDateTimeDateTimeKeyword_4_0() { return cDateTimeDateTimeKeyword_4_0; }
		
		//Null = 'Null'
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_5() { return cNullEnumLiteralDeclaration_5; }
		
		//'Null'
		public Keyword getNullNullKeyword_5_0() { return cNullNullKeyword_5_0; }
		
		//bool = 'bool'
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_6() { return cBoolEnumLiteralDeclaration_6; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_6_0() { return cBoolBoolKeyword_6_0; }
	}
	public class BooleanFunctionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.BooleanFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotequalNotequalKeyword_1_0 = (Keyword)cNotequalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSmallerSmallerKeyword_2_0 = (Keyword)cSmallerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOrOrKeyword_4_0 = (Keyword)cOrEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAndAndKeyword_5_0 = (Keyword)cAndEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BooleanFunction returns BooleanFunction:
		//                equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';
		public EnumRule getRule() { return rule; }
		
		//equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal = 'equal'
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_0_0() { return cEqualEqualKeyword_0_0; }
		
		//notequal = 'notequal'
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_1() { return cNotequalEnumLiteralDeclaration_1; }
		
		//'notequal'
		public Keyword getNotequalNotequalKeyword_1_0() { return cNotequalNotequalKeyword_1_0; }
		
		//smaller = 'smaller'
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_2() { return cSmallerEnumLiteralDeclaration_2; }
		
		//'smaller'
		public Keyword getSmallerSmallerKeyword_2_0() { return cSmallerSmallerKeyword_2_0; }
		
		//greater = 'greater'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }
		
		//'greater'
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }
		
		//or = 'or'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_4() { return cOrEnumLiteralDeclaration_4; }
		
		//'or'
		public Keyword getOrOrKeyword_4_0() { return cOrOrKeyword_4_0; }
		
		//and = 'and'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_5() { return cAndEnumLiteralDeclaration_5; }
		
		//'and'
		public Keyword getAndAndKeyword_5_0() { return cAndAndKeyword_5_0; }
	}
	public class BinaryFunctionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.BinaryFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultMultKeyword_0_0 = (Keyword)cMultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSumSumKeyword_1_0 = (Keyword)cSumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivideDivideKeyword_2_0 = (Keyword)cDivideEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cConcatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cConcatConcatKeyword_3_0 = (Keyword)cConcatEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BinaryFunction returns BinaryFunction:
		//                mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat';
		public EnumRule getRule() { return rule; }
		
		//mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mult = 'mult'
		public EnumLiteralDeclaration getMultEnumLiteralDeclaration_0() { return cMultEnumLiteralDeclaration_0; }
		
		//'mult'
		public Keyword getMultMultKeyword_0_0() { return cMultMultKeyword_0_0; }
		
		//sum = 'sum'
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_1() { return cSumEnumLiteralDeclaration_1; }
		
		//'sum'
		public Keyword getSumSumKeyword_1_0() { return cSumSumKeyword_1_0; }
		
		//divide = 'divide'
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_2() { return cDivideEnumLiteralDeclaration_2; }
		
		//'divide'
		public Keyword getDivideDivideKeyword_2_0() { return cDivideDivideKeyword_2_0; }
		
		//concat = 'concat'
		public EnumLiteralDeclaration getConcatEnumLiteralDeclaration_3() { return cConcatEnumLiteralDeclaration_3; }
		
		//'concat'
		public Keyword getConcatConcatKeyword_3_0() { return cConcatConcatKeyword_3_0; }
	}
	
	private final BlockElements pBlock;
	private final Table_ImplElements pTable_Impl;
	private final Source_TableElements pSource_Table;
	private final Target_TableElements pTarget_Table;
	private final TableFieldElements pTableField;
	private final MappingElements pMapping;
	private final TypeElements eType;
	private final MappingFieldElements pMappingField;
	private final TransformationCallElements pTransformationCall;
	private final BooleanFunctionElements eBooleanFunction;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final BinaryFunctionElements eBinaryFunction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBlock = new BlockElements();
		this.pTable_Impl = new Table_ImplElements();
		this.pSource_Table = new Source_TableElements();
		this.pTarget_Table = new Target_TableElements();
		this.pTableField = new TableFieldElements();
		this.pMapping = new MappingElements();
		this.eType = new TypeElements();
		this.pMappingField = new MappingFieldElements();
		this.pTransformationCall = new TransformationCallElements();
		this.eBooleanFunction = new BooleanFunctionElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.eBinaryFunction = new BinaryFunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tue.gtl.TQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Block:
	//    Table_Impl|Mapping
	//;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Table_Impl returns Table:
	//    ('source' Source_Table) |
	//    ('target' Target_Table)
	//    ;
	public Table_ImplElements getTable_ImplAccess() {
		return pTable_Impl;
	}
	
	public ParserRule getTable_ImplRule() {
		return getTable_ImplAccess().getRule();
	}
	
	//Source_Table returns SourceTable:
	//    name=EString
	//    '{'
	//        columns+=TableField ( "," columns+=TableField)*
	//    '}';
	public Source_TableElements getSource_TableAccess() {
		return pSource_Table;
	}
	
	public ParserRule getSource_TableRule() {
		return getSource_TableAccess().getRule();
	}
	
	//Target_Table returns TargetTable:
	//    name=EString
	//    '{'
	//        columns+=TableField ( "," columns+=TableField)*
	//    '}';
	public Target_TableElements getTarget_TableAccess() {
		return pTarget_Table;
	}
	
	public ParserRule getTarget_TableRule() {
		return getTarget_TableAccess().getRule();
	}
	
	//TableField returns TableField:
	//    name=EString
	//    ':'
	//        type=Type ( "," )
	//    ;
	public TableFieldElements getTableFieldAccess() {
		return pTableField;
	}
	
	public ParserRule getTableFieldRule() {
		return getTableFieldAccess().getRule();
	}
	
	//Mapping returns Mapping:
	//    'mapping' sourcetable=[SourceTable|EString] '->' targettable=[TargetTable|EString]
	//    '{'
	//        fields+=MappingField
	//    '}';
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//enum Type returns Type:
	//                string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MappingField returns MappingField:
	//    'MappingField'
	//    '{'
	//        'souceField' souceField=[TableField|EString]
	//        'targetField' targetField=[TableField|EString]
	//        ('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
	//    '}';
	public MappingFieldElements getMappingFieldAccess() {
		return pMappingField;
	}
	
	public ParserRule getMappingFieldRule() {
		return getMappingFieldAccess().getRule();
	}
	
	//TransformationCall returns TransformationCall:
	//    'TransformationCall'
	//    '{'
	//        ('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
	//    '}';
	public TransformationCallElements getTransformationCallAccess() {
		return pTransformationCall;
	}
	
	public ParserRule getTransformationCallRule() {
		return getTransformationCallAccess().getRule();
	}
	
	//enum BooleanFunction returns BooleanFunction:
	//                equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';
	public BooleanFunctionElements getBooleanFunctionAccess() {
		return eBooleanFunction;
	}
	
	public EnumRule getBooleanFunctionRule() {
		return getBooleanFunctionAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//enum BinaryFunction returns BinaryFunction:
	//                mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat';
	public BinaryFunctionElements getBinaryFunctionAccess() {
		return eBinaryFunction;
	}
	
	public EnumRule getBinaryFunctionRule() {
		return getBinaryFunctionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
