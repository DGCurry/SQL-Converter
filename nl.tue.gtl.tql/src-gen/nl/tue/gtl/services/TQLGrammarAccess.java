/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.TQL");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		//TQL:
		//    (blocks += Block)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(blocks += Block)*
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_0() { return cBlocksBlockParserRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTable_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransformationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Block:
		//    Table_Impl | Mapping | Transformation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Table_Impl | Mapping | Transformation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Table_Impl
		public RuleCall getTable_ImplParserRuleCall_0() { return cTable_ImplParserRuleCall_0; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }
		
		//Transformation
		public RuleCall getTransformationParserRuleCall_2() { return cTransformationParserRuleCall_2; }
	}
	public class Table_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Table_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSourceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSource_TableParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTargetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTarget_TableParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Table_Impl returns Table:
		//    ('source' Source_Table) |
		//    ('target' Target_Table)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('source' Source_Table) |
		//('target' Target_Table)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('source' Source_Table)
		public Group getGroup_0() { return cGroup_0; }
		
		//'source'
		public Keyword getSourceKeyword_0_0() { return cSourceKeyword_0_0; }
		
		//Source_Table
		public RuleCall getSource_TableParserRuleCall_0_1() { return cSource_TableParserRuleCall_0_1; }
		
		//('target' Target_Table)
		public Group getGroup_1() { return cGroup_1; }
		
		//'target'
		public Keyword getTargetKeyword_1_0() { return cTargetKeyword_1_0; }
		
		//Target_Table
		public RuleCall getTarget_TableParserRuleCall_1_1() { return cTarget_TableParserRuleCall_1_1; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Column returns Column: name=EString ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_2_0() { return cTypeTypeEnumRuleCall_2_0; }
	}
	public class Source_TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Source_Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsColumnParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Source_Table returns SourceTable:
		//    name=EString
		//    '{'
		//         columns+=Column ( "," columns+=Column)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//     columns+=Column ( "," columns+=Column)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_0() { return cColumnsColumnParserRuleCall_2_0; }
		
		//( "," columns+=Column)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_1_0() { return cColumnsColumnParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class Target_TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Target_Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsColumnParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Target_Table returns TargetTable:
		//    name=EString
		//    '{'
		//        columns+=Column ( "," columns+=Column)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    columns+=Column ( "," columns+=Column)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_0() { return cColumnsColumnParserRuleCall_2_0; }
		
		//( "," columns+=Column)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_1_0() { return cColumnsColumnParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceSourceTableCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceSourceTableEStringParserRuleCall_1_0_1 = (RuleCall)cSourceSourceTableCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetTargetTableCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetTargetTableEStringParserRuleCall_3_0_1 = (RuleCall)cTargetTargetTableCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMappedColumnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMappedColumnsMapped_ColumnParserRuleCall_5_0 = (RuleCall)cMappedColumnsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMappedColumnsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMappedColumnsMapped_ColumnParserRuleCall_6_1_0 = (RuleCall)cMappedColumnsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Mapping returns Mapping:
		//    'mapping' source=[SourceTable|EString] '->' target=[TargetTable|EString]
		//    '{'
		//        mappedColumns+=Mapped_Column ( ',' mappedColumns+=Mapped_Column)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mapping' source=[SourceTable|EString] '->' target=[TargetTable|EString]
		//'{'
		//    mappedColumns+=Mapped_Column ( ',' mappedColumns+=Mapped_Column)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//source=[SourceTable|EString]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[SourceTable|EString]
		public CrossReference getSourceSourceTableCrossReference_1_0() { return cSourceSourceTableCrossReference_1_0; }
		
		//EString
		public RuleCall getSourceSourceTableEStringParserRuleCall_1_0_1() { return cSourceSourceTableEStringParserRuleCall_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//target=[TargetTable|EString]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[TargetTable|EString]
		public CrossReference getTargetTargetTableCrossReference_3_0() { return cTargetTargetTableCrossReference_3_0; }
		
		//EString
		public RuleCall getTargetTargetTableEStringParserRuleCall_3_0_1() { return cTargetTargetTableEStringParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//mappedColumns+=Mapped_Column
		public Assignment getMappedColumnsAssignment_5() { return cMappedColumnsAssignment_5; }
		
		//Mapped_Column
		public RuleCall getMappedColumnsMapped_ColumnParserRuleCall_5_0() { return cMappedColumnsMapped_ColumnParserRuleCall_5_0; }
		
		//( ',' mappedColumns+=Mapped_Column)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//mappedColumns+=Mapped_Column
		public Assignment getMappedColumnsAssignment_6_1() { return cMappedColumnsAssignment_6_1; }
		
		//Mapped_Column
		public RuleCall getMappedColumnsMapped_ColumnParserRuleCall_6_1_0() { return cMappedColumnsMapped_ColumnParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class Mapped_ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Mapped_Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetColumnCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetColumnEStringParserRuleCall_0_0_1 = (RuleCall)cTargetColumnCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceColumnCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceColumnEStringParserRuleCall_2_0_1 = (RuleCall)cSourceColumnCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTransformationCallsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTransformationCallsTransformation_CallParserRuleCall_3_1_0 = (RuleCall)cTransformationCallsAssignment_3_1.eContents().get(0);
		
		//Mapped_Column returns MappedColumn:
		//    target=[Column|EString] ':' source=[Column|EString] ( '|' transformationCalls+=Transformation_Call)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[Column|EString] ':' source=[Column|EString] ( '|' transformationCalls+=Transformation_Call)*
		public Group getGroup() { return cGroup; }
		
		//target=[Column|EString]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[Column|EString]
		public CrossReference getTargetColumnCrossReference_0_0() { return cTargetColumnCrossReference_0_0; }
		
		//EString
		public RuleCall getTargetColumnEStringParserRuleCall_0_0_1() { return cTargetColumnEStringParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//source=[Column|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Column|EString]
		public CrossReference getSourceColumnCrossReference_2_0() { return cSourceColumnCrossReference_2_0; }
		
		//EString
		public RuleCall getSourceColumnEStringParserRuleCall_2_0_1() { return cSourceColumnEStringParserRuleCall_2_0_1; }
		
		//( '|' transformationCalls+=Transformation_Call)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//transformationCalls+=Transformation_Call
		public Assignment getTransformationCallsAssignment_3_1() { return cTransformationCallsAssignment_3_1; }
		
		//Transformation_Call
		public RuleCall getTransformationCallsTransformation_CallParserRuleCall_3_1_0() { return cTransformationCallsTransformation_CallParserRuleCall_3_1_0; }
	}
	public class Transformation_CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Transformation_Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransformationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTransformationTransformationCrossReference_0_0 = (CrossReference)cTransformationAssignment_0.eContents().get(0);
		private final RuleCall cTransformationTransformationEStringParserRuleCall_0_0_1 = (RuleCall)cTransformationTransformationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCallParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCallParametersCall_ParameterParserRuleCall_2_0_0 = (RuleCall)cCallParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCallParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCallParametersCall_ParameterParserRuleCall_2_1_1_0 = (RuleCall)cCallParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Transformation_Call returns TransformationCall:
		//    transformation=[Transformation|EString] '(' (callParameters+=Call_Parameter ( ',' callParameters+=Call_Parameter )* )? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//transformation=[Transformation|EString] '(' (callParameters+=Call_Parameter ( ',' callParameters+=Call_Parameter )* )? ')'
		public Group getGroup() { return cGroup; }
		
		//transformation=[Transformation|EString]
		public Assignment getTransformationAssignment_0() { return cTransformationAssignment_0; }
		
		//[Transformation|EString]
		public CrossReference getTransformationTransformationCrossReference_0_0() { return cTransformationTransformationCrossReference_0_0; }
		
		//EString
		public RuleCall getTransformationTransformationEStringParserRuleCall_0_0_1() { return cTransformationTransformationEStringParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(callParameters+=Call_Parameter ( ',' callParameters+=Call_Parameter )* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//callParameters+=Call_Parameter
		public Assignment getCallParametersAssignment_2_0() { return cCallParametersAssignment_2_0; }
		
		//Call_Parameter
		public RuleCall getCallParametersCall_ParameterParserRuleCall_2_0_0() { return cCallParametersCall_ParameterParserRuleCall_2_0_0; }
		
		//( ',' callParameters+=Call_Parameter )*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//callParameters+=Call_Parameter
		public Assignment getCallParametersAssignment_2_1_1() { return cCallParametersAssignment_2_1_1; }
		
		//Call_Parameter
		public RuleCall getCallParametersCall_ParameterParserRuleCall_2_1_1_0() { return cCallParametersCall_ParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInTypeTypeEnumRuleCall_1_0 = (RuleCall)cInTypeAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutTypeTypeEnumRuleCall_8_0 = (RuleCall)cOutTypeAssignment_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyExpressionParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Transformation returns Transformation:
		//    'transformation' inType=Type '::' name=EString '(' (parameters+=Parameter ( ',' parameters+=Parameter )* )? ')' ':' outType=Type
		//    '{'
		//        body=Expression
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'transformation' inType=Type '::' name=EString '(' (parameters+=Parameter ( ',' parameters+=Parameter )* )? ')' ':' outType=Type
		//'{'
		//    body=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'transformation'
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }
		
		//inType=Type
		public Assignment getInTypeAssignment_1() { return cInTypeAssignment_1; }
		
		//Type
		public RuleCall getInTypeTypeEnumRuleCall_1_0() { return cInTypeTypeEnumRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameters+=Parameter ( ',' parameters+=Parameter )* )?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_0_0() { return cParametersParameterParserRuleCall_5_0_0; }
		
		//( ',' parameters+=Parameter )*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_1_1_0() { return cParametersParameterParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//outType=Type
		public Assignment getOutTypeAssignment_8() { return cOutTypeAssignment_8; }
		
		//Type
		public RuleCall getOutTypeTypeEnumRuleCall_8_0() { return cOutTypeTypeEnumRuleCall_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//body=Expression
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_10_0() { return cBodyExpressionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter returns Parameter: name=EString ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_2_0() { return cTypeTypeEnumRuleCall_2_0; }
	}
	public class Call_ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Call_Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstant_Call_ParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReference_Call_ParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// CallParameters
		//Call_Parameter returns CallParameter: Constant_Call_Parameter | Reference_Call_Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant_Call_Parameter | Reference_Call_Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant_Call_Parameter
		public RuleCall getConstant_Call_ParameterParserRuleCall_0() { return cConstant_Call_ParameterParserRuleCall_0; }
		
		//Reference_Call_Parameter
		public RuleCall getReference_Call_ParameterParserRuleCall_1() { return cReference_Call_ParameterParserRuleCall_1; }
	}
	public class Constant_Call_ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Constant_Call_Parameter");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParameterConstantParserRuleCall_0 = (RuleCall)cParameterAssignment.eContents().get(0);
		
		//Constant_Call_Parameter returns ConstantCallParameter: parameter=Constant;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=Constant
		public Assignment getParameterAssignment() { return cParameterAssignment; }
		
		//Constant
		public RuleCall getParameterConstantParserRuleCall_0() { return cParameterConstantParserRuleCall_0; }
	}
	public class Reference_Call_ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Reference_Call_Parameter");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferenceColumnCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferenceColumnEStringParserRuleCall_0_1 = (RuleCall)cReferenceColumnCrossReference_0.eContents().get(1);
		
		//Reference_Call_Parameter returns ReferenceCallParameter: reference=[Column|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[Column|EString]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }
		
		//[Column|EString]
		public CrossReference getReferenceColumnCrossReference_0() { return cReferenceColumnCrossReference_0; }
		
		//EString
		public RuleCall getReferenceColumnEStringParserRuleCall_0_1() { return cReferenceColumnEStringParserRuleCall_0_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Expression");
		private final RuleCall cAnd_ExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Expressions
		//Expression returns Expression : And_Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//And_Expression
		public RuleCall getAnd_ExpressionParserRuleCall() { return cAnd_ExpressionParserRuleCall; }
	}
	public class And_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.And_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOr_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAnd_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOr_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And_Expression returns Expression: Or_Expression ({And_Expression.left = current} operator=AndOperator right = Or_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Or_Expression ({And_Expression.left = current} operator=AndOperator right = Or_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Or_Expression
		public RuleCall getOr_ExpressionParserRuleCall_0() { return cOr_ExpressionParserRuleCall_0; }
		
		//({And_Expression.left = current} operator=AndOperator right = Or_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And_Expression.left = current}
		public Action getAnd_ExpressionLeftAction_1_0() { return cAnd_ExpressionLeftAction_1_0; }
		
		//operator=AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AndOperator
		public RuleCall getOperatorAndOperatorEnumRuleCall_1_1_0() { return cOperatorAndOperatorEnumRuleCall_1_1_0; }
		
		//right = Or_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or_Expression
		public RuleCall getRightOr_ExpressionParserRuleCall_1_2_0() { return cRightOr_ExpressionParserRuleCall_1_2_0; }
	}
	public class Or_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Or_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquals_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOr_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEquals_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or_Expression returns Expression: Equals_Expression ({Or_Expression.left = current} operator=OrOperator right = Equals_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equals_Expression ({Or_Expression.left = current} operator=OrOperator right = Equals_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Equals_Expression
		public RuleCall getEquals_ExpressionParserRuleCall_0() { return cEquals_ExpressionParserRuleCall_0; }
		
		//({Or_Expression.left = current} operator=OrOperator right = Equals_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or_Expression.left = current}
		public Action getOr_ExpressionLeftAction_1_0() { return cOr_ExpressionLeftAction_1_0; }
		
		//operator=OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OrOperator
		public RuleCall getOperatorOrOperatorEnumRuleCall_1_1_0() { return cOperatorOrOperatorEnumRuleCall_1_1_0; }
		
		//right = Equals_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equals_Expression
		public RuleCall getRightEquals_ExpressionParserRuleCall_1_2_0() { return cRightEquals_ExpressionParserRuleCall_1_2_0; }
	}
	public class Equals_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Equals_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotEquals_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEquals_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualsOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotEquals_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equals_Expression returns Expression: NotEquals_Expression ({Equals_Expression.left = current} operator=EqualsOperator right = NotEquals_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotEquals_Expression ({Equals_Expression.left = current} operator=EqualsOperator right = NotEquals_Expression)*
		public Group getGroup() { return cGroup; }
		
		//NotEquals_Expression
		public RuleCall getNotEquals_ExpressionParserRuleCall_0() { return cNotEquals_ExpressionParserRuleCall_0; }
		
		//({Equals_Expression.left = current} operator=EqualsOperator right = NotEquals_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equals_Expression.left = current}
		public Action getEquals_ExpressionLeftAction_1_0() { return cEquals_ExpressionLeftAction_1_0; }
		
		//operator=EqualsOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualsOperator
		public RuleCall getOperatorEqualsOperatorEnumRuleCall_1_1_0() { return cOperatorEqualsOperatorEnumRuleCall_1_1_0; }
		
		//right = NotEquals_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NotEquals_Expression
		public RuleCall getRightNotEquals_ExpressionParserRuleCall_1_2_0() { return cRightNotEquals_ExpressionParserRuleCall_1_2_0; }
	}
	public class NotEquals_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.NotEquals_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLess_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNotEquals_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorNotEqualsOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLess_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//NotEquals_Expression returns Expression: Less_Expression ({NotEquals_Expression.left = current} operator=NotEqualsOperator right = Less_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Less_Expression ({NotEquals_Expression.left = current} operator=NotEqualsOperator right = Less_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Less_Expression
		public RuleCall getLess_ExpressionParserRuleCall_0() { return cLess_ExpressionParserRuleCall_0; }
		
		//({NotEquals_Expression.left = current} operator=NotEqualsOperator right = Less_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{NotEquals_Expression.left = current}
		public Action getNotEquals_ExpressionLeftAction_1_0() { return cNotEquals_ExpressionLeftAction_1_0; }
		
		//operator=NotEqualsOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NotEqualsOperator
		public RuleCall getOperatorNotEqualsOperatorEnumRuleCall_1_1_0() { return cOperatorNotEqualsOperatorEnumRuleCall_1_1_0; }
		
		//right = Less_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Less_Expression
		public RuleCall getRightLess_ExpressionParserRuleCall_1_2_0() { return cRightLess_ExpressionParserRuleCall_1_2_0; }
	}
	public class Less_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Less_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGreater_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLess_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLessOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightGreater_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Less_Expression returns Expression: Greater_Expression ({Less_Expression.left = current} operator=LessOperator right = Greater_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Greater_Expression ({Less_Expression.left = current} operator=LessOperator right = Greater_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Greater_Expression
		public RuleCall getGreater_ExpressionParserRuleCall_0() { return cGreater_ExpressionParserRuleCall_0; }
		
		//({Less_Expression.left = current} operator=LessOperator right = Greater_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Less_Expression.left = current}
		public Action getLess_ExpressionLeftAction_1_0() { return cLess_ExpressionLeftAction_1_0; }
		
		//operator=LessOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LessOperator
		public RuleCall getOperatorLessOperatorEnumRuleCall_1_1_0() { return cOperatorLessOperatorEnumRuleCall_1_1_0; }
		
		//right = Greater_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Greater_Expression
		public RuleCall getRightGreater_ExpressionParserRuleCall_1_2_0() { return cRightGreater_ExpressionParserRuleCall_1_2_0; }
	}
	public class Greater_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Greater_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiply_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGreater_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGreaterOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiply_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Greater_Expression returns Expression: Multiply_Expression ({Greater_Expression.left = current} operator=GreaterOperator right = Multiply_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiply_Expression ({Greater_Expression.left = current} operator=GreaterOperator right = Multiply_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Multiply_Expression
		public RuleCall getMultiply_ExpressionParserRuleCall_0() { return cMultiply_ExpressionParserRuleCall_0; }
		
		//({Greater_Expression.left = current} operator=GreaterOperator right = Multiply_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Greater_Expression.left = current}
		public Action getGreater_ExpressionLeftAction_1_0() { return cGreater_ExpressionLeftAction_1_0; }
		
		//operator=GreaterOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//GreaterOperator
		public RuleCall getOperatorGreaterOperatorEnumRuleCall_1_1_0() { return cOperatorGreaterOperatorEnumRuleCall_1_1_0; }
		
		//right = Multiply_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiply_Expression
		public RuleCall getRightMultiply_ExpressionParserRuleCall_1_2_0() { return cRightMultiply_ExpressionParserRuleCall_1_2_0; }
	}
	public class Multiply_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Multiply_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivide_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiply_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplyOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivide_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiply_Expression returns Expression: Divide_Expression ({Multiply_Expression.left = current} operator=MultiplyOperator right = Divide_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Divide_Expression ({Multiply_Expression.left = current} operator=MultiplyOperator right = Divide_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Divide_Expression
		public RuleCall getDivide_ExpressionParserRuleCall_0() { return cDivide_ExpressionParserRuleCall_0; }
		
		//({Multiply_Expression.left = current} operator=MultiplyOperator right = Divide_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiply_Expression.left = current}
		public Action getMultiply_ExpressionLeftAction_1_0() { return cMultiply_ExpressionLeftAction_1_0; }
		
		//operator=MultiplyOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplyOperator
		public RuleCall getOperatorMultiplyOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplyOperatorEnumRuleCall_1_1_0; }
		
		//right = Divide_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Divide_Expression
		public RuleCall getRightDivide_ExpressionParserRuleCall_1_2_0() { return cRightDivide_ExpressionParserRuleCall_1_2_0; }
	}
	public class Divide_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Divide_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdd_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivide_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorDivideOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdd_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Divide_Expression returns Expression: Add_Expression ({Divide_Expression.left = current} operator=DivideOperator right = Add_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Add_Expression ({Divide_Expression.left = current} operator=DivideOperator right = Add_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Add_Expression
		public RuleCall getAdd_ExpressionParserRuleCall_0() { return cAdd_ExpressionParserRuleCall_0; }
		
		//({Divide_Expression.left = current} operator=DivideOperator right = Add_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Divide_Expression.left = current}
		public Action getDivide_ExpressionLeftAction_1_0() { return cDivide_ExpressionLeftAction_1_0; }
		
		//operator=DivideOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//DivideOperator
		public RuleCall getOperatorDivideOperatorEnumRuleCall_1_1_0() { return cOperatorDivideOperatorEnumRuleCall_1_1_0; }
		
		//right = Add_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Add_Expression
		public RuleCall getRightAdd_ExpressionParserRuleCall_1_2_0() { return cRightAdd_ExpressionParserRuleCall_1_2_0; }
	}
	public class Add_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Add_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtract_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdd_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAddOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSubtract_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Add_Expression returns Expression: Subtract_Expression ({Add_Expression.left = current} operator=AddOperator right = Subtract_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Subtract_Expression ({Add_Expression.left = current} operator=AddOperator right = Subtract_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Subtract_Expression
		public RuleCall getSubtract_ExpressionParserRuleCall_0() { return cSubtract_ExpressionParserRuleCall_0; }
		
		//({Add_Expression.left = current} operator=AddOperator right = Subtract_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Add_Expression.left = current}
		public Action getAdd_ExpressionLeftAction_1_0() { return cAdd_ExpressionLeftAction_1_0; }
		
		//operator=AddOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AddOperator
		public RuleCall getOperatorAddOperatorEnumRuleCall_1_1_0() { return cOperatorAddOperatorEnumRuleCall_1_1_0; }
		
		//right = Subtract_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Subtract_Expression
		public RuleCall getRightSubtract_ExpressionParserRuleCall_1_2_0() { return cRightSubtract_ExpressionParserRuleCall_1_2_0; }
	}
	public class Subtract_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Subtract_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteral_ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubtract_ExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorSubtractOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLiteral_ExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Subtract_Expression returns Expression: Literal_Expression ({Subtract_Expression.left = current} operator=SubtractOperator right = Literal_Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal_Expression ({Subtract_Expression.left = current} operator=SubtractOperator right = Literal_Expression)*
		public Group getGroup() { return cGroup; }
		
		//Literal_Expression
		public RuleCall getLiteral_ExpressionParserRuleCall_0() { return cLiteral_ExpressionParserRuleCall_0; }
		
		//({Subtract_Expression.left = current} operator=SubtractOperator right = Literal_Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Subtract_Expression.left = current}
		public Action getSubtract_ExpressionLeftAction_1_0() { return cSubtract_ExpressionLeftAction_1_0; }
		
		//operator=SubtractOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//SubtractOperator
		public RuleCall getOperatorSubtractOperatorEnumRuleCall_1_1_0() { return cOperatorSubtractOperatorEnumRuleCall_1_1_0; }
		
		//right = Literal_Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Literal_Expression
		public RuleCall getRightLiteral_ExpressionParserRuleCall_1_2_0() { return cRightLiteral_ExpressionParserRuleCall_1_2_0; }
	}
	public class Literal_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Literal_Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameter_ExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelf_ExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal_Expression returns Expression: Constant | Parameter_Expression | Self_Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | Parameter_Expression | Self_Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//Parameter_Expression
		public RuleCall getParameter_ExpressionParserRuleCall_1() { return cParameter_ExpressionParserRuleCall_1; }
		
		//Self_Expression
		public RuleCall getSelf_ExpressionParserRuleCall_2() { return cSelf_ExpressionParserRuleCall_2; }
	}
	public class Column_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Column_Expression");
		private final Assignment cColumnAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cColumnColumnCrossReference_0 = (CrossReference)cColumnAssignment.eContents().get(0);
		private final RuleCall cColumnColumnEStringParserRuleCall_0_1 = (RuleCall)cColumnColumnCrossReference_0.eContents().get(1);
		
		// //| Column_Expression TODO for when statement
		//Column_Expression returns ColumnExpression: column=[Column|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//column=[Column|EString]
		public Assignment getColumnAssignment() { return cColumnAssignment; }
		
		//[Column|EString]
		public CrossReference getColumnColumnCrossReference_0() { return cColumnColumnCrossReference_0; }
		
		//EString
		public RuleCall getColumnColumnEStringParserRuleCall_0_1() { return cColumnColumnEStringParserRuleCall_0_1; }
	}
	public class Parameter_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Parameter_Expression");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//Parameter_Expression returns ParameterExpression: parameter=[Parameter|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment() { return cParameterAssignment; }
		
		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }
		
		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_0_1() { return cParameterParameterEStringParserRuleCall_0_1; }
	}
	public class Self_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Self_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Self_Expression returns SelfExpression: {SelfExpression} 'self';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelfExpression} 'self'
		public Group getGroup() { return cGroup; }
		
		//{SelfExpression}
		public Action getSelfExpressionAction_0() { return cSelfExpressionAction_0; }
		
		//'self'
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingle_ConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSet_ConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Constants
		//Constant returns Constant: Single_Constant | Set_Constant;
		@Override public ParserRule getRule() { return rule; }
		
		//Single_Constant | Set_Constant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Single_Constant
		public RuleCall getSingle_ConstantParserRuleCall_0() { return cSingle_ConstantParserRuleCall_0; }
		
		//Set_Constant
		public RuleCall getSet_ConstantParserRuleCall_1() { return cSet_ConstantParserRuleCall_1; }
	}
	public class Single_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Single_Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolean_ConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloat_ConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInteger_ConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cString_ConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNull_ConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Single_Constant returns Constant: Boolean_Constant | Float_Constant | Integer_Constant | String_Constant | Null_Constant;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean_Constant | Float_Constant | Integer_Constant | String_Constant | Null_Constant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Boolean_Constant
		public RuleCall getBoolean_ConstantParserRuleCall_0() { return cBoolean_ConstantParserRuleCall_0; }
		
		//Float_Constant
		public RuleCall getFloat_ConstantParserRuleCall_1() { return cFloat_ConstantParserRuleCall_1; }
		
		//Integer_Constant
		public RuleCall getInteger_ConstantParserRuleCall_2() { return cInteger_ConstantParserRuleCall_2; }
		
		//String_Constant
		public RuleCall getString_ConstantParserRuleCall_3() { return cString_ConstantParserRuleCall_3; }
		
		//Null_Constant
		public RuleCall getNull_ConstantParserRuleCall_4() { return cNull_ConstantParserRuleCall_4; }
	}
	public class Boolean_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Boolean_Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Boolean_Constant returns BooleanConstant: value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class Float_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Float_Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEFloatParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Float_Constant returns FloatConstant: value=EFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EFloat
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_0() { return cValueEFloatParserRuleCall_0; }
	}
	public class Integer_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Integer_Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Integer_Constant returns IntegerConstant: value=EInt ;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class String_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.String_Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//String_Constant returns StringConstant: '"' value=EString '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' value=EString '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//value=EString
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class Null_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Null_Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Null_Constant returns NullConstant: {NullConstant} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullConstant} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullConstant}
		public Action getNullConstantAction_0() { return cNullConstantAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class Set_ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Set_Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesSingle_ConstantParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesSingle_ConstantParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Set_Constant returns SetConstant: {SetConstant} '[' (values+=Single_Constant ( ',' values+=Single_Constant )*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetConstant} '[' (values+=Single_Constant ( ',' values+=Single_Constant )*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{SetConstant}
		public Action getSetConstantAction_0() { return cSetConstantAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=Single_Constant ( ',' values+=Single_Constant )*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=Single_Constant
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//Single_Constant
		public RuleCall getValuesSingle_ConstantParserRuleCall_2_0_0() { return cValuesSingle_ConstantParserRuleCall_2_0_0; }
		
		//( ',' values+=Single_Constant )*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=Single_Constant
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//Single_Constant
		public RuleCall getValuesSingle_ConstantParserRuleCall_2_1_1_0() { return cValuesSingle_ConstantParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatFloatKeyword_2_0 = (Keyword)cFloatEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNullNullKeyword_4_0 = (Keyword)cNullEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBooleanBoolKeyword_5_0 = (Keyword)cBooleanEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Type returns Type:
		//    string = 'string' | integer = 'int' | float = 'float' | date = 'date' | null = 'null' | boolean = 'bool';
		public EnumRule getRule() { return rule; }
		
		//string = 'string' | integer = 'int' | float = 'float' | date = 'date' | null = 'null' | boolean = 'bool'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string = 'string'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//integer = 'int'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getIntegerIntKeyword_1_0() { return cIntegerIntKeyword_1_0; }
		
		//float = 'float'
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_2() { return cFloatEnumLiteralDeclaration_2; }
		
		//'float'
		public Keyword getFloatFloatKeyword_2_0() { return cFloatFloatKeyword_2_0; }
		
		//date = 'date'
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//'date'
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
		
		//null = 'null'
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_4() { return cNullEnumLiteralDeclaration_4; }
		
		//'null'
		public Keyword getNullNullKeyword_4_0() { return cNullNullKeyword_4_0; }
		
		//boolean = 'bool'
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_5() { return cBooleanEnumLiteralDeclaration_5; }
		
		//'bool'
		public Keyword getBooleanBoolKeyword_5_0() { return cBooleanBoolKeyword_5_0; }
	}
	public class AndOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.AndOperator");
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAndAmpersandAmpersandKeyword_0 = (Keyword)cAndEnumLiteralDeclaration.eContents().get(0);
		
		//// We need split the enum for the expression to work
		//enum AndOperator returns Operator: and = '&&';
		public EnumRule getRule() { return rule; }
		
		//and = '&&'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration() { return cAndEnumLiteralDeclaration; }
		
		//'&&'
		public Keyword getAndAmpersandAmpersandKeyword_0() { return cAndAmpersandAmpersandKeyword_0; }
	}
	public class OrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.OrOperator");
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOrVerticalLineVerticalLineKeyword_0 = (Keyword)cOrEnumLiteralDeclaration.eContents().get(0);
		
		//enum OrOperator returns Operator: or = '||';
		public EnumRule getRule() { return rule; }
		
		//or = '||'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration() { return cOrEnumLiteralDeclaration; }
		
		//'||'
		public Keyword getOrVerticalLineVerticalLineKeyword_0() { return cOrVerticalLineVerticalLineKeyword_0; }
	}
	public class EqualsOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EqualsOperator");
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_0 = (Keyword)cEqualsEnumLiteralDeclaration.eContents().get(0);
		
		//enum EqualsOperator returns Operator: equals = '==';
		public EnumRule getRule() { return rule; }
		
		//equals = '=='
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration() { return cEqualsEnumLiteralDeclaration; }
		
		//'=='
		public Keyword getEqualsEqualsSignEqualsSignKeyword_0() { return cEqualsEqualsSignEqualsSignKeyword_0; }
	}
	public class NotEqualsOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.NotEqualsOperator");
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_0 = (Keyword)cNotEqualsEnumLiteralDeclaration.eContents().get(0);
		
		//enum NotEqualsOperator returns Operator: notEquals = '!=';
		public EnumRule getRule() { return rule; }
		
		//notEquals = '!='
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration() { return cNotEqualsEnumLiteralDeclaration; }
		
		//'!='
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_0; }
	}
	public class LessOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.LessOperator");
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLessLessThanSignKeyword_0 = (Keyword)cLessEnumLiteralDeclaration.eContents().get(0);
		
		//enum LessOperator returns Operator: less = '<';
		public EnumRule getRule() { return rule; }
		
		//less = '<'
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration() { return cLessEnumLiteralDeclaration; }
		
		//'<'
		public Keyword getLessLessThanSignKeyword_0() { return cLessLessThanSignKeyword_0; }
	}
	public class GreaterOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.GreaterOperator");
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cGreaterGreaterThanSignKeyword_0 = (Keyword)cGreaterEnumLiteralDeclaration.eContents().get(0);
		
		//enum GreaterOperator returns Operator: greater = '>';
		public EnumRule getRule() { return rule; }
		
		//greater = '>'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration() { return cGreaterEnumLiteralDeclaration; }
		
		//'>'
		public Keyword getGreaterGreaterThanSignKeyword_0() { return cGreaterGreaterThanSignKeyword_0; }
	}
	public class MultiplyOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.MultiplyOperator");
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMultiplyAsteriskKeyword_0 = (Keyword)cMultiplyEnumLiteralDeclaration.eContents().get(0);
		
		//enum MultiplyOperator returns Operator: multiply = '*';
		public EnumRule getRule() { return rule; }
		
		//multiply = '*'
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration() { return cMultiplyEnumLiteralDeclaration; }
		
		//'*'
		public Keyword getMultiplyAsteriskKeyword_0() { return cMultiplyAsteriskKeyword_0; }
	}
	public class DivideOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.DivideOperator");
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDivideSolidusKeyword_0 = (Keyword)cDivideEnumLiteralDeclaration.eContents().get(0);
		
		//enum DivideOperator returns Operator: divide = '/';
		public EnumRule getRule() { return rule; }
		
		//divide = '/'
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration() { return cDivideEnumLiteralDeclaration; }
		
		//'/'
		public Keyword getDivideSolidusKeyword_0() { return cDivideSolidusKeyword_0; }
	}
	public class AddOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.AddOperator");
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAddPlusSignKeyword_0 = (Keyword)cAddEnumLiteralDeclaration.eContents().get(0);
		
		//enum AddOperator returns Operator: add = '+';
		public EnumRule getRule() { return rule; }
		
		//add = '+'
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration() { return cAddEnumLiteralDeclaration; }
		
		//'+'
		public Keyword getAddPlusSignKeyword_0() { return cAddPlusSignKeyword_0; }
	}
	public class SubtractOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.SubtractOperator");
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_0 = (Keyword)cSubtractEnumLiteralDeclaration.eContents().get(0);
		
		//enum SubtractOperator returns Operator: subtract = '-';
		public EnumRule getRule() { return rule; }
		
		//subtract = '-'
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration() { return cSubtractEnumLiteralDeclaration; }
		
		//'-'
		public Keyword getSubtractHyphenMinusKeyword_0() { return cSubtractHyphenMinusKeyword_0; }
	}
	
	private final TQLElements pTQL;
	private final BlockElements pBlock;
	private final Table_ImplElements pTable_Impl;
	private final ColumnElements pColumn;
	private final Source_TableElements pSource_Table;
	private final Target_TableElements pTarget_Table;
	private final MappingElements pMapping;
	private final Mapped_ColumnElements pMapped_Column;
	private final Transformation_CallElements pTransformation_Call;
	private final TransformationElements pTransformation;
	private final ParameterElements pParameter;
	private final Call_ParameterElements pCall_Parameter;
	private final Constant_Call_ParameterElements pConstant_Call_Parameter;
	private final Reference_Call_ParameterElements pReference_Call_Parameter;
	private final ExpressionElements pExpression;
	private final And_ExpressionElements pAnd_Expression;
	private final Or_ExpressionElements pOr_Expression;
	private final Equals_ExpressionElements pEquals_Expression;
	private final NotEquals_ExpressionElements pNotEquals_Expression;
	private final Less_ExpressionElements pLess_Expression;
	private final Greater_ExpressionElements pGreater_Expression;
	private final Multiply_ExpressionElements pMultiply_Expression;
	private final Divide_ExpressionElements pDivide_Expression;
	private final Add_ExpressionElements pAdd_Expression;
	private final Subtract_ExpressionElements pSubtract_Expression;
	private final Literal_ExpressionElements pLiteral_Expression;
	private final Column_ExpressionElements pColumn_Expression;
	private final Parameter_ExpressionElements pParameter_Expression;
	private final Self_ExpressionElements pSelf_Expression;
	private final ConstantElements pConstant;
	private final Single_ConstantElements pSingle_Constant;
	private final Boolean_ConstantElements pBoolean_Constant;
	private final Float_ConstantElements pFloat_Constant;
	private final Integer_ConstantElements pInteger_Constant;
	private final String_ConstantElements pString_Constant;
	private final Null_ConstantElements pNull_Constant;
	private final Set_ConstantElements pSet_Constant;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final TypeElements eType;
	private final AndOperatorElements eAndOperator;
	private final OrOperatorElements eOrOperator;
	private final EqualsOperatorElements eEqualsOperator;
	private final NotEqualsOperatorElements eNotEqualsOperator;
	private final LessOperatorElements eLessOperator;
	private final GreaterOperatorElements eGreaterOperator;
	private final MultiplyOperatorElements eMultiplyOperator;
	private final DivideOperatorElements eDivideOperator;
	private final AddOperatorElements eAddOperator;
	private final SubtractOperatorElements eSubtractOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTQL = new TQLElements();
		this.pBlock = new BlockElements();
		this.pTable_Impl = new Table_ImplElements();
		this.pColumn = new ColumnElements();
		this.pSource_Table = new Source_TableElements();
		this.pTarget_Table = new Target_TableElements();
		this.pMapping = new MappingElements();
		this.pMapped_Column = new Mapped_ColumnElements();
		this.pTransformation_Call = new Transformation_CallElements();
		this.pTransformation = new TransformationElements();
		this.pParameter = new ParameterElements();
		this.pCall_Parameter = new Call_ParameterElements();
		this.pConstant_Call_Parameter = new Constant_Call_ParameterElements();
		this.pReference_Call_Parameter = new Reference_Call_ParameterElements();
		this.pExpression = new ExpressionElements();
		this.pAnd_Expression = new And_ExpressionElements();
		this.pOr_Expression = new Or_ExpressionElements();
		this.pEquals_Expression = new Equals_ExpressionElements();
		this.pNotEquals_Expression = new NotEquals_ExpressionElements();
		this.pLess_Expression = new Less_ExpressionElements();
		this.pGreater_Expression = new Greater_ExpressionElements();
		this.pMultiply_Expression = new Multiply_ExpressionElements();
		this.pDivide_Expression = new Divide_ExpressionElements();
		this.pAdd_Expression = new Add_ExpressionElements();
		this.pSubtract_Expression = new Subtract_ExpressionElements();
		this.pLiteral_Expression = new Literal_ExpressionElements();
		this.pColumn_Expression = new Column_ExpressionElements();
		this.pParameter_Expression = new Parameter_ExpressionElements();
		this.pSelf_Expression = new Self_ExpressionElements();
		this.pConstant = new ConstantElements();
		this.pSingle_Constant = new Single_ConstantElements();
		this.pBoolean_Constant = new Boolean_ConstantElements();
		this.pFloat_Constant = new Float_ConstantElements();
		this.pInteger_Constant = new Integer_ConstantElements();
		this.pString_Constant = new String_ConstantElements();
		this.pNull_Constant = new Null_ConstantElements();
		this.pSet_Constant = new Set_ConstantElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.eType = new TypeElements();
		this.eAndOperator = new AndOperatorElements();
		this.eOrOperator = new OrOperatorElements();
		this.eEqualsOperator = new EqualsOperatorElements();
		this.eNotEqualsOperator = new NotEqualsOperatorElements();
		this.eLessOperator = new LessOperatorElements();
		this.eGreaterOperator = new GreaterOperatorElements();
		this.eMultiplyOperator = new MultiplyOperatorElements();
		this.eDivideOperator = new DivideOperatorElements();
		this.eAddOperator = new AddOperatorElements();
		this.eSubtractOperator = new SubtractOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tue.gtl.TQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TQL:
	//    (blocks += Block)*
	//;
	public TQLElements getTQLAccess() {
		return pTQL;
	}
	
	public ParserRule getTQLRule() {
		return getTQLAccess().getRule();
	}
	
	//Block:
	//    Table_Impl | Mapping | Transformation
	//;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Table_Impl returns Table:
	//    ('source' Source_Table) |
	//    ('target' Target_Table)
	//    ;
	public Table_ImplElements getTable_ImplAccess() {
		return pTable_Impl;
	}
	
	public ParserRule getTable_ImplRule() {
		return getTable_ImplAccess().getRule();
	}
	
	//Column returns Column: name=EString ':' type=Type;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Source_Table returns SourceTable:
	//    name=EString
	//    '{'
	//         columns+=Column ( "," columns+=Column)*
	//    '}';
	public Source_TableElements getSource_TableAccess() {
		return pSource_Table;
	}
	
	public ParserRule getSource_TableRule() {
		return getSource_TableAccess().getRule();
	}
	
	//Target_Table returns TargetTable:
	//    name=EString
	//    '{'
	//        columns+=Column ( "," columns+=Column)*
	//    '}';
	public Target_TableElements getTarget_TableAccess() {
		return pTarget_Table;
	}
	
	public ParserRule getTarget_TableRule() {
		return getTarget_TableAccess().getRule();
	}
	
	//Mapping returns Mapping:
	//    'mapping' source=[SourceTable|EString] '->' target=[TargetTable|EString]
	//    '{'
	//        mappedColumns+=Mapped_Column ( ',' mappedColumns+=Mapped_Column)*
	//    '}'
	//;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Mapped_Column returns MappedColumn:
	//    target=[Column|EString] ':' source=[Column|EString] ( '|' transformationCalls+=Transformation_Call)*
	//;
	public Mapped_ColumnElements getMapped_ColumnAccess() {
		return pMapped_Column;
	}
	
	public ParserRule getMapped_ColumnRule() {
		return getMapped_ColumnAccess().getRule();
	}
	
	//Transformation_Call returns TransformationCall:
	//    transformation=[Transformation|EString] '(' (callParameters+=Call_Parameter ( ',' callParameters+=Call_Parameter )* )? ')'
	//;
	public Transformation_CallElements getTransformation_CallAccess() {
		return pTransformation_Call;
	}
	
	public ParserRule getTransformation_CallRule() {
		return getTransformation_CallAccess().getRule();
	}
	
	//Transformation returns Transformation:
	//    'transformation' inType=Type '::' name=EString '(' (parameters+=Parameter ( ',' parameters+=Parameter )* )? ')' ':' outType=Type
	//    '{'
	//        body=Expression
	//    '}'
	//    ;
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//Parameter returns Parameter: name=EString ':' type=Type;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// CallParameters
	//Call_Parameter returns CallParameter: Constant_Call_Parameter | Reference_Call_Parameter;
	public Call_ParameterElements getCall_ParameterAccess() {
		return pCall_Parameter;
	}
	
	public ParserRule getCall_ParameterRule() {
		return getCall_ParameterAccess().getRule();
	}
	
	//Constant_Call_Parameter returns ConstantCallParameter: parameter=Constant;
	public Constant_Call_ParameterElements getConstant_Call_ParameterAccess() {
		return pConstant_Call_Parameter;
	}
	
	public ParserRule getConstant_Call_ParameterRule() {
		return getConstant_Call_ParameterAccess().getRule();
	}
	
	//Reference_Call_Parameter returns ReferenceCallParameter: reference=[Column|EString];
	public Reference_Call_ParameterElements getReference_Call_ParameterAccess() {
		return pReference_Call_Parameter;
	}
	
	public ParserRule getReference_Call_ParameterRule() {
		return getReference_Call_ParameterAccess().getRule();
	}
	
	//// Expressions
	//Expression returns Expression : And_Expression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//And_Expression returns Expression: Or_Expression ({And_Expression.left = current} operator=AndOperator right = Or_Expression)*;
	public And_ExpressionElements getAnd_ExpressionAccess() {
		return pAnd_Expression;
	}
	
	public ParserRule getAnd_ExpressionRule() {
		return getAnd_ExpressionAccess().getRule();
	}
	
	//Or_Expression returns Expression: Equals_Expression ({Or_Expression.left = current} operator=OrOperator right = Equals_Expression)*;
	public Or_ExpressionElements getOr_ExpressionAccess() {
		return pOr_Expression;
	}
	
	public ParserRule getOr_ExpressionRule() {
		return getOr_ExpressionAccess().getRule();
	}
	
	//Equals_Expression returns Expression: NotEquals_Expression ({Equals_Expression.left = current} operator=EqualsOperator right = NotEquals_Expression)*;
	public Equals_ExpressionElements getEquals_ExpressionAccess() {
		return pEquals_Expression;
	}
	
	public ParserRule getEquals_ExpressionRule() {
		return getEquals_ExpressionAccess().getRule();
	}
	
	//NotEquals_Expression returns Expression: Less_Expression ({NotEquals_Expression.left = current} operator=NotEqualsOperator right = Less_Expression)*;
	public NotEquals_ExpressionElements getNotEquals_ExpressionAccess() {
		return pNotEquals_Expression;
	}
	
	public ParserRule getNotEquals_ExpressionRule() {
		return getNotEquals_ExpressionAccess().getRule();
	}
	
	//Less_Expression returns Expression: Greater_Expression ({Less_Expression.left = current} operator=LessOperator right = Greater_Expression)*;
	public Less_ExpressionElements getLess_ExpressionAccess() {
		return pLess_Expression;
	}
	
	public ParserRule getLess_ExpressionRule() {
		return getLess_ExpressionAccess().getRule();
	}
	
	//Greater_Expression returns Expression: Multiply_Expression ({Greater_Expression.left = current} operator=GreaterOperator right = Multiply_Expression)*;
	public Greater_ExpressionElements getGreater_ExpressionAccess() {
		return pGreater_Expression;
	}
	
	public ParserRule getGreater_ExpressionRule() {
		return getGreater_ExpressionAccess().getRule();
	}
	
	//Multiply_Expression returns Expression: Divide_Expression ({Multiply_Expression.left = current} operator=MultiplyOperator right = Divide_Expression)*;
	public Multiply_ExpressionElements getMultiply_ExpressionAccess() {
		return pMultiply_Expression;
	}
	
	public ParserRule getMultiply_ExpressionRule() {
		return getMultiply_ExpressionAccess().getRule();
	}
	
	//Divide_Expression returns Expression: Add_Expression ({Divide_Expression.left = current} operator=DivideOperator right = Add_Expression)*;
	public Divide_ExpressionElements getDivide_ExpressionAccess() {
		return pDivide_Expression;
	}
	
	public ParserRule getDivide_ExpressionRule() {
		return getDivide_ExpressionAccess().getRule();
	}
	
	//Add_Expression returns Expression: Subtract_Expression ({Add_Expression.left = current} operator=AddOperator right = Subtract_Expression)*;
	public Add_ExpressionElements getAdd_ExpressionAccess() {
		return pAdd_Expression;
	}
	
	public ParserRule getAdd_ExpressionRule() {
		return getAdd_ExpressionAccess().getRule();
	}
	
	//Subtract_Expression returns Expression: Literal_Expression ({Subtract_Expression.left = current} operator=SubtractOperator right = Literal_Expression)*;
	public Subtract_ExpressionElements getSubtract_ExpressionAccess() {
		return pSubtract_Expression;
	}
	
	public ParserRule getSubtract_ExpressionRule() {
		return getSubtract_ExpressionAccess().getRule();
	}
	
	//Literal_Expression returns Expression: Constant | Parameter_Expression | Self_Expression;
	public Literal_ExpressionElements getLiteral_ExpressionAccess() {
		return pLiteral_Expression;
	}
	
	public ParserRule getLiteral_ExpressionRule() {
		return getLiteral_ExpressionAccess().getRule();
	}
	
	// //| Column_Expression TODO for when statement
	//Column_Expression returns ColumnExpression: column=[Column|EString];
	public Column_ExpressionElements getColumn_ExpressionAccess() {
		return pColumn_Expression;
	}
	
	public ParserRule getColumn_ExpressionRule() {
		return getColumn_ExpressionAccess().getRule();
	}
	
	//Parameter_Expression returns ParameterExpression: parameter=[Parameter|EString];
	public Parameter_ExpressionElements getParameter_ExpressionAccess() {
		return pParameter_Expression;
	}
	
	public ParserRule getParameter_ExpressionRule() {
		return getParameter_ExpressionAccess().getRule();
	}
	
	//Self_Expression returns SelfExpression: {SelfExpression} 'self';
	public Self_ExpressionElements getSelf_ExpressionAccess() {
		return pSelf_Expression;
	}
	
	public ParserRule getSelf_ExpressionRule() {
		return getSelf_ExpressionAccess().getRule();
	}
	
	//// Constants
	//Constant returns Constant: Single_Constant | Set_Constant;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Single_Constant returns Constant: Boolean_Constant | Float_Constant | Integer_Constant | String_Constant | Null_Constant;
	public Single_ConstantElements getSingle_ConstantAccess() {
		return pSingle_Constant;
	}
	
	public ParserRule getSingle_ConstantRule() {
		return getSingle_ConstantAccess().getRule();
	}
	
	//Boolean_Constant returns BooleanConstant: value=EBoolean;
	public Boolean_ConstantElements getBoolean_ConstantAccess() {
		return pBoolean_Constant;
	}
	
	public ParserRule getBoolean_ConstantRule() {
		return getBoolean_ConstantAccess().getRule();
	}
	
	//Float_Constant returns FloatConstant: value=EFloat;
	public Float_ConstantElements getFloat_ConstantAccess() {
		return pFloat_Constant;
	}
	
	public ParserRule getFloat_ConstantRule() {
		return getFloat_ConstantAccess().getRule();
	}
	
	//Integer_Constant returns IntegerConstant: value=EInt ;
	public Integer_ConstantElements getInteger_ConstantAccess() {
		return pInteger_Constant;
	}
	
	public ParserRule getInteger_ConstantRule() {
		return getInteger_ConstantAccess().getRule();
	}
	
	//String_Constant returns StringConstant: '"' value=EString '"';
	public String_ConstantElements getString_ConstantAccess() {
		return pString_Constant;
	}
	
	public ParserRule getString_ConstantRule() {
		return getString_ConstantAccess().getRule();
	}
	
	//Null_Constant returns NullConstant: {NullConstant} 'null';
	public Null_ConstantElements getNull_ConstantAccess() {
		return pNull_Constant;
	}
	
	public ParserRule getNull_ConstantRule() {
		return getNull_ConstantAccess().getRule();
	}
	
	//Set_Constant returns SetConstant: {SetConstant} '[' (values+=Single_Constant ( ',' values+=Single_Constant )*)? ']';
	public Set_ConstantElements getSet_ConstantAccess() {
		return pSet_Constant;
	}
	
	public ParserRule getSet_ConstantRule() {
		return getSet_ConstantAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//enum Type returns Type:
	//    string = 'string' | integer = 'int' | float = 'float' | date = 'date' | null = 'null' | boolean = 'bool';
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//// We need split the enum for the expression to work
	//enum AndOperator returns Operator: and = '&&';
	public AndOperatorElements getAndOperatorAccess() {
		return eAndOperator;
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//enum OrOperator returns Operator: or = '||';
	public OrOperatorElements getOrOperatorAccess() {
		return eOrOperator;
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//enum EqualsOperator returns Operator: equals = '==';
	public EqualsOperatorElements getEqualsOperatorAccess() {
		return eEqualsOperator;
	}
	
	public EnumRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}
	
	//enum NotEqualsOperator returns Operator: notEquals = '!=';
	public NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return eNotEqualsOperator;
	}
	
	public EnumRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}
	
	//enum LessOperator returns Operator: less = '<';
	public LessOperatorElements getLessOperatorAccess() {
		return eLessOperator;
	}
	
	public EnumRule getLessOperatorRule() {
		return getLessOperatorAccess().getRule();
	}
	
	//enum GreaterOperator returns Operator: greater = '>';
	public GreaterOperatorElements getGreaterOperatorAccess() {
		return eGreaterOperator;
	}
	
	public EnumRule getGreaterOperatorRule() {
		return getGreaterOperatorAccess().getRule();
	}
	
	//enum MultiplyOperator returns Operator: multiply = '*';
	public MultiplyOperatorElements getMultiplyOperatorAccess() {
		return eMultiplyOperator;
	}
	
	public EnumRule getMultiplyOperatorRule() {
		return getMultiplyOperatorAccess().getRule();
	}
	
	//enum DivideOperator returns Operator: divide = '/';
	public DivideOperatorElements getDivideOperatorAccess() {
		return eDivideOperator;
	}
	
	public EnumRule getDivideOperatorRule() {
		return getDivideOperatorAccess().getRule();
	}
	
	//enum AddOperator returns Operator: add = '+';
	public AddOperatorElements getAddOperatorAccess() {
		return eAddOperator;
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubtractOperator returns Operator: subtract = '-';
	public SubtractOperatorElements getSubtractOperatorAccess() {
		return eSubtractOperator;
	}
	
	public EnumRule getSubtractOperatorRule() {
		return getSubtractOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
