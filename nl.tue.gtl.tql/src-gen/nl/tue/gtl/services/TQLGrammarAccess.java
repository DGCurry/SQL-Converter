/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BinaryOperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.BinaryOperationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaryOperationExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperationBinaryFunctionEnumRuleCall_2_1_0 = (RuleCall)cOperationAssignment_2_1.eContents().get(0);
		private final Keyword cLeftKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLeftExpressionCrossReference_4_0 = (CrossReference)cLeftAssignment_4.eContents().get(0);
		private final RuleCall cLeftExpressionEStringParserRuleCall_4_0_1 = (RuleCall)cLeftExpressionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRightExpressionCrossReference_6_0 = (CrossReference)cRightAssignment_6.eContents().get(0);
		private final RuleCall cRightExpressionEStringParserRuleCall_6_0_1 = (RuleCall)cRightExpressionCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BinaryOperationExpression returns BinaryOperationExpression:
		//    'BinaryOperationExpression'
		//    '{'
		//        ('operation' operation=BinaryFunction)?
		//        'left' left=[Expression|EString]
		//        'right' right=[Expression|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BinaryOperationExpression'
		//'{'
		//    ('operation' operation=BinaryFunction)?
		//    'left' left=[Expression|EString]
		//    'right' right=[Expression|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BinaryOperationExpression'
		public Keyword getBinaryOperationExpressionKeyword_0() { return cBinaryOperationExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('operation' operation=BinaryFunction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'operation'
		public Keyword getOperationKeyword_2_0() { return cOperationKeyword_2_0; }
		
		//operation=BinaryFunction
		public Assignment getOperationAssignment_2_1() { return cOperationAssignment_2_1; }
		
		//BinaryFunction
		public RuleCall getOperationBinaryFunctionEnumRuleCall_2_1_0() { return cOperationBinaryFunctionEnumRuleCall_2_1_0; }
		
		//'left'
		public Keyword getLeftKeyword_3() { return cLeftKeyword_3; }
		
		//left=[Expression|EString]
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//[Expression|EString]
		public CrossReference getLeftExpressionCrossReference_4_0() { return cLeftExpressionCrossReference_4_0; }
		
		//EString
		public RuleCall getLeftExpressionEStringParserRuleCall_4_0_1() { return cLeftExpressionEStringParserRuleCall_4_0_1; }
		
		//'right'
		public Keyword getRightKeyword_5() { return cRightKeyword_5; }
		
		//right=[Expression|EString]
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//[Expression|EString]
		public CrossReference getRightExpressionCrossReference_6_0() { return cRightExpressionCrossReference_6_0; }
		
		//EString
		public RuleCall getRightExpressionEStringParserRuleCall_6_0_1() { return cRightExpressionEStringParserRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringConstantExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanConstantExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerConstantExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParseExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFloatConstantExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBinaryOperationExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Expression returns Expression:
		//    parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ParseExpression | FloatConstantExpression | BinaryOperationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ParseExpression | FloatConstantExpression | BinaryOperationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameterExpression
		public RuleCall getParameterExpressionParserRuleCall_0() { return cParameterExpressionParserRuleCall_0; }
		
		//StringConstantExpression
		public RuleCall getStringConstantExpressionParserRuleCall_1() { return cStringConstantExpressionParserRuleCall_1; }
		
		//BooleanConstantExpression
		public RuleCall getBooleanConstantExpressionParserRuleCall_2() { return cBooleanConstantExpressionParserRuleCall_2; }
		
		//IntegerConstantExpression
		public RuleCall getIntegerConstantExpressionParserRuleCall_3() { return cIntegerConstantExpressionParserRuleCall_3; }
		
		//InExpression
		public RuleCall getInExpressionParserRuleCall_4() { return cInExpressionParserRuleCall_4; }
		
		//ParseExpression
		public RuleCall getParseExpressionParserRuleCall_5() { return cParseExpressionParserRuleCall_5; }
		
		//FloatConstantExpression
		public RuleCall getFloatConstantExpressionParserRuleCall_6() { return cFloatConstantExpressionParserRuleCall_6; }
		
		//BinaryOperationExpression
		public RuleCall getBinaryOperationExpressionParserRuleCall_7() { return cBinaryOperationExpressionParserRuleCall_7; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.ConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringConstantExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstantExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerConstantExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatConstantExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConstantExpression returns ConstantExpression:
		//    StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringConstantExpression
		public RuleCall getStringConstantExpressionParserRuleCall_0() { return cStringConstantExpressionParserRuleCall_0; }
		
		//BooleanConstantExpression
		public RuleCall getBooleanConstantExpressionParserRuleCall_1() { return cBooleanConstantExpressionParserRuleCall_1; }
		
		//IntegerConstantExpression
		public RuleCall getIntegerConstantExpressionParserRuleCall_2() { return cIntegerConstantExpressionParserRuleCall_2; }
		
		//FloatConstantExpression
		public RuleCall getFloatConstantExpressionParserRuleCall_3() { return cFloatConstantExpressionParserRuleCall_3; }
	}
	public class ParameterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.parameterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//parameterExpression returns parameterExpression:
		//    {parameterExpression}
		//    'parameterExpression'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{parameterExpression}
		//'parameterExpression'
		public Group getGroup() { return cGroup; }
		
		//{parameterExpression}
		public Action getParameterExpressionAction_0() { return cParameterExpressionAction_0; }
		
		//'parameterExpression'
		public Keyword getParameterExpressionKeyword_1() { return cParameterExpressionKeyword_1; }
	}
	public class StringConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.StringConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringConstantExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringConstantExpression returns StringConstantExpression:
		//    'StringConstantExpression'
		//    '{'
		//        'value' value=EString
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StringConstantExpression'
		//'{'
		//    'value' value=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'StringConstantExpression'
		public Keyword getStringConstantExpressionKeyword_0() { return cStringConstantExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BooleanConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.BooleanConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueValueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Keyword cBooleanConstantExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanConstantExpression returns BooleanConstantExpression:
		//    value?='value'
		//    'BooleanConstantExpression'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//value?='value'
		//'BooleanConstantExpression'
		public Group getGroup() { return cGroup; }
		
		//value?='value'
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//'value'
		public Keyword getValueValueKeyword_0_0() { return cValueValueKeyword_0_0; }
		
		//'BooleanConstantExpression'
		public Keyword getBooleanConstantExpressionKeyword_1() { return cBooleanConstantExpressionKeyword_1; }
	}
	public class IntegerConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.IntegerConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerConstantExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEIntParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntegerConstantExpression returns IntegerConstantExpression:
		//    'IntegerConstantExpression'
		//    '{'
		//        'value' value=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntegerConstantExpression'
		//'{'
		//    'value' value=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'IntegerConstantExpression'
		public Keyword getIntegerConstantExpressionKeyword_0() { return cIntegerConstantExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EInt
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_0() { return cValueEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.InExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStatementKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStatementExpressionCrossReference_2_1_0 = (CrossReference)cStatementAssignment_2_1.eContents().get(0);
		private final RuleCall cStatementExpressionEStringParserRuleCall_2_1_0_1 = (RuleCall)cStatementExpressionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cConstantSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstantSetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cConstantSetConstantExpressionCrossReference_5_0 = (CrossReference)cConstantSetAssignment_5.eContents().get(0);
		private final RuleCall cConstantSetConstantExpressionEStringParserRuleCall_5_0_1 = (RuleCall)cConstantSetConstantExpressionCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstantSetAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cConstantSetConstantExpressionCrossReference_6_1_0 = (CrossReference)cConstantSetAssignment_6_1.eContents().get(0);
		private final RuleCall cConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1 = (RuleCall)cConstantSetConstantExpressionCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//InExpression returns InExpression:
		//    'InExpression'
		//    '{'
		//        ('statement' statement=[Expression|EString])?
		//        'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InExpression'
		//'{'
		//    ('statement' statement=[Expression|EString])?
		//    'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'InExpression'
		public Keyword getInExpressionKeyword_0() { return cInExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('statement' statement=[Expression|EString])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'statement'
		public Keyword getStatementKeyword_2_0() { return cStatementKeyword_2_0; }
		
		//statement=[Expression|EString]
		public Assignment getStatementAssignment_2_1() { return cStatementAssignment_2_1; }
		
		//[Expression|EString]
		public CrossReference getStatementExpressionCrossReference_2_1_0() { return cStatementExpressionCrossReference_2_1_0; }
		
		//EString
		public RuleCall getStatementExpressionEStringParserRuleCall_2_1_0_1() { return cStatementExpressionEStringParserRuleCall_2_1_0_1; }
		
		//'constantSet'
		public Keyword getConstantSetKeyword_3() { return cConstantSetKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//constantSet+=[ConstantExpression|EString]
		public Assignment getConstantSetAssignment_5() { return cConstantSetAssignment_5; }
		
		//[ConstantExpression|EString]
		public CrossReference getConstantSetConstantExpressionCrossReference_5_0() { return cConstantSetConstantExpressionCrossReference_5_0; }
		
		//EString
		public RuleCall getConstantSetConstantExpressionEStringParserRuleCall_5_0_1() { return cConstantSetConstantExpressionEStringParserRuleCall_5_0_1; }
		
		//( "," constantSet+=[ConstantExpression|EString])*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//constantSet+=[ConstantExpression|EString]
		public Assignment getConstantSetAssignment_6_1() { return cConstantSetAssignment_6_1; }
		
		//[ConstantExpression|EString]
		public CrossReference getConstantSetConstantExpressionCrossReference_6_1_0() { return cConstantSetConstantExpressionCrossReference_6_1_0; }
		
		//EString
		public RuleCall getConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1() { return cConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ParseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.ParseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParseExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOutputTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutputTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOutputTypeTypeEnumRuleCall_2_1_0 = (RuleCall)cOutputTypeAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExpressionExpressionCrossReference_4_0 = (CrossReference)cExpressionAssignment_4.eContents().get(0);
		private final RuleCall cExpressionExpressionEStringParserRuleCall_4_0_1 = (RuleCall)cExpressionExpressionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParseExpression returns ParseExpression:
		//    'ParseExpression'
		//    '{'
		//        ('outputType' outputType=Type)?
		//        'expression' expression=[Expression|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ParseExpression'
		//'{'
		//    ('outputType' outputType=Type)?
		//    'expression' expression=[Expression|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ParseExpression'
		public Keyword getParseExpressionKeyword_0() { return cParseExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('outputType' outputType=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'outputType'
		public Keyword getOutputTypeKeyword_2_0() { return cOutputTypeKeyword_2_0; }
		
		//outputType=Type
		public Assignment getOutputTypeAssignment_2_1() { return cOutputTypeAssignment_2_1; }
		
		//Type
		public RuleCall getOutputTypeTypeEnumRuleCall_2_1_0() { return cOutputTypeTypeEnumRuleCall_2_1_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=[Expression|EString]
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//[Expression|EString]
		public CrossReference getExpressionExpressionCrossReference_4_0() { return cExpressionExpressionCrossReference_4_0; }
		
		//EString
		public RuleCall getExpressionExpressionEStringParserRuleCall_4_0_1() { return cExpressionExpressionEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FloatConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.FloatConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatConstantExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEFloatParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FloatConstantExpression returns FloatConstantExpression:
		//    'FloatConstantExpression'
		//    '{'
		//        'value' value=EFloat
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FloatConstantExpression'
		//'{'
		//    'value' value=EFloat
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FloatConstantExpression'
		public Keyword getFloatConstantExpressionKeyword_0() { return cFloatConstantExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EFloat
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_3_0() { return cValueEFloatParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class BinaryFunctionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.BinaryFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultMultKeyword_0_0 = (Keyword)cMultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSumSumKeyword_1_0 = (Keyword)cSumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivideDivideKeyword_2_0 = (Keyword)cDivideEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cConcatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cConcatConcatKeyword_3_0 = (Keyword)cConcatEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotequalNotequalKeyword_5_0 = (Keyword)cNotequalEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSmallerSmallerKeyword_6_0 = (Keyword)cSmallerEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGreaterGreaterKeyword_7_0 = (Keyword)cGreaterEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cOrOrKeyword_8_0 = (Keyword)cOrEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cAndAndKeyword_9_0 = (Keyword)cAndEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum BinaryFunction returns BinaryFunction:
		//                mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat' | equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';
		public EnumRule getRule() { return rule; }
		
		//mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat' | equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mult = 'mult'
		public EnumLiteralDeclaration getMultEnumLiteralDeclaration_0() { return cMultEnumLiteralDeclaration_0; }
		
		//'mult'
		public Keyword getMultMultKeyword_0_0() { return cMultMultKeyword_0_0; }
		
		//sum = 'sum'
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_1() { return cSumEnumLiteralDeclaration_1; }
		
		//'sum'
		public Keyword getSumSumKeyword_1_0() { return cSumSumKeyword_1_0; }
		
		//divide = 'divide'
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_2() { return cDivideEnumLiteralDeclaration_2; }
		
		//'divide'
		public Keyword getDivideDivideKeyword_2_0() { return cDivideDivideKeyword_2_0; }
		
		//concat = 'concat'
		public EnumLiteralDeclaration getConcatEnumLiteralDeclaration_3() { return cConcatEnumLiteralDeclaration_3; }
		
		//'concat'
		public Keyword getConcatConcatKeyword_3_0() { return cConcatConcatKeyword_3_0; }
		
		//equal = 'equal'
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_4_0() { return cEqualEqualKeyword_4_0; }
		
		//notequal = 'notequal'
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_5() { return cNotequalEnumLiteralDeclaration_5; }
		
		//'notequal'
		public Keyword getNotequalNotequalKeyword_5_0() { return cNotequalNotequalKeyword_5_0; }
		
		//smaller = 'smaller'
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_6() { return cSmallerEnumLiteralDeclaration_6; }
		
		//'smaller'
		public Keyword getSmallerSmallerKeyword_6_0() { return cSmallerSmallerKeyword_6_0; }
		
		//greater = 'greater'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_7() { return cGreaterEnumLiteralDeclaration_7; }
		
		//'greater'
		public Keyword getGreaterGreaterKeyword_7_0() { return cGreaterGreaterKeyword_7_0; }
		
		//or = 'or'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_8() { return cOrEnumLiteralDeclaration_8; }
		
		//'or'
		public Keyword getOrOrKeyword_8_0() { return cOrOrKeyword_8_0; }
		
		//and = 'and'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_9() { return cAndEnumLiteralDeclaration_9; }
		
		//'and'
		public Keyword getAndAndKeyword_9_0() { return cAndAndKeyword_9_0; }
	}
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.gtl.TQL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatsFloatsKeyword_2_0 = (Keyword)cFloatsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSetsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSetsSetsKeyword_3_0 = (Keyword)cSetsEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateTimeDateTimeKeyword_4_0 = (Keyword)cDateTimeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNullNullKeyword_5_0 = (Keyword)cNullEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBoolBoolKeyword_6_0 = (Keyword)cBoolEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Type returns Type:
		//                string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';
		public EnumRule getRule() { return rule; }
		
		//string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string = 'string'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//integer = 'integer'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		//'integer'
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }
		
		//floats = 'floats'
		public EnumLiteralDeclaration getFloatsEnumLiteralDeclaration_2() { return cFloatsEnumLiteralDeclaration_2; }
		
		//'floats'
		public Keyword getFloatsFloatsKeyword_2_0() { return cFloatsFloatsKeyword_2_0; }
		
		//sets = 'sets'
		public EnumLiteralDeclaration getSetsEnumLiteralDeclaration_3() { return cSetsEnumLiteralDeclaration_3; }
		
		//'sets'
		public Keyword getSetsSetsKeyword_3_0() { return cSetsSetsKeyword_3_0; }
		
		//DateTime = 'DateTime'
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_4() { return cDateTimeEnumLiteralDeclaration_4; }
		
		//'DateTime'
		public Keyword getDateTimeDateTimeKeyword_4_0() { return cDateTimeDateTimeKeyword_4_0; }
		
		//Null = 'Null'
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_5() { return cNullEnumLiteralDeclaration_5; }
		
		//'Null'
		public Keyword getNullNullKeyword_5_0() { return cNullNullKeyword_5_0; }
		
		//bool = 'bool'
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_6() { return cBoolEnumLiteralDeclaration_6; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_6_0() { return cBoolBoolKeyword_6_0; }
	}
	
	private final BinaryOperationExpressionElements pBinaryOperationExpression;
	private final ExpressionElements pExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final BinaryFunctionElements eBinaryFunction;
	private final ParameterExpressionElements pParameterExpression;
	private final StringConstantExpressionElements pStringConstantExpression;
	private final BooleanConstantExpressionElements pBooleanConstantExpression;
	private final IntegerConstantExpressionElements pIntegerConstantExpression;
	private final InExpressionElements pInExpression;
	private final ParseExpressionElements pParseExpression;
	private final FloatConstantExpressionElements pFloatConstantExpression;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final TypeElements eType;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBinaryOperationExpression = new BinaryOperationExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.eBinaryFunction = new BinaryFunctionElements();
		this.pParameterExpression = new ParameterExpressionElements();
		this.pStringConstantExpression = new StringConstantExpressionElements();
		this.pBooleanConstantExpression = new BooleanConstantExpressionElements();
		this.pIntegerConstantExpression = new IntegerConstantExpressionElements();
		this.pInExpression = new InExpressionElements();
		this.pParseExpression = new ParseExpressionElements();
		this.pFloatConstantExpression = new FloatConstantExpressionElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.eType = new TypeElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tue.gtl.TQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BinaryOperationExpression returns BinaryOperationExpression:
	//    'BinaryOperationExpression'
	//    '{'
	//        ('operation' operation=BinaryFunction)?
	//        'left' left=[Expression|EString]
	//        'right' right=[Expression|EString]
	//    '}';
	public BinaryOperationExpressionElements getBinaryOperationExpressionAccess() {
		return pBinaryOperationExpression;
	}
	
	public ParserRule getBinaryOperationExpressionRule() {
		return getBinaryOperationExpressionAccess().getRule();
	}
	
	//Expression returns Expression:
	//    parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ParseExpression | FloatConstantExpression | BinaryOperationExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConstantExpression returns ConstantExpression:
	//    StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//enum BinaryFunction returns BinaryFunction:
	//                mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat' | equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';
	public BinaryFunctionElements getBinaryFunctionAccess() {
		return eBinaryFunction;
	}
	
	public EnumRule getBinaryFunctionRule() {
		return getBinaryFunctionAccess().getRule();
	}
	
	//parameterExpression returns parameterExpression:
	//    {parameterExpression}
	//    'parameterExpression'
	//    ;
	public ParameterExpressionElements getParameterExpressionAccess() {
		return pParameterExpression;
	}
	
	public ParserRule getParameterExpressionRule() {
		return getParameterExpressionAccess().getRule();
	}
	
	//StringConstantExpression returns StringConstantExpression:
	//    'StringConstantExpression'
	//    '{'
	//        'value' value=EString
	//    '}';
	public StringConstantExpressionElements getStringConstantExpressionAccess() {
		return pStringConstantExpression;
	}
	
	public ParserRule getStringConstantExpressionRule() {
		return getStringConstantExpressionAccess().getRule();
	}
	
	//BooleanConstantExpression returns BooleanConstantExpression:
	//    value?='value'
	//    'BooleanConstantExpression'
	//    ;
	public BooleanConstantExpressionElements getBooleanConstantExpressionAccess() {
		return pBooleanConstantExpression;
	}
	
	public ParserRule getBooleanConstantExpressionRule() {
		return getBooleanConstantExpressionAccess().getRule();
	}
	
	//IntegerConstantExpression returns IntegerConstantExpression:
	//    'IntegerConstantExpression'
	//    '{'
	//        'value' value=EInt
	//    '}';
	public IntegerConstantExpressionElements getIntegerConstantExpressionAccess() {
		return pIntegerConstantExpression;
	}
	
	public ParserRule getIntegerConstantExpressionRule() {
		return getIntegerConstantExpressionAccess().getRule();
	}
	
	//InExpression returns InExpression:
	//    'InExpression'
	//    '{'
	//        ('statement' statement=[Expression|EString])?
	//        'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')'
	//    '}';
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}
	
	//ParseExpression returns ParseExpression:
	//    'ParseExpression'
	//    '{'
	//        ('outputType' outputType=Type)?
	//        'expression' expression=[Expression|EString]
	//    '}';
	public ParseExpressionElements getParseExpressionAccess() {
		return pParseExpression;
	}
	
	public ParserRule getParseExpressionRule() {
		return getParseExpressionAccess().getRule();
	}
	
	//FloatConstantExpression returns FloatConstantExpression:
	//    'FloatConstantExpression'
	//    '{'
	//        'value' value=EFloat
	//    '}';
	public FloatConstantExpressionElements getFloatConstantExpressionAccess() {
		return pFloatConstantExpression;
	}
	
	public ParserRule getFloatConstantExpressionRule() {
		return getFloatConstantExpressionAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum Type returns Type:
	//                string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
