// automatically generated by Xtext
grammar nl.tue.gtl.TQL with org.eclipse.xtext.common.Terminals

generate domainmodel "http://www.example.org/domainmodel/TQL"

import "http://www.example.org/model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TQL:
	(blocks += Block)*
;

Block:
	Table_Impl | Mapping | Transformation
;

Table_Impl returns Table:
	('source' Source_Table) | 
	('target' Target_Table)
	;	

Column returns Column: name=EString ':' type=Type;

Source_Table returns SourceTable:
	name=EString
	'{'
		 columns+=Column ( "," columns+=Column)* 
	'}';

Target_Table returns TargetTable:
	name=EString
	'{'
		columns+=Column ( "," columns+=Column)* 
	'}';
	
Mapping returns Mapping:
	'mapping' source=[SourceTable|EString] '->' target=[TargetTable|EString]
	'{'
		mappedColumns+=Mapped_Column ( ',' mappedColumns+=Mapped_Column)*
	'}'
;

Mapped_Column returns MappedColumn: 
	source=[Column|EString] ':' target=[Column|EString] ( '|' transformationCalls+=Transformation_Call)*
; 

Transformation_Call returns TransformationCall: 
	transformation=[Transformation|EString] '(' (callParameters+=Call_Parameter ( ',' callParameters+=Call_Parameter )* )? ')'
;

Transformation returns Transformation: 
	'transformation' inType=Type '::' name=EString '(' (parameters+=Parameter ( ',' parameters+=Parameter )* )? ')' ':' outType=Type
	'{'
		body=Expression
	'}'
	;
	
Parameter returns Parameter: name=EString ':' type=Type;

// CallParameters
Call_Parameter returns CallParameter: Constant_Call_Parameter | Reference_Call_Parameter;
Constant_Call_Parameter returns ConstantCallParameter: parameter=Constant;
Reference_Call_Parameter returns ReferenceCallParameter: reference=[Column|EString];

// Expressions
Expression returns Expression : And;
And returns Expression: Or ({And.left = current} operator=AndOperator right = Or)*;
Or returns Expression: Equals ({Or.left = current} operator=OrOperator right = Equals)*;
Equals returns Expression: NotEquals ({Equals.left = current} operator=EqualsOperator right = NotEquals)*;
NotEquals returns Expression: Less ({NotEquals.left = current} operator=NotEqualsOperator right = Less)*;
Less returns Expression: Greater ({Less.left = current} operator=LessOperator right = Greater)*;
Greater returns Expression: Multiply ({Greater.left = current} operator=GreaterOperator right = Multiply)*;
Multiply returns Expression: Divide ({Multiply.left = current} operator=MultiplyOperator right = Divide)*;
Divide returns Expression: Add ({Divide.left = current} operator=DivideOperator right = Add)*;
Add returns Expression: Subtract ({Add.left = current} operator=AddOperator right = Subtract)*;
Subtract returns Expression: Literals ({Subtract.left = current} operator=SubtractOperator right = Literals)*;

Literals returns Expression: Constant | Parameter_Expression; //| Column_Expression TODO for when statement
Column_Expression returns ColumnExpression: column=[Column|EString];
Parameter_Expression returns ParameterExpression: parameter=[Parameter|EString];

// Constants
Constant returns Constant: Single_Constant | Set_Constant;
Single_Constant returns Constant: Boolean_Constant | Float_Constant | Integer_Constant | String_Constant | Null_Constant;

Boolean_Constant returns BooleanConstant: value=EBoolean;
Float_Constant returns FloatConstant: value=EFloat;
Integer_Constant returns IntegerConstant: value=EInt ;
String_Constant returns StringConstant: '"' value=EString '"';
Null_Constant returns NullConstant: {NullConstant} 'null';
Set_Constant returns SetConstant: {SetConstant} '[' (values+=Single_Constant ( ',' values+=Single_Constant )*)? ']';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
enum Type returns Type:
	string = 'string' | integer = 'int' | float = 'float' | date = 'date' | null = 'null' | boolean = 'bool';
	
// We need split the enum for the expression to work	
enum AndOperator returns Operator: and = '&&';
enum OrOperator returns Operator: or = '||';
enum EqualsOperator returns Operator: equals = '==';
enum NotEqualsOperator returns Operator: notEquals = '!=';
enum LessOperator returns Operator: less = '<';
enum GreaterOperator returns Operator: greater = '>';
enum MultiplyOperator returns Operator: multiply = '*';
enum DivideOperator returns Operator: divide = '/';
enum AddOperator returns Operator: add = '+';
enum SubtractOperator returns Operator: subtract = '-';