// automatically generated by Xtext
grammar nl.tue.gtl.TQL with org.eclipse.xtext.common.Terminals

import "http://www.example.org/tqlModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Block:
	Table_Impl|Mapping
;

Table_Impl returns Table:
	('source' Source_Table) | 
	('target' Target_Table)
	;
	

Source_Table returns SourceTable:
	name=EString
	'{'
		columns+=TableField ( "," columns+=TableField)*
	'}';

Target_Table returns TargetTable:
	name=EString
	'{'
		columns+=TableField ( "," columns+=TableField)*
	'}';

TableField returns TableField:
	name=EString
	':'
		type=Type ( "," )
	;
	
Mapping returns Mapping:
	'mapping' sourcetable=[SourceTable|EString] '->' targettable=[TargetTable|EString]
	'{'
		fields+=MappingField (',' fields+=MappingField)*
	'}';


enum Type returns Type:
				string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';

MappingField returns MappingField:
	'MappingField'
	'{'
		'souceField' souceField=[TableField|EString]
		'targetField' targetField=[TableField|EString]
		('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
	'}';

TransformationCall returns TransformationCall:
	'TransformationCall'
	'{'
		('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
	'}';

enum BooleanFunction returns BooleanFunction:
				equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum BinaryFunction returns BinaryFunction:
				mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat';