/*
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import nl.tue.gtl.tql.model.Column;
import nl.tue.gtl.tql.model.Field;
import nl.tue.gtl.tql.model.MappedColumn;
import nl.tue.gtl.tql.model.Mapping;
import nl.tue.gtl.tql.model.ModelPackage;
import nl.tue.gtl.tql.model.Parameter;
import nl.tue.gtl.tql.model.ParameterExpression;
import nl.tue.gtl.tql.model.ReferenceCallParameter;
import nl.tue.gtl.tql.model.Table;
import nl.tue.gtl.tql.model.Transformation;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class TQLScopeProvider extends AbstractTQLScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference) {
	    if (context instanceof MappedColumn && reference == ModelPackage.Literals.MAPPED_COLUMN__SOURCE) {
	        EObject container = context.eContainer();
	        
	        if (container instanceof Mapping) {
	        	Mapping mapping = (Mapping)container;
	        	
	        	return Scopes.scopeFor(mapping.getSource().getColumns());
	        }
	    } else if (context instanceof MappedColumn && reference == ModelPackage.Literals.MAPPED_COLUMN__TARGET) {
	        EObject container = context.eContainer();
	        
	        if (container instanceof Mapping) {
	        	Mapping mapping = (Mapping)container;
	        	
	        	return Scopes.scopeFor(mapping.getTarget().getColumns());
	        }
	    } else if (context instanceof ReferenceCallParameter && reference == ModelPackage.Literals.REFERENCE_CALL_PARAMETER__REFERENCE) {
	    	// containers: TransformationCall -> MappedColumn -> Mapping
	    	EObject container = context.eContainer().eContainer().eContainer();
	    	
	    	if (container instanceof Mapping) {
    			Mapping mapping = (Mapping)container;
	        	
	        	return Scopes.scopeFor(mapping.getSource().getColumns());
	    	}
	    } else if (context instanceof ParameterExpression && reference == ModelPackage.Literals.PARAMETER_EXPRESSION__PARAMETER) {
	    	EObject container = context.eContainer();
	    	
	    	while (container != null) {
	    		if (container instanceof Transformation) {
	    			Transformation transformation = (Transformation)container;
	    			return Scopes.scopeFor(transformation.getParameters());
	    		} if (container instanceof Mapping) {
	    			Mapping mapping = (Mapping)container;
					return Scopes.scopeFor(mapping.getSource().getColumns());
				}
	    		
	    		container = container.eContainer();
	    	}
	    }
	    return super.getScope(context, reference);
	}
}
