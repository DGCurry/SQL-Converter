/**
 * generated by Xtext 2.27.0
 */
package nl.tue.gtl.generator;

import com.google.common.collect.Iterators;
import java.util.HashMap;
import nl.tue.gtl.domainmodel.Add_Expression;
import nl.tue.gtl.domainmodel.And_Expression;
import nl.tue.gtl.domainmodel.Divide_Expression;
import nl.tue.gtl.domainmodel.Equals_Expression;
import nl.tue.gtl.domainmodel.Greater_Expression;
import nl.tue.gtl.domainmodel.Less_Expression;
import nl.tue.gtl.domainmodel.Multiply_Expression;
import nl.tue.gtl.domainmodel.NotEquals_Expression;
import nl.tue.gtl.domainmodel.Or_Expression;
import nl.tue.gtl.domainmodel.Subtract_Expression;
import nl.tue.gtl.tql.model.BinaryOperatorExpression;
import nl.tue.gtl.tql.model.BooleanConstant;
import nl.tue.gtl.tql.model.CallParameter;
import nl.tue.gtl.tql.model.Constant;
import nl.tue.gtl.tql.model.ConstantCallParameter;
import nl.tue.gtl.tql.model.DateConstant;
import nl.tue.gtl.tql.model.Expression;
import nl.tue.gtl.tql.model.FloatConstant;
import nl.tue.gtl.tql.model.IntegerConstant;
import nl.tue.gtl.tql.model.MappedColumn;
import nl.tue.gtl.tql.model.Mapping;
import nl.tue.gtl.tql.model.NullConstant;
import nl.tue.gtl.tql.model.Operator;
import nl.tue.gtl.tql.model.Parameter;
import nl.tue.gtl.tql.model.ParameterExpression;
import nl.tue.gtl.tql.model.ReferenceCallParameter;
import nl.tue.gtl.tql.model.SelfExpression;
import nl.tue.gtl.tql.model.SetConstant;
import nl.tue.gtl.tql.model.StringConstant;
import nl.tue.gtl.tql.model.TargetTable;
import nl.tue.gtl.tql.model.TransformationCall;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TQLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("Create_Target.sql", this.getTargetTables(resource));
    fsa.generateFile("Transfer.sql", this.getInsertQueries(resource));
  }

  public String getTargetTables(final Resource resource) {
    TargetTableGenerator tableGenerator = new TargetTableGenerator();
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<TargetTable> _iterable = IteratorExtensions.<TargetTable>toIterable(Iterators.<TargetTable>filter(resource.getAllContents(), TargetTable.class));
      for(final TargetTable table : _iterable) {
        CharSequence _mapTargetTableToTable = tableGenerator.mapTargetTableToTable(table);
        _builder.append(_mapTargetTableToTable);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder.toString();
  }

  public String getInsertQueries(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<Mapping> _iterable = IteratorExtensions.<Mapping>toIterable(Iterators.<Mapping>filter(resource.getAllContents(), Mapping.class));
      for(final Mapping mapping : _iterable) {
        CharSequence _mapMappingToInsert = this.mapMappingToInsert(mapping);
        _builder.append(_mapMappingToInsert);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder.toString();
  }

  public CharSequence mapMappingToInsert(final Mapping mapping) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("INSERT INTO [");
    String _name = mapping.getTarget().getName();
    _builder.append(_name);
    _builder.append("] (");
    final Function1<MappedColumn, String> _function = (MappedColumn it) -> {
      return it.getTarget().getName();
    };
    String _join = IterableExtensions.join(ListExtensions.<MappedColumn, String>map(mapping.getMappedColumns(), _function), ", ");
    _builder.append(_join);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("SELECT ");
    _builder.newLine();
    _builder.append("\t");
    final Function1<MappedColumn, String> _function_1 = (MappedColumn it) -> {
      return this.mapMappedColumnSource(it);
    };
    String _join_1 = IterableExtensions.join(ListExtensions.<MappedColumn, String>map(mapping.getMappedColumns(), _function_1), ",\n");
    _builder.append(_join_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("FROM [");
    String _name_1 = mapping.getSource().getName();
    _builder.append(_name_1);
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String mapMappedColumnSource(final MappedColumn mappedColumn) {
    String selfReference = mappedColumn.getSource().getName();
    EList<TransformationCall> _transformationCalls = mappedColumn.getTransformationCalls();
    for (final TransformationCall transformationCall : _transformationCalls) {
      selfReference = this.unzipTransformationCall(transformationCall, selfReference).toString();
    }
    return selfReference;
  }

  public CharSequence unzipTransformationCall(final TransformationCall transformationCall, final CharSequence selfReference) {
    HashMap<String, CharSequence> referenceDict = this.mapParameterAndParameterCall(transformationCall);
    return this.resolveExpression(transformationCall.getTransformation().getBody(), selfReference, referenceDict);
  }

  public CharSequence resolveExpression(final Expression expression, final CharSequence selfReference, final HashMap<String, CharSequence> referenceDict) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (expression instanceof ParameterExpression) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _get = referenceDict.get(((ParameterExpression)expression).getParameter().getName());
      _builder.append(_get);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (expression instanceof SelfExpression) {
        _matched=true;
        _switchResult = selfReference;
      }
    }
    if (!_matched) {
      if (expression instanceof And_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((And_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((And_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((And_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Or_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Or_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Or_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Or_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Equals_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Equals_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Equals_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Equals_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof NotEquals_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((NotEquals_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((NotEquals_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((NotEquals_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Less_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Less_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Less_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Less_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Greater_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Greater_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Greater_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Greater_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Multiply_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Multiply_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Multiply_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Multiply_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Divide_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Divide_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Divide_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Divide_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Add_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Add_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Add_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Add_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof Subtract_Expression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((Subtract_Expression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((Subtract_Expression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((Subtract_Expression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (expression instanceof BinaryOperatorExpression) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _resolveExpression = this.resolveExpression(((BinaryOperatorExpression)expression).getLeft(), selfReference, referenceDict);
        _builder.append(_resolveExpression);
        _builder.append(" ");
        CharSequence _operator = this.getOperator(((BinaryOperatorExpression)expression).getOperator());
        _builder.append(_operator);
        _builder.append(" ");
        CharSequence _resolveExpression_1 = this.resolveExpression(((BinaryOperatorExpression)expression).getRight(), selfReference, referenceDict);
        _builder.append(_resolveExpression_1);
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }

  public CharSequence getOperator(final Operator operator) {
    CharSequence _switchResult = null;
    if (operator != null) {
      switch (operator) {
        case ADD:
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("+");
          _switchResult = _builder;
          break;
        case AND:
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("AND");
          _switchResult = _builder_1;
          break;
        case DIVIDE:
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("/");
          _switchResult = _builder_2;
          break;
        case EQUALS:
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("=");
          _switchResult = _builder_3;
          break;
        case GREATER:
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append(">");
          _switchResult = _builder_4;
          break;
        case LESS:
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("<");
          _switchResult = _builder_5;
          break;
        case MULTIPLY:
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append("*");
          _switchResult = _builder_6;
          break;
        case NOT_EQUALS:
          StringConcatenation _builder_7 = new StringConcatenation();
          _builder_7.append("<>");
          _switchResult = _builder_7;
          break;
        case OR:
          StringConcatenation _builder_8 = new StringConcatenation();
          _builder_8.append("OR");
          _switchResult = _builder_8;
          break;
        case SUBTRACT:
          StringConcatenation _builder_9 = new StringConcatenation();
          _builder_9.append("-");
          _switchResult = _builder_9;
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }

  public HashMap<String, CharSequence> mapParameterAndParameterCall(final TransformationCall transformationCall) {
    EList<CallParameter> callParameters = transformationCall.getCallParameters();
    EList<Parameter> parameters = transformationCall.getTransformation().getParameters();
    HashMap<String, CharSequence> parameterDict = new HashMap<String, CharSequence>();
    final EList<CallParameter> _converted_callParameters = (EList<CallParameter>)callParameters;
    int _length = ((Object[])Conversions.unwrapArray(_converted_callParameters, Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      parameterDict.put(parameters.get((i).intValue()).getName(), this.mapParameter(callParameters.get((i).intValue())));
    }
    return parameterDict;
  }

  public CharSequence mapParameter(final CallParameter callParameter) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (callParameter instanceof ConstantCallParameter) {
      _matched=true;
      _switchResult = this.mapConstant(((ConstantCallParameter)callParameter).getParameter());
    }
    if (!_matched) {
      if (callParameter instanceof ReferenceCallParameter) {
        _matched=true;
        _switchResult = ((ReferenceCallParameter)callParameter).getReference().getName();
      }
    }
    return _switchResult;
  }

  public CharSequence mapConstant(final Constant constant) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (constant instanceof BooleanConstant) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      boolean _isValue = ((BooleanConstant)constant).isValue();
      _builder.append(_isValue);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (constant instanceof FloatConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        float _value = ((FloatConstant)constant).getValue();
        _builder.append(_value);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (constant instanceof IntegerConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        int _value = ((IntegerConstant)constant).getValue();
        _builder.append(_value);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (constant instanceof StringConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("N\'");
        String _value = ((StringConstant)constant).getValue();
        _builder.append(_value);
        _builder.append("\' ");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (constant instanceof DateConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("N\'");
        String _value = ((DateConstant)constant).getValue();
        _builder.append(_value);
        _builder.append("\' ");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (constant instanceof NullConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("NULL");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (constant instanceof SetConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append(" ");
        _builder.append("[ ");
        final Function1<Constant, CharSequence> _function = (Constant it) -> {
          return this.mapConstant(it);
        };
        String _join = IterableExtensions.join(ListExtensions.<Constant, CharSequence>map(((SetConstant)constant).getValues(), _function), ", ");
        _builder.append(_join, " ");
        _builder.append(" ] ");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("NULL");
      _switchResult = _builder;
    }
    return _switchResult;
  }
}
