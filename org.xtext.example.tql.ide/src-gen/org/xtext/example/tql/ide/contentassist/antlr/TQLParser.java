/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.tql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.tql.ide.contentassist.antlr.internal.InternalTQLParser;
import org.xtext.example.tql.services.TQLGrammarAccess;

public class TQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTable_ImplAccess().getAlternatives(), "rule__Table_Impl__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getConstantExpressionAccess().getAlternatives(), "rule__ConstantExpression__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getBooleanFunctionAccess().getAlternatives(), "rule__BooleanFunction__Alternatives");
			builder.put(grammarAccess.getBinaryFunctionAccess().getAlternatives(), "rule__BinaryFunction__Alternatives");
			builder.put(grammarAccess.getTable_ImplAccess().getGroup_0(), "rule__Table_Impl__Group_0__0");
			builder.put(grammarAccess.getTable_ImplAccess().getGroup_1(), "rule__Table_Impl__Group_1__0");
			builder.put(grammarAccess.getSource_TableAccess().getGroup(), "rule__Source_Table__Group__0");
			builder.put(grammarAccess.getSource_TableAccess().getGroup_3(), "rule__Source_Table__Group_3__0");
			builder.put(grammarAccess.getTarget_TableAccess().getGroup(), "rule__Target_Table__Group__0");
			builder.put(grammarAccess.getTarget_TableAccess().getGroup_3(), "rule__Target_Table__Group_3__0");
			builder.put(grammarAccess.getTableFieldAccess().getGroup(), "rule__TableField__Group__0");
			builder.put(grammarAccess.getMappingSourceTableAccess().getGroup(), "rule__MappingSourceTable__Group__0");
			builder.put(grammarAccess.getMappingSourceTableAccess().getGroup_6(), "rule__MappingSourceTable__Group_6__0");
			builder.put(grammarAccess.getMappingTargetTableAccess().getGroup(), "rule__MappingTargetTable__Group__0");
			builder.put(grammarAccess.getMappingTargetTableAccess().getGroup_6(), "rule__MappingTargetTable__Group_6__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_11(), "rule__Transformation__Group_11__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_13(), "rule__Transformation__Group_13__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_13_3(), "rule__Transformation__Group_13_3__0");
			builder.put(grammarAccess.getMappingFieldAccess().getGroup(), "rule__MappingField__Group__0");
			builder.put(grammarAccess.getMappingFieldAccess().getGroup_6(), "rule__MappingField__Group_6__0");
			builder.put(grammarAccess.getMappingFieldAccess().getGroup_6_3(), "rule__MappingField__Group_6_3__0");
			builder.put(grammarAccess.getBooleanOperationExpressionAccess().getGroup(), "rule__BooleanOperationExpression__Group__0");
			builder.put(grammarAccess.getBooleanOperationExpressionAccess().getGroup_2(), "rule__BooleanOperationExpression__Group_2__0");
			builder.put(grammarAccess.getTransformationCallAccess().getGroup(), "rule__TransformationCall__Group__0");
			builder.put(grammarAccess.getTransformationCallAccess().getGroup_4(), "rule__TransformationCall__Group_4__0");
			builder.put(grammarAccess.getTransformationCallAccess().getGroup_4_3(), "rule__TransformationCall__Group_4_3__0");
			builder.put(grammarAccess.getParameterExpressionAccess().getGroup(), "rule__ParameterExpression__Group__0");
			builder.put(grammarAccess.getStringConstantExpressionAccess().getGroup(), "rule__StringConstantExpression__Group__0");
			builder.put(grammarAccess.getBooleanConstantExpressionAccess().getGroup(), "rule__BooleanConstantExpression__Group__0");
			builder.put(grammarAccess.getIntegerConstantExpressionAccess().getGroup(), "rule__IntegerConstantExpression__Group__0");
			builder.put(grammarAccess.getInExpressionAccess().getGroup(), "rule__InExpression__Group__0");
			builder.put(grammarAccess.getInExpressionAccess().getGroup_2(), "rule__InExpression__Group_2__0");
			builder.put(grammarAccess.getInExpressionAccess().getGroup_6(), "rule__InExpression__Group_6__0");
			builder.put(grammarAccess.getConditionalStatementAccess().getGroup(), "rule__ConditionalStatement__Group__0");
			builder.put(grammarAccess.getConditionalStatementAccess().getGroup_9(), "rule__ConditionalStatement__Group_9__0");
			builder.put(grammarAccess.getConditionalStatementAccess().getGroup_14(), "rule__ConditionalStatement__Group_14__0");
			builder.put(grammarAccess.getParseExpressionAccess().getGroup(), "rule__ParseExpression__Group__0");
			builder.put(grammarAccess.getParseExpressionAccess().getGroup_2(), "rule__ParseExpression__Group_2__0");
			builder.put(grammarAccess.getFloatConstantExpressionAccess().getGroup(), "rule__FloatConstantExpression__Group__0");
			builder.put(grammarAccess.getBinaryOperationExpressionAccess().getGroup(), "rule__BinaryOperationExpression__Group__0");
			builder.put(grammarAccess.getBinaryOperationExpressionAccess().getGroup_2(), "rule__BinaryOperationExpression__Group_2__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_3(), "rule__Parameter__Group_3__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_4(), "rule__Parameter__Group_4__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getTQLAccess().getBlocksAssignment(), "rule__TQL__BlocksAssignment");
			builder.put(grammarAccess.getSource_TableAccess().getNameAssignment_0(), "rule__Source_Table__NameAssignment_0");
			builder.put(grammarAccess.getSource_TableAccess().getColumnsAssignment_2(), "rule__Source_Table__ColumnsAssignment_2");
			builder.put(grammarAccess.getSource_TableAccess().getColumnsAssignment_3_1(), "rule__Source_Table__ColumnsAssignment_3_1");
			builder.put(grammarAccess.getTarget_TableAccess().getNameAssignment_0(), "rule__Target_Table__NameAssignment_0");
			builder.put(grammarAccess.getTarget_TableAccess().getColumnsAssignment_2(), "rule__Target_Table__ColumnsAssignment_2");
			builder.put(grammarAccess.getTarget_TableAccess().getColumnsAssignment_3_1(), "rule__Target_Table__ColumnsAssignment_3_1");
			builder.put(grammarAccess.getTableFieldAccess().getNameAssignment_0(), "rule__TableField__NameAssignment_0");
			builder.put(grammarAccess.getTableFieldAccess().getTypeAssignment_2(), "rule__TableField__TypeAssignment_2");
			builder.put(grammarAccess.getMappingSourceTableAccess().getNameAssignment_1(), "rule__MappingSourceTable__NameAssignment_1");
			builder.put(grammarAccess.getMappingSourceTableAccess().getColumnsAssignment_5(), "rule__MappingSourceTable__ColumnsAssignment_5");
			builder.put(grammarAccess.getMappingSourceTableAccess().getColumnsAssignment_6_1(), "rule__MappingSourceTable__ColumnsAssignment_6_1");
			builder.put(grammarAccess.getMappingTargetTableAccess().getNameAssignment_1(), "rule__MappingTargetTable__NameAssignment_1");
			builder.put(grammarAccess.getMappingTargetTableAccess().getColumnsAssignment_5(), "rule__MappingTargetTable__ColumnsAssignment_5");
			builder.put(grammarAccess.getMappingTargetTableAccess().getColumnsAssignment_6_1(), "rule__MappingTargetTable__ColumnsAssignment_6_1");
			builder.put(grammarAccess.getTransformationAccess().getReturnTypeAssignment_3(), "rule__Transformation__ReturnTypeAssignment_3");
			builder.put(grammarAccess.getTransformationAccess().getSelfTypeAssignment_5(), "rule__Transformation__SelfTypeAssignment_5");
			builder.put(grammarAccess.getTransformationAccess().getLabelAssignment_7(), "rule__Transformation__LabelAssignment_7");
			builder.put(grammarAccess.getTransformationAccess().getReturnStatementAssignment_10(), "rule__Transformation__ReturnStatementAssignment_10");
			builder.put(grammarAccess.getTransformationAccess().getReturnStatementAssignment_11_1(), "rule__Transformation__ReturnStatementAssignment_11_1");
			builder.put(grammarAccess.getTransformationAccess().getParameterAssignment_13_2(), "rule__Transformation__ParameterAssignment_13_2");
			builder.put(grammarAccess.getTransformationAccess().getParameterAssignment_13_3_1(), "rule__Transformation__ParameterAssignment_13_3_1");
			builder.put(grammarAccess.getMappingFieldAccess().getSouceFieldAssignment_3(), "rule__MappingField__SouceFieldAssignment_3");
			builder.put(grammarAccess.getMappingFieldAccess().getTargetFieldAssignment_5(), "rule__MappingField__TargetFieldAssignment_5");
			builder.put(grammarAccess.getMappingFieldAccess().getCallsAssignment_6_2(), "rule__MappingField__CallsAssignment_6_2");
			builder.put(grammarAccess.getMappingFieldAccess().getCallsAssignment_6_3_1(), "rule__MappingField__CallsAssignment_6_3_1");
			builder.put(grammarAccess.getBooleanOperationExpressionAccess().getOperationAssignment_2_1(), "rule__BooleanOperationExpression__OperationAssignment_2_1");
			builder.put(grammarAccess.getBooleanOperationExpressionAccess().getRightAssignment_4(), "rule__BooleanOperationExpression__RightAssignment_4");
			builder.put(grammarAccess.getBooleanOperationExpressionAccess().getLeftAssignment_6(), "rule__BooleanOperationExpression__LeftAssignment_6");
			builder.put(grammarAccess.getTransformationCallAccess().getTransformationAssignment_3(), "rule__TransformationCall__TransformationAssignment_3");
			builder.put(grammarAccess.getTransformationCallAccess().getParametersAssignment_4_2(), "rule__TransformationCall__ParametersAssignment_4_2");
			builder.put(grammarAccess.getTransformationCallAccess().getParametersAssignment_4_3_1(), "rule__TransformationCall__ParametersAssignment_4_3_1");
			builder.put(grammarAccess.getParameterExpressionAccess().getParameterAssignment_3(), "rule__ParameterExpression__ParameterAssignment_3");
			builder.put(grammarAccess.getStringConstantExpressionAccess().getValueAssignment_3(), "rule__StringConstantExpression__ValueAssignment_3");
			builder.put(grammarAccess.getBooleanConstantExpressionAccess().getValueAssignment_0(), "rule__BooleanConstantExpression__ValueAssignment_0");
			builder.put(grammarAccess.getIntegerConstantExpressionAccess().getValueAssignment_3(), "rule__IntegerConstantExpression__ValueAssignment_3");
			builder.put(grammarAccess.getInExpressionAccess().getStatementAssignment_2_1(), "rule__InExpression__StatementAssignment_2_1");
			builder.put(grammarAccess.getInExpressionAccess().getConstantSetAssignment_5(), "rule__InExpression__ConstantSetAssignment_5");
			builder.put(grammarAccess.getInExpressionAccess().getConstantSetAssignment_6_1(), "rule__InExpression__ConstantSetAssignment_6_1");
			builder.put(grammarAccess.getConditionalStatementAccess().getConditionAssignment_3(), "rule__ConditionalStatement__ConditionAssignment_3");
			builder.put(grammarAccess.getConditionalStatementAccess().getBooleanoperationexpressionAssignment_5(), "rule__ConditionalStatement__BooleanoperationexpressionAssignment_5");
			builder.put(grammarAccess.getConditionalStatementAccess().getIfBodyAssignment_8(), "rule__ConditionalStatement__IfBodyAssignment_8");
			builder.put(grammarAccess.getConditionalStatementAccess().getIfBodyAssignment_9_1(), "rule__ConditionalStatement__IfBodyAssignment_9_1");
			builder.put(grammarAccess.getConditionalStatementAccess().getElseBodyAssignment_13(), "rule__ConditionalStatement__ElseBodyAssignment_13");
			builder.put(grammarAccess.getConditionalStatementAccess().getElseBodyAssignment_14_1(), "rule__ConditionalStatement__ElseBodyAssignment_14_1");
			builder.put(grammarAccess.getParseExpressionAccess().getOutputTypeAssignment_2_1(), "rule__ParseExpression__OutputTypeAssignment_2_1");
			builder.put(grammarAccess.getParseExpressionAccess().getExpressionAssignment_4(), "rule__ParseExpression__ExpressionAssignment_4");
			builder.put(grammarAccess.getFloatConstantExpressionAccess().getValueAssignment_3(), "rule__FloatConstantExpression__ValueAssignment_3");
			builder.put(grammarAccess.getBinaryOperationExpressionAccess().getOperationAssignment_2_1(), "rule__BinaryOperationExpression__OperationAssignment_2_1");
			builder.put(grammarAccess.getBinaryOperationExpressionAccess().getRightAssignment_4(), "rule__BinaryOperationExpression__RightAssignment_4");
			builder.put(grammarAccess.getBinaryOperationExpressionAccess().getLeftAssignment_6(), "rule__BinaryOperationExpression__LeftAssignment_6");
			builder.put(grammarAccess.getParameterAccess().getLabelAssignment_3_1(), "rule__Parameter__LabelAssignment_3_1");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_4_1(), "rule__Parameter__TypeAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TQLGrammarAccess grammarAccess;

	@Override
	protected InternalTQLParser createParser() {
		InternalTQLParser result = new InternalTQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
