/*
 * generated by Xtext 2.27.0
 */
grammar InternalTQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.tql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.tql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.tql.services.TQLGrammarAccess;

}

@parser::members {

 	private TQLGrammarAccess grammarAccess;

    public InternalTQLParser(TokenStream input, TQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TQL";
   	}

   	@Override
   	protected TQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTQL
entryRuleTQL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTQLRule()); }
	iv_ruleTQL=ruleTQL
	{ $current=$iv_ruleTQL.current; }
	EOF;

// Rule TQL
ruleTQL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTQLAccess().getBlocksBlockParserRuleCall_0());
			}
			lv_blocks_0_0=ruleBlock
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTQLRule());
				}
				add(
					$current,
					"blocks",
					lv_blocks_0_0,
					"org.xtext.example.tql.TQL.Block");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBlockAccess().getTable_ImplParserRuleCall());
	}
	this_Table_Impl_0=ruleTable_Impl
	{
		$current = $this_Table_Impl_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleTable_Impl
entryRuleTable_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTable_ImplRule()); }
	iv_ruleTable_Impl=ruleTable_Impl
	{ $current=$iv_ruleTable_Impl.current; }
	EOF;

// Rule Table_Impl
ruleTable_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='source'
			{
				newLeafNode(otherlv_0, grammarAccess.getTable_ImplAccess().getSourceKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTable_ImplAccess().getSource_TableParserRuleCall_0_1());
			}
			this_Source_Table_1=ruleSource_Table
			{
				$current = $this_Source_Table_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2='target'
			{
				newLeafNode(otherlv_2, grammarAccess.getTable_ImplAccess().getTargetKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTable_ImplAccess().getTarget_TableParserRuleCall_1_1());
			}
			this_Target_Table_3=ruleTarget_Table
			{
				$current = $this_Target_Table_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSource_Table
entryRuleSource_Table returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSource_TableRule()); }
	iv_ruleSource_Table=ruleSource_Table
	{ $current=$iv_ruleSource_Table.current; }
	EOF;

// Rule Source_Table
ruleSource_Table returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSource_TableAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSource_TableRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.tql.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSource_TableAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSource_TableAccess().getColumnsTableFieldParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleTableField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSource_TableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_2_0,
						"org.xtext.example.tql.TQL.TableField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getSource_TableAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSource_TableAccess().getColumnsTableFieldParserRuleCall_3_1_0());
					}
					lv_columns_4_0=ruleTableField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSource_TableRule());
						}
						add(
							$current,
							"columns",
							lv_columns_4_0,
							"org.xtext.example.tql.TQL.TableField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSource_TableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTarget_Table
entryRuleTarget_Table returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTarget_TableRule()); }
	iv_ruleTarget_Table=ruleTarget_Table
	{ $current=$iv_ruleTarget_Table.current; }
	EOF;

// Rule Target_Table
ruleTarget_Table returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTarget_TableAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTarget_TableRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.tql.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTarget_TableAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTarget_TableAccess().getColumnsTableFieldParserRuleCall_2_0());
				}
				lv_columns_2_0=ruleTableField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTarget_TableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_2_0,
						"org.xtext.example.tql.TQL.TableField");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getTarget_TableAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTarget_TableAccess().getColumnsTableFieldParserRuleCall_3_1_0());
					}
					lv_columns_4_0=ruleTableField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTarget_TableRule());
						}
						add(
							$current,
							"columns",
							lv_columns_4_0,
							"org.xtext.example.tql.TQL.TableField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTarget_TableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTableField
entryRuleTableField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableFieldRule()); }
	iv_ruleTableField=ruleTableField
	{ $current=$iv_ruleTableField.current; }
	EOF;

// Rule TableField
ruleTableField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTableFieldAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableFieldRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.tql.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTableFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableFieldAccess().getTypeTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.tql.TQL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getTableFieldAccess().getCommaKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getParameterExpressionParserRuleCall_0());
		}
		this_parameterExpression_0=ruleparameterExpression
		{
			$current = $this_parameterExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getStringConstantExpressionParserRuleCall_1());
		}
		this_StringConstantExpression_1=ruleStringConstantExpression
		{
			$current = $this_StringConstantExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBooleanConstantExpressionParserRuleCall_2());
		}
		this_BooleanConstantExpression_2=ruleBooleanConstantExpression
		{
			$current = $this_BooleanConstantExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIntegerConstantExpressionParserRuleCall_3());
		}
		this_IntegerConstantExpression_3=ruleIntegerConstantExpression
		{
			$current = $this_IntegerConstantExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getInExpressionParserRuleCall_4());
		}
		this_InExpression_4=ruleInExpression
		{
			$current = $this_InExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getConditionalStatementParserRuleCall_5());
		}
		this_ConditionalStatement_5=ruleConditionalStatement
		{
			$current = $this_ConditionalStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getParseExpressionParserRuleCall_6());
		}
		this_ParseExpression_6=ruleParseExpression
		{
			$current = $this_ParseExpression_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFloatConstantExpressionParserRuleCall_7());
		}
		this_FloatConstantExpression_7=ruleFloatConstantExpression
		{
			$current = $this_FloatConstantExpression_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBinaryOperationExpressionParserRuleCall_8());
		}
		this_BinaryOperationExpression_8=ruleBinaryOperationExpression
		{
			$current = $this_BinaryOperationExpression_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBooleanOperationExpressionParserRuleCall_9());
		}
		this_BooleanOperationExpression_9=ruleBooleanOperationExpression
		{
			$current = $this_BooleanOperationExpression_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall());
	}
	this_ConditionalStatement_0=ruleConditionalStatement
	{
		$current = $this_ConditionalStatement_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleBooleanOperationExpression
entryRuleBooleanOperationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOperationExpressionRule()); }
	iv_ruleBooleanOperationExpression=ruleBooleanOperationExpression
	{ $current=$iv_ruleBooleanOperationExpression.current; }
	EOF;

// Rule BooleanOperationExpression
ruleBooleanOperationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BooleanOperationExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getBooleanOperationExpressionAccess().getBooleanOperationExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanOperationExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='operation'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanOperationExpressionAccess().getOperationKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanOperationExpressionAccess().getOperationBooleanFunctionEnumRuleCall_2_1_0());
					}
					lv_operation_3_0=ruleBooleanFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanOperationExpressionRule());
						}
						set(
							$current,
							"operation",
							lv_operation_3_0,
							"org.xtext.example.tql.TQL.BooleanFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='right'
		{
			newLeafNode(otherlv_4, grammarAccess.getBooleanOperationExpressionAccess().getRightKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperationExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBooleanOperationExpressionAccess().getRightExpressionCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='left'
		{
			newLeafNode(otherlv_6, grammarAccess.getBooleanOperationExpressionAccess().getLeftKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanOperationExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBooleanOperationExpressionAccess().getLeftExpressionCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getBooleanOperationExpressionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleTransformationCall
entryRuleTransformationCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationCallRule()); }
	iv_ruleTransformationCall=ruleTransformationCall
	{ $current=$iv_ruleTransformationCall.current; }
	EOF;

// Rule TransformationCall
ruleTransformationCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TransformationCall'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransformationCallAccess().getTransformationCallKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransformationCallAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='transformation'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransformationCallAccess().getTransformationKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransformationCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransformationCallAccess().getTransformationTransformationCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='parameters'
			{
				newLeafNode(otherlv_4, grammarAccess.getTransformationCallAccess().getParametersKeyword_4_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getTransformationCallAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransformationCallRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTransformationCallAccess().getParametersTableFieldCrossReference_4_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getTransformationCallAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransformationCallRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getTransformationCallAccess().getParametersTableFieldCrossReference_4_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getTransformationCallAccess().getRightParenthesisKeyword_4_4());
			}
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getTransformationCallAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleparameterExpression
entryRuleparameterExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterExpressionRule()); }
	iv_ruleparameterExpression=ruleparameterExpression
	{ $current=$iv_ruleparameterExpression.current; }
	EOF;

// Rule parameterExpression
ruleparameterExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parameterExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterExpressionAccess().getParameterExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='parameter'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterExpressionAccess().getParameterKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getParameterExpressionAccess().getParameterParameterCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getParameterExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStringConstantExpression
entryRuleStringConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringConstantExpressionRule()); }
	iv_ruleStringConstantExpression=ruleStringConstantExpression
	{ $current=$iv_ruleStringConstantExpression.current; }
	EOF;

// Rule StringConstantExpression
ruleStringConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='StringConstantExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringConstantExpressionAccess().getStringConstantExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringConstantExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getStringConstantExpressionAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringConstantExpressionAccess().getValueEStringParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringConstantExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.tql.TQL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringConstantExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBooleanConstantExpression
entryRuleBooleanConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanConstantExpressionRule()); }
	iv_ruleBooleanConstantExpression=ruleBooleanConstantExpression
	{ $current=$iv_ruleBooleanConstantExpression.current; }
	EOF;

// Rule BooleanConstantExpression
ruleBooleanConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='value'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanConstantExpressionAccess().getValueValueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanConstantExpressionRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0 != null, "value");
				}
			)
		)
		otherlv_1='BooleanConstantExpression'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanConstantExpressionAccess().getBooleanConstantExpressionKeyword_1());
		}
	)
;

// Entry rule entryRuleIntegerConstantExpression
entryRuleIntegerConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerConstantExpressionRule()); }
	iv_ruleIntegerConstantExpression=ruleIntegerConstantExpression
	{ $current=$iv_ruleIntegerConstantExpression.current; }
	EOF;

// Rule IntegerConstantExpression
ruleIntegerConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IntegerConstantExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntegerConstantExpressionAccess().getIntegerConstantExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerConstantExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntegerConstantExpressionAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerConstantExpressionAccess().getValueEIntParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerConstantExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.tql.TQL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntegerConstantExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInExpressionRule()); }
	iv_ruleInExpression=ruleInExpression
	{ $current=$iv_ruleInExpression.current; }
	EOF;

// Rule InExpression
ruleInExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='InExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getInExpressionAccess().getInExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='statement'
			{
				newLeafNode(otherlv_2, grammarAccess.getInExpressionAccess().getStatementKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getInExpressionAccess().getStatementExpressionCrossReference_2_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='constantSet'
		{
			newLeafNode(otherlv_4, grammarAccess.getInExpressionAccess().getConstantSetKeyword_3());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getInExpressionAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getInExpressionAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getInExpressionAccess().getConstantSetConstantExpressionCrossReference_6_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getInExpressionAccess().getRightParenthesisKeyword_7());
		}
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getInExpressionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalStatementRule()); }
	iv_ruleConditionalStatement=ruleConditionalStatement
	{ $current=$iv_ruleConditionalStatement.current; }
	EOF;

// Rule ConditionalStatement
ruleConditionalStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ConditionalStatement'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalStatementAccess().getConditionalStatementKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalStatementAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='condition'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionalStatementAccess().getConditionKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalStatementRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getConditionExpressionCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='booleanoperationexpression'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalStatementAccess().getBooleanoperationexpressionKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalStatementRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getBooleanoperationexpressionBooleanOperationExpressionCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='ifBody'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionalStatementAccess().getIfBodyKeyword_6());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getConditionalStatementAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getIfBodyStatementParserRuleCall_8_0());
				}
				lv_ifBody_8_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
					}
					add(
						$current,
						"ifBody",
						lv_ifBody_8_0,
						"org.xtext.example.tql.TQL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9=','
			{
				newLeafNode(otherlv_9, grammarAccess.getConditionalStatementAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalStatementAccess().getIfBodyStatementParserRuleCall_9_1_0());
					}
					lv_ifBody_10_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
						}
						add(
							$current,
							"ifBody",
							lv_ifBody_10_0,
							"org.xtext.example.tql.TQL.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getConditionalStatementAccess().getRightCurlyBracketKeyword_10());
		}
		otherlv_12='elseBody'
		{
			newLeafNode(otherlv_12, grammarAccess.getConditionalStatementAccess().getElseBodyKeyword_11());
		}
		otherlv_13='{'
		{
			newLeafNode(otherlv_13, grammarAccess.getConditionalStatementAccess().getLeftCurlyBracketKeyword_12());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getElseBodyStatementParserRuleCall_13_0());
				}
				lv_elseBody_14_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
					}
					add(
						$current,
						"elseBody",
						lv_elseBody_14_0,
						"org.xtext.example.tql.TQL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_15=','
			{
				newLeafNode(otherlv_15, grammarAccess.getConditionalStatementAccess().getCommaKeyword_14_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalStatementAccess().getElseBodyStatementParserRuleCall_14_1_0());
					}
					lv_elseBody_16_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
						}
						add(
							$current,
							"elseBody",
							lv_elseBody_16_0,
							"org.xtext.example.tql.TQL.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getConditionalStatementAccess().getRightCurlyBracketKeyword_15());
		}
		otherlv_18='}'
		{
			newLeafNode(otherlv_18, grammarAccess.getConditionalStatementAccess().getRightCurlyBracketKeyword_16());
		}
	)
;

// Entry rule entryRuleParseExpression
entryRuleParseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParseExpressionRule()); }
	iv_ruleParseExpression=ruleParseExpression
	{ $current=$iv_ruleParseExpression.current; }
	EOF;

// Rule ParseExpression
ruleParseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ParseExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getParseExpressionAccess().getParseExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getParseExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='outputType'
			{
				newLeafNode(otherlv_2, grammarAccess.getParseExpressionAccess().getOutputTypeKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParseExpressionAccess().getOutputTypeTypeEnumRuleCall_2_1_0());
					}
					lv_outputType_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParseExpressionRule());
						}
						set(
							$current,
							"outputType",
							lv_outputType_3_0,
							"org.xtext.example.tql.TQL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='expression'
		{
			newLeafNode(otherlv_4, grammarAccess.getParseExpressionAccess().getExpressionKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParseExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getParseExpressionAccess().getExpressionExpressionCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getParseExpressionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFloatConstantExpression
entryRuleFloatConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatConstantExpressionRule()); }
	iv_ruleFloatConstantExpression=ruleFloatConstantExpression
	{ $current=$iv_ruleFloatConstantExpression.current; }
	EOF;

// Rule FloatConstantExpression
ruleFloatConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FloatConstantExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getFloatConstantExpressionAccess().getFloatConstantExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFloatConstantExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getFloatConstantExpressionAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatConstantExpressionAccess().getValueEFloatParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatConstantExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.tql.TQL.EFloat");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getFloatConstantExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBinaryOperationExpression
entryRuleBinaryOperationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOperationExpressionRule()); }
	iv_ruleBinaryOperationExpression=ruleBinaryOperationExpression
	{ $current=$iv_ruleBinaryOperationExpression.current; }
	EOF;

// Rule BinaryOperationExpression
ruleBinaryOperationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BinaryOperationExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getBinaryOperationExpressionAccess().getBinaryOperationExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBinaryOperationExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='operation'
			{
				newLeafNode(otherlv_2, grammarAccess.getBinaryOperationExpressionAccess().getOperationKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBinaryOperationExpressionAccess().getOperationBinaryFunctionEnumRuleCall_2_1_0());
					}
					lv_operation_3_0=ruleBinaryFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBinaryOperationExpressionRule());
						}
						set(
							$current,
							"operation",
							lv_operation_3_0,
							"org.xtext.example.tql.TQL.BinaryFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='right'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinaryOperationExpressionAccess().getRightKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryOperationExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBinaryOperationExpressionAccess().getRightExpressionCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='left'
		{
			newLeafNode(otherlv_6, grammarAccess.getBinaryOperationExpressionAccess().getLeftKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinaryOperationExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBinaryOperationExpressionAccess().getLeftExpressionCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getBinaryOperationExpressionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getParameterAction_0(),
					$current);
			}
		)
		otherlv_1='Parameter'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getParameterKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='label'
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getLabelKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getLabelEStringParserRuleCall_3_1_0());
					}
					lv_label_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"label",
							lv_label_4_0,
							"org.xtext.example.tql.TQL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='type'
			{
				newLeafNode(otherlv_5, grammarAccess.getParameterAccess().getTypeKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeEnumRuleCall_4_1_0());
					}
					lv_type_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"type",
							lv_type_6_0,
							"org.xtext.example.tql.TQL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='string'
			{
				$current = grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='integer'
			{
				$current = grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='floats'
			{
				$current = grammarAccess.getTypeAccess().getFloatsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getFloatsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='sets'
			{
				$current = grammarAccess.getTypeAccess().getSetsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getSetsEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='DateTime'
			{
				$current = grammarAccess.getTypeAccess().getDateTimeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getDateTimeEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Null'
			{
				$current = grammarAccess.getTypeAccess().getNullEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getNullEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='bool'
			{
				$current = grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTypeAccess().getBoolEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule BooleanFunction
ruleBooleanFunction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='equal'
			{
				$current = grammarAccess.getBooleanFunctionAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanFunctionAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='notequal'
			{
				$current = grammarAccess.getBooleanFunctionAccess().getNotequalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanFunctionAccess().getNotequalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='smaller'
			{
				$current = grammarAccess.getBooleanFunctionAccess().getSmallerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBooleanFunctionAccess().getSmallerEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='greater'
			{
				$current = grammarAccess.getBooleanFunctionAccess().getGreaterEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBooleanFunctionAccess().getGreaterEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='or'
			{
				$current = grammarAccess.getBooleanFunctionAccess().getOrEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBooleanFunctionAccess().getOrEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='and'
			{
				$current = grammarAccess.getBooleanFunctionAccess().getAndEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBooleanFunctionAccess().getAndEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule BinaryFunction
ruleBinaryFunction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='mult'
			{
				$current = grammarAccess.getBinaryFunctionAccess().getMultEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryFunctionAccess().getMultEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='sum'
			{
				$current = grammarAccess.getBinaryFunctionAccess().getSumEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryFunctionAccess().getSumEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='divide'
			{
				$current = grammarAccess.getBinaryFunctionAccess().getDivideEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinaryFunctionAccess().getDivideEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='concat'
			{
				$current = grammarAccess.getBinaryFunctionAccess().getConcatEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBinaryFunctionAccess().getConcatEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
