/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.tql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.TQL");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		//TQL:
		//    (blocks += Block)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(blocks += Block)
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_0() { return cBlocksBlockParserRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Block");
		private final RuleCall cTable_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Block:
		//    Table_Impl
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Table_Impl
		public RuleCall getTable_ImplParserRuleCall() { return cTable_ImplParserRuleCall; }
	}
	public class Table_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Table_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSourceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSource_TableParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTargetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTarget_TableParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Table_Impl returns Table:
		//    ('source' Source_Table) |
		//    ('target' Target_Table)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('source' Source_Table) |
		//('target' Target_Table)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('source' Source_Table)
		public Group getGroup_0() { return cGroup_0; }
		
		//'source'
		public Keyword getSourceKeyword_0_0() { return cSourceKeyword_0_0; }
		
		//Source_Table
		public RuleCall getSource_TableParserRuleCall_0_1() { return cSource_TableParserRuleCall_0_1; }
		
		//('target' Target_Table)
		public Group getGroup_1() { return cGroup_1; }
		
		//'target'
		public Keyword getTargetKeyword_1_0() { return cTargetKeyword_1_0; }
		
		//Target_Table
		public RuleCall getTarget_TableParserRuleCall_1_1() { return cTarget_TableParserRuleCall_1_1; }
	}
	public class Source_TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Source_Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsTableFieldParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsTableFieldParserRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Source_Table returns SourceTable:
		//    name=EString
		//    '{'
		//        columns+=TableField ( "," columns+=TableField)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    columns+=TableField ( "," columns+=TableField)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_2_0() { return cColumnsTableFieldParserRuleCall_2_0; }
		
		//( "," columns+=TableField)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_3_1_0() { return cColumnsTableFieldParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class Target_TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Target_Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsTableFieldParserRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsTableFieldParserRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Target_Table returns TargetTable:
		//    name=EString
		//    '{'
		//        columns+=TableField ( "," columns+=TableField)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    columns+=TableField ( "," columns+=TableField)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_2_0() { return cColumnsTableFieldParserRuleCall_2_0; }
		
		//( "," columns+=TableField)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_3_1_0() { return cColumnsTableFieldParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TableFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.TableField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TableField returns TableField:
		//    name=EString
		//    ':'
		//        type=Type ( "," )
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//':'
		//    type=Type ( "," )
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_2_0() { return cTypeTypeEnumRuleCall_2_0; }
		
		//( "," )
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringConstantExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanConstantExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerConstantExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConditionalStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cParseExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFloatConstantExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBinaryOperationExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBooleanOperationExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		////
		////
		////Mapping returns Mapping:
		////    'mapping' source+=MappingSourceTable '->' target+=MappingTargetTable
		////    ('where' '(' where+=BooleanOperationExpression ')')?
		////    '{'
		////        fields+=MappingField ('|' Transformation)? (',' MappingField ('|' Transformation)?)*
		////    '}';
		////
		//Expression returns Expression:
		//    parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ConditionalStatement | ParseExpression | FloatConstantExpression | BinaryOperationExpression | BooleanOperationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ConditionalStatement | ParseExpression | FloatConstantExpression | BinaryOperationExpression | BooleanOperationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameterExpression
		public RuleCall getParameterExpressionParserRuleCall_0() { return cParameterExpressionParserRuleCall_0; }
		
		//StringConstantExpression
		public RuleCall getStringConstantExpressionParserRuleCall_1() { return cStringConstantExpressionParserRuleCall_1; }
		
		//BooleanConstantExpression
		public RuleCall getBooleanConstantExpressionParserRuleCall_2() { return cBooleanConstantExpressionParserRuleCall_2; }
		
		//IntegerConstantExpression
		public RuleCall getIntegerConstantExpressionParserRuleCall_3() { return cIntegerConstantExpressionParserRuleCall_3; }
		
		//InExpression
		public RuleCall getInExpressionParserRuleCall_4() { return cInExpressionParserRuleCall_4; }
		
		//ConditionalStatement
		public RuleCall getConditionalStatementParserRuleCall_5() { return cConditionalStatementParserRuleCall_5; }
		
		//ParseExpression
		public RuleCall getParseExpressionParserRuleCall_6() { return cParseExpressionParserRuleCall_6; }
		
		//FloatConstantExpression
		public RuleCall getFloatConstantExpressionParserRuleCall_7() { return cFloatConstantExpressionParserRuleCall_7; }
		
		//BinaryOperationExpression
		public RuleCall getBinaryOperationExpressionParserRuleCall_8() { return cBinaryOperationExpressionParserRuleCall_8; }
		
		//BooleanOperationExpression
		public RuleCall getBooleanOperationExpressionParserRuleCall_9() { return cBooleanOperationExpressionParserRuleCall_9; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.ConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringConstantExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstantExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerConstantExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatConstantExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConstantExpression returns ConstantExpression:
		//    StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringConstantExpression
		public RuleCall getStringConstantExpressionParserRuleCall_0() { return cStringConstantExpressionParserRuleCall_0; }
		
		//BooleanConstantExpression
		public RuleCall getBooleanConstantExpressionParserRuleCall_1() { return cBooleanConstantExpressionParserRuleCall_1; }
		
		//IntegerConstantExpression
		public RuleCall getIntegerConstantExpressionParserRuleCall_2() { return cIntegerConstantExpressionParserRuleCall_2; }
		
		//FloatConstantExpression
		public RuleCall getFloatConstantExpressionParserRuleCall_3() { return cFloatConstantExpressionParserRuleCall_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Statement");
		private final RuleCall cConditionalStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement returns Statement:
		//    ConditionalStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalStatement
		public RuleCall getConditionalStatementParserRuleCall() { return cConditionalStatementParserRuleCall; }
	}
	public class MappingSourceTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.MappingSourceTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingSourceTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColumnsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnsTableFieldParserRuleCall_5_0 = (RuleCall)cColumnsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cColumnsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cColumnsTableFieldParserRuleCall_6_1_0 = (RuleCall)cColumnsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MappingSourceTable returns MappingSourceTable:
		//    'MappingSourceTable'
		//    name=EString
		//    '{'
		//        'columns' '{' columns+=TableField ( "," columns+=TableField)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MappingSourceTable'
		//name=EString
		//'{'
		//    'columns' '{' columns+=TableField ( "," columns+=TableField)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'MappingSourceTable'
		public Keyword getMappingSourceTableKeyword_0() { return cMappingSourceTableKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'columns'
		public Keyword getColumnsKeyword_3() { return cColumnsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_5() { return cColumnsAssignment_5; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_5_0() { return cColumnsTableFieldParserRuleCall_5_0; }
		
		//( "," columns+=TableField)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_6_1() { return cColumnsAssignment_6_1; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_6_1_0() { return cColumnsTableFieldParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class MappingTargetTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.MappingTargetTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingTargetTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColumnsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnsTableFieldParserRuleCall_5_0 = (RuleCall)cColumnsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cColumnsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cColumnsTableFieldParserRuleCall_6_1_0 = (RuleCall)cColumnsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MappingTargetTable returns MappingTargetTable:
		//    'MappingTargetTable'
		//    name=EString
		//    '{'
		//        'columns' '{' columns+=TableField ( "," columns+=TableField)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MappingTargetTable'
		//name=EString
		//'{'
		//    'columns' '{' columns+=TableField ( "," columns+=TableField)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'MappingTargetTable'
		public Keyword getMappingTargetTableKeyword_0() { return cMappingTargetTableKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'columns'
		public Keyword getColumnsKeyword_3() { return cColumnsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_5() { return cColumnsAssignment_5; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_5_0() { return cColumnsTableFieldParserRuleCall_5_0; }
		
		//( "," columns+=TableField)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//columns+=TableField
		public Assignment getColumnsAssignment_6_1() { return cColumnsAssignment_6_1; }
		
		//TableField
		public RuleCall getColumnsTableFieldParserRuleCall_6_1_0() { return cColumnsTableFieldParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReturnTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnTypeTypeEnumRuleCall_3_0 = (RuleCall)cReturnTypeAssignment_3.eContents().get(0);
		private final Keyword cSelfTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSelfTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSelfTypeTypeEnumRuleCall_5_0 = (RuleCall)cSelfTypeAssignment_5.eContents().get(0);
		private final Keyword cLabelKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLabelEStringParserRuleCall_7_0 = (RuleCall)cLabelAssignment_7.eContents().get(0);
		private final Keyword cReturnStatementKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cReturnStatementAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReturnStatementExpressionParserRuleCall_10_0 = (RuleCall)cReturnStatementAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cReturnStatementAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cReturnStatementExpressionParserRuleCall_11_1_0 = (RuleCall)cReturnStatementAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cParameterKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cParameterAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_13_2_0 = (RuleCall)cParameterAssignment_13_2.eContents().get(0);
		private final Group cGroup_13_3 = (Group)cGroup_13.eContents().get(3);
		private final Keyword cCommaKeyword_13_3_0 = (Keyword)cGroup_13_3.eContents().get(0);
		private final Assignment cParameterAssignment_13_3_1 = (Assignment)cGroup_13_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_13_3_1_0 = (RuleCall)cParameterAssignment_13_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Transformation returns Transformation:
		//    'Transformation'
		//    '{'
		//        'returnType' returnType=Type
		//        'selfType' selfType=Type
		//        'label' label=EString
		//        'returnStatement' '{' returnStatement+=Expression ( "," returnStatement+=Expression)* '}'
		//        ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transformation'
		//'{'
		//    'returnType' returnType=Type
		//    'selfType' selfType=Type
		//    'label' label=EString
		//    'returnStatement' '{' returnStatement+=Expression ( "," returnStatement+=Expression)* '}'
		//    ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Transformation'
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'returnType'
		public Keyword getReturnTypeKeyword_2() { return cReturnTypeKeyword_2; }
		
		//returnType=Type
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }
		
		//Type
		public RuleCall getReturnTypeTypeEnumRuleCall_3_0() { return cReturnTypeTypeEnumRuleCall_3_0; }
		
		//'selfType'
		public Keyword getSelfTypeKeyword_4() { return cSelfTypeKeyword_4; }
		
		//selfType=Type
		public Assignment getSelfTypeAssignment_5() { return cSelfTypeAssignment_5; }
		
		//Type
		public RuleCall getSelfTypeTypeEnumRuleCall_5_0() { return cSelfTypeTypeEnumRuleCall_5_0; }
		
		//'label'
		public Keyword getLabelKeyword_6() { return cLabelKeyword_6; }
		
		//label=EString
		public Assignment getLabelAssignment_7() { return cLabelAssignment_7; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_7_0() { return cLabelEStringParserRuleCall_7_0; }
		
		//'returnStatement'
		public Keyword getReturnStatementKeyword_8() { return cReturnStatementKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//returnStatement+=Expression
		public Assignment getReturnStatementAssignment_10() { return cReturnStatementAssignment_10; }
		
		//Expression
		public RuleCall getReturnStatementExpressionParserRuleCall_10_0() { return cReturnStatementExpressionParserRuleCall_10_0; }
		
		//( "," returnStatement+=Expression)*
		public Group getGroup_11() { return cGroup_11; }
		
		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//returnStatement+=Expression
		public Assignment getReturnStatementAssignment_11_1() { return cReturnStatementAssignment_11_1; }
		
		//Expression
		public RuleCall getReturnStatementExpressionParserRuleCall_11_1_0() { return cReturnStatementExpressionParserRuleCall_11_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		public Group getGroup_13() { return cGroup_13; }
		
		//'parameter'
		public Keyword getParameterKeyword_13_0() { return cParameterKeyword_13_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_13_1() { return cLeftCurlyBracketKeyword_13_1; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_13_2() { return cParameterAssignment_13_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_13_2_0() { return cParameterParameterParserRuleCall_13_2_0; }
		
		//( "," parameter+=Parameter)*
		public Group getGroup_13_3() { return cGroup_13_3; }
		
		//","
		public Keyword getCommaKeyword_13_3_0() { return cCommaKeyword_13_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_13_3_1() { return cParameterAssignment_13_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_13_3_1_0() { return cParameterParameterParserRuleCall_13_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13_4() { return cRightCurlyBracketKeyword_13_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class MappingFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.MappingField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSouceFieldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSouceFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSouceFieldTableFieldCrossReference_3_0 = (CrossReference)cSouceFieldAssignment_3.eContents().get(0);
		private final RuleCall cSouceFieldTableFieldEStringParserRuleCall_3_0_1 = (RuleCall)cSouceFieldTableFieldCrossReference_3_0.eContents().get(1);
		private final Keyword cTargetFieldKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetFieldAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetFieldTableFieldCrossReference_5_0 = (CrossReference)cTargetFieldAssignment_5.eContents().get(0);
		private final RuleCall cTargetFieldTableFieldEStringParserRuleCall_5_0_1 = (RuleCall)cTargetFieldTableFieldCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCallsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCallsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCallsTransformationCallParserRuleCall_6_2_0 = (RuleCall)cCallsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cCallsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cCallsTransformationCallParserRuleCall_6_3_1_0 = (RuleCall)cCallsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MappingField returns MappingField:
		//    'MappingField'
		//    '{'
		//        'souceField' souceField=[TableField|EString]
		//        'targetField' targetField=[TableField|EString]
		//        ('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MappingField'
		//'{'
		//    'souceField' souceField=[TableField|EString]
		//    'targetField' targetField=[TableField|EString]
		//    ('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'MappingField'
		public Keyword getMappingFieldKeyword_0() { return cMappingFieldKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'souceField'
		public Keyword getSouceFieldKeyword_2() { return cSouceFieldKeyword_2; }
		
		//souceField=[TableField|EString]
		public Assignment getSouceFieldAssignment_3() { return cSouceFieldAssignment_3; }
		
		//[TableField|EString]
		public CrossReference getSouceFieldTableFieldCrossReference_3_0() { return cSouceFieldTableFieldCrossReference_3_0; }
		
		//EString
		public RuleCall getSouceFieldTableFieldEStringParserRuleCall_3_0_1() { return cSouceFieldTableFieldEStringParserRuleCall_3_0_1; }
		
		//'targetField'
		public Keyword getTargetFieldKeyword_4() { return cTargetFieldKeyword_4; }
		
		//targetField=[TableField|EString]
		public Assignment getTargetFieldAssignment_5() { return cTargetFieldAssignment_5; }
		
		//[TableField|EString]
		public CrossReference getTargetFieldTableFieldCrossReference_5_0() { return cTargetFieldTableFieldCrossReference_5_0; }
		
		//EString
		public RuleCall getTargetFieldTableFieldEStringParserRuleCall_5_0_1() { return cTargetFieldTableFieldEStringParserRuleCall_5_0_1; }
		
		//('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'calls'
		public Keyword getCallsKeyword_6_0() { return cCallsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//calls+=TransformationCall
		public Assignment getCallsAssignment_6_2() { return cCallsAssignment_6_2; }
		
		//TransformationCall
		public RuleCall getCallsTransformationCallParserRuleCall_6_2_0() { return cCallsTransformationCallParserRuleCall_6_2_0; }
		
		//( "," calls+=TransformationCall)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//calls+=TransformationCall
		public Assignment getCallsAssignment_6_3_1() { return cCallsAssignment_6_3_1; }
		
		//TransformationCall
		public RuleCall getCallsTransformationCallParserRuleCall_6_3_1_0() { return cCallsTransformationCallParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BooleanOperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.BooleanOperationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanOperationExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperationBooleanFunctionEnumRuleCall_2_1_0 = (RuleCall)cOperationAssignment_2_1.eContents().get(0);
		private final Keyword cRightKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightExpressionCrossReference_4_0 = (CrossReference)cRightAssignment_4.eContents().get(0);
		private final RuleCall cRightExpressionEStringParserRuleCall_4_0_1 = (RuleCall)cRightExpressionCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLeftAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cLeftExpressionCrossReference_6_0 = (CrossReference)cLeftAssignment_6.eContents().get(0);
		private final RuleCall cLeftExpressionEStringParserRuleCall_6_0_1 = (RuleCall)cLeftExpressionCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BooleanOperationExpression returns BooleanOperationExpression:
		//    'BooleanOperationExpression'
		//    '{'
		//        ('operation' operation=BooleanFunction)?
		//        'right' right=[Expression|EString]
		//        'left' left=[Expression|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BooleanOperationExpression'
		//'{'
		//    ('operation' operation=BooleanFunction)?
		//    'right' right=[Expression|EString]
		//    'left' left=[Expression|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BooleanOperationExpression'
		public Keyword getBooleanOperationExpressionKeyword_0() { return cBooleanOperationExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('operation' operation=BooleanFunction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'operation'
		public Keyword getOperationKeyword_2_0() { return cOperationKeyword_2_0; }
		
		//operation=BooleanFunction
		public Assignment getOperationAssignment_2_1() { return cOperationAssignment_2_1; }
		
		//BooleanFunction
		public RuleCall getOperationBooleanFunctionEnumRuleCall_2_1_0() { return cOperationBooleanFunctionEnumRuleCall_2_1_0; }
		
		//'right'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//right=[Expression|EString]
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//[Expression|EString]
		public CrossReference getRightExpressionCrossReference_4_0() { return cRightExpressionCrossReference_4_0; }
		
		//EString
		public RuleCall getRightExpressionEStringParserRuleCall_4_0_1() { return cRightExpressionEStringParserRuleCall_4_0_1; }
		
		//'left'
		public Keyword getLeftKeyword_5() { return cLeftKeyword_5; }
		
		//left=[Expression|EString]
		public Assignment getLeftAssignment_6() { return cLeftAssignment_6; }
		
		//[Expression|EString]
		public CrossReference getLeftExpressionCrossReference_6_0() { return cLeftExpressionCrossReference_6_0; }
		
		//EString
		public RuleCall getLeftExpressionEStringParserRuleCall_6_0_1() { return cLeftExpressionEStringParserRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TransformationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.TransformationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTransformationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransformationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTransformationTransformationCrossReference_3_0 = (CrossReference)cTransformationAssignment_3.eContents().get(0);
		private final RuleCall cTransformationTransformationEStringParserRuleCall_3_0_1 = (RuleCall)cTransformationTransformationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cParametersTableFieldCrossReference_4_2_0 = (CrossReference)cParametersAssignment_4_2.eContents().get(0);
		private final RuleCall cParametersTableFieldEStringParserRuleCall_4_2_0_1 = (RuleCall)cParametersTableFieldCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cParametersTableFieldCrossReference_4_3_1_0 = (CrossReference)cParametersAssignment_4_3_1.eContents().get(0);
		private final RuleCall cParametersTableFieldEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cParametersTableFieldCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TransformationCall returns TransformationCall:
		//    'TransformationCall'
		//    '{'
		//        'transformation' transformation=[Transformation|EString]
		//        ('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TransformationCall'
		//'{'
		//    'transformation' transformation=[Transformation|EString]
		//    ('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'TransformationCall'
		public Keyword getTransformationCallKeyword_0() { return cTransformationCallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'transformation'
		public Keyword getTransformationKeyword_2() { return cTransformationKeyword_2; }
		
		//transformation=[Transformation|EString]
		public Assignment getTransformationAssignment_3() { return cTransformationAssignment_3; }
		
		//[Transformation|EString]
		public CrossReference getTransformationTransformationCrossReference_3_0() { return cTransformationTransformationCrossReference_3_0; }
		
		//EString
		public RuleCall getTransformationTransformationEStringParserRuleCall_3_0_1() { return cTransformationTransformationEStringParserRuleCall_3_0_1; }
		
		//('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//parameters+=[TableField|EString]
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }
		
		//[TableField|EString]
		public CrossReference getParametersTableFieldCrossReference_4_2_0() { return cParametersTableFieldCrossReference_4_2_0; }
		
		//EString
		public RuleCall getParametersTableFieldEStringParserRuleCall_4_2_0_1() { return cParametersTableFieldEStringParserRuleCall_4_2_0_1; }
		
		//( "," parameters+=[TableField|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameters+=[TableField|EString]
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }
		
		//[TableField|EString]
		public CrossReference getParametersTableFieldCrossReference_4_3_1_0() { return cParametersTableFieldCrossReference_4_3_1_0; }
		
		//EString
		public RuleCall getParametersTableFieldEStringParserRuleCall_4_3_1_0_1() { return cParametersTableFieldEStringParserRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ParameterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.parameterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParameterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParameterParameterCrossReference_3_0 = (CrossReference)cParameterAssignment_3.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_3_0_1 = (RuleCall)cParameterParameterCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//parameterExpression returns parameterExpression:
		//    'parameterExpression'
		//    '{'
		//        'parameter' parameter=[Parameter|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'parameterExpression'
		//'{'
		//    'parameter' parameter=[Parameter|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'parameterExpression'
		public Keyword getParameterExpressionKeyword_0() { return cParameterExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'parameter'
		public Keyword getParameterKeyword_2() { return cParameterKeyword_2; }
		
		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }
		
		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_3_0() { return cParameterParameterCrossReference_3_0; }
		
		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_3_0_1() { return cParameterParameterEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StringConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.StringConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringConstantExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringConstantExpression returns StringConstantExpression:
		//    'StringConstantExpression'
		//    '{'
		//        'value' value=EString
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StringConstantExpression'
		//'{'
		//    'value' value=EString
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'StringConstantExpression'
		public Keyword getStringConstantExpressionKeyword_0() { return cStringConstantExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BooleanConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.BooleanConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValueValueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Keyword cBooleanConstantExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanConstantExpression returns BooleanConstantExpression:
		//    value?='value'
		//    'BooleanConstantExpression'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//value?='value'
		//'BooleanConstantExpression'
		public Group getGroup() { return cGroup; }
		
		//value?='value'
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//'value'
		public Keyword getValueValueKeyword_0_0() { return cValueValueKeyword_0_0; }
		
		//'BooleanConstantExpression'
		public Keyword getBooleanConstantExpressionKeyword_1() { return cBooleanConstantExpressionKeyword_1; }
	}
	public class IntegerConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.IntegerConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerConstantExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEIntParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntegerConstantExpression returns IntegerConstantExpression:
		//    'IntegerConstantExpression'
		//    '{'
		//        'value' value=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntegerConstantExpression'
		//'{'
		//    'value' value=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'IntegerConstantExpression'
		public Keyword getIntegerConstantExpressionKeyword_0() { return cIntegerConstantExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EInt
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_0() { return cValueEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.InExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStatementKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStatementExpressionCrossReference_2_1_0 = (CrossReference)cStatementAssignment_2_1.eContents().get(0);
		private final RuleCall cStatementExpressionEStringParserRuleCall_2_1_0_1 = (RuleCall)cStatementExpressionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cConstantSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstantSetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cConstantSetConstantExpressionCrossReference_5_0 = (CrossReference)cConstantSetAssignment_5.eContents().get(0);
		private final RuleCall cConstantSetConstantExpressionEStringParserRuleCall_5_0_1 = (RuleCall)cConstantSetConstantExpressionCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstantSetAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cConstantSetConstantExpressionCrossReference_6_1_0 = (CrossReference)cConstantSetAssignment_6_1.eContents().get(0);
		private final RuleCall cConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1 = (RuleCall)cConstantSetConstantExpressionCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//InExpression returns InExpression:
		//    'InExpression'
		//    '{'
		//        ('statement' statement=[Expression|EString])?
		//        'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InExpression'
		//'{'
		//    ('statement' statement=[Expression|EString])?
		//    'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'InExpression'
		public Keyword getInExpressionKeyword_0() { return cInExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('statement' statement=[Expression|EString])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'statement'
		public Keyword getStatementKeyword_2_0() { return cStatementKeyword_2_0; }
		
		//statement=[Expression|EString]
		public Assignment getStatementAssignment_2_1() { return cStatementAssignment_2_1; }
		
		//[Expression|EString]
		public CrossReference getStatementExpressionCrossReference_2_1_0() { return cStatementExpressionCrossReference_2_1_0; }
		
		//EString
		public RuleCall getStatementExpressionEStringParserRuleCall_2_1_0_1() { return cStatementExpressionEStringParserRuleCall_2_1_0_1; }
		
		//'constantSet'
		public Keyword getConstantSetKeyword_3() { return cConstantSetKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//constantSet+=[ConstantExpression|EString]
		public Assignment getConstantSetAssignment_5() { return cConstantSetAssignment_5; }
		
		//[ConstantExpression|EString]
		public CrossReference getConstantSetConstantExpressionCrossReference_5_0() { return cConstantSetConstantExpressionCrossReference_5_0; }
		
		//EString
		public RuleCall getConstantSetConstantExpressionEStringParserRuleCall_5_0_1() { return cConstantSetConstantExpressionEStringParserRuleCall_5_0_1; }
		
		//( "," constantSet+=[ConstantExpression|EString])*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//constantSet+=[ConstantExpression|EString]
		public Assignment getConstantSetAssignment_6_1() { return cConstantSetAssignment_6_1; }
		
		//[ConstantExpression|EString]
		public CrossReference getConstantSetConstantExpressionCrossReference_6_1_0() { return cConstantSetConstantExpressionCrossReference_6_1_0; }
		
		//EString
		public RuleCall getConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1() { return cConstantSetConstantExpressionEStringParserRuleCall_6_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.ConditionalStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionalStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cConditionExpressionCrossReference_3_0 = (CrossReference)cConditionAssignment_3.eContents().get(0);
		private final RuleCall cConditionExpressionEStringParserRuleCall_3_0_1 = (RuleCall)cConditionExpressionCrossReference_3_0.eContents().get(1);
		private final Keyword cBooleanoperationexpressionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBooleanoperationexpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cBooleanoperationexpressionBooleanOperationExpressionCrossReference_5_0 = (CrossReference)cBooleanoperationexpressionAssignment_5.eContents().get(0);
		private final RuleCall cBooleanoperationexpressionBooleanOperationExpressionEStringParserRuleCall_5_0_1 = (RuleCall)cBooleanoperationexpressionBooleanOperationExpressionCrossReference_5_0.eContents().get(1);
		private final Keyword cIfBodyKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIfBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIfBodyStatementParserRuleCall_8_0 = (RuleCall)cIfBodyAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cIfBodyAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cIfBodyStatementParserRuleCall_9_1_0 = (RuleCall)cIfBodyAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cElseBodyKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cElseBodyAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cElseBodyStatementParserRuleCall_13_0 = (RuleCall)cElseBodyAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCommaKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cElseBodyAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cElseBodyStatementParserRuleCall_14_1_0 = (RuleCall)cElseBodyAssignment_14_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//ConditionalStatement returns ConditionalStatement:
		//    'ConditionalStatement'
		//    '{'
		//        'condition' condition=[Expression|EString]
		//        'booleanoperationexpression' booleanoperationexpression=[BooleanOperationExpression|EString]
		//        'ifBody' '{' ifBody+=Statement ( "," ifBody+=Statement)* '}'
		//        'elseBody' '{' elseBody+=Statement ( "," elseBody+=Statement)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ConditionalStatement'
		//'{'
		//    'condition' condition=[Expression|EString]
		//    'booleanoperationexpression' booleanoperationexpression=[BooleanOperationExpression|EString]
		//    'ifBody' '{' ifBody+=Statement ( "," ifBody+=Statement)* '}'
		//    'elseBody' '{' elseBody+=Statement ( "," elseBody+=Statement)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ConditionalStatement'
		public Keyword getConditionalStatementKeyword_0() { return cConditionalStatementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//condition=[Expression|EString]
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//[Expression|EString]
		public CrossReference getConditionExpressionCrossReference_3_0() { return cConditionExpressionCrossReference_3_0; }
		
		//EString
		public RuleCall getConditionExpressionEStringParserRuleCall_3_0_1() { return cConditionExpressionEStringParserRuleCall_3_0_1; }
		
		//'booleanoperationexpression'
		public Keyword getBooleanoperationexpressionKeyword_4() { return cBooleanoperationexpressionKeyword_4; }
		
		//booleanoperationexpression=[BooleanOperationExpression|EString]
		public Assignment getBooleanoperationexpressionAssignment_5() { return cBooleanoperationexpressionAssignment_5; }
		
		//[BooleanOperationExpression|EString]
		public CrossReference getBooleanoperationexpressionBooleanOperationExpressionCrossReference_5_0() { return cBooleanoperationexpressionBooleanOperationExpressionCrossReference_5_0; }
		
		//EString
		public RuleCall getBooleanoperationexpressionBooleanOperationExpressionEStringParserRuleCall_5_0_1() { return cBooleanoperationexpressionBooleanOperationExpressionEStringParserRuleCall_5_0_1; }
		
		//'ifBody'
		public Keyword getIfBodyKeyword_6() { return cIfBodyKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//ifBody+=Statement
		public Assignment getIfBodyAssignment_8() { return cIfBodyAssignment_8; }
		
		//Statement
		public RuleCall getIfBodyStatementParserRuleCall_8_0() { return cIfBodyStatementParserRuleCall_8_0; }
		
		//( "," ifBody+=Statement)*
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//ifBody+=Statement
		public Assignment getIfBodyAssignment_9_1() { return cIfBodyAssignment_9_1; }
		
		//Statement
		public RuleCall getIfBodyStatementParserRuleCall_9_1_0() { return cIfBodyStatementParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//'elseBody'
		public Keyword getElseBodyKeyword_11() { return cElseBodyKeyword_11; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }
		
		//elseBody+=Statement
		public Assignment getElseBodyAssignment_13() { return cElseBodyAssignment_13; }
		
		//Statement
		public RuleCall getElseBodyStatementParserRuleCall_13_0() { return cElseBodyStatementParserRuleCall_13_0; }
		
		//( "," elseBody+=Statement)*
		public Group getGroup_14() { return cGroup_14; }
		
		//","
		public Keyword getCommaKeyword_14_0() { return cCommaKeyword_14_0; }
		
		//elseBody+=Statement
		public Assignment getElseBodyAssignment_14_1() { return cElseBodyAssignment_14_1; }
		
		//Statement
		public RuleCall getElseBodyStatementParserRuleCall_14_1_0() { return cElseBodyStatementParserRuleCall_14_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class ParseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.ParseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParseExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOutputTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOutputTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOutputTypeTypeEnumRuleCall_2_1_0 = (RuleCall)cOutputTypeAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExpressionExpressionCrossReference_4_0 = (CrossReference)cExpressionAssignment_4.eContents().get(0);
		private final RuleCall cExpressionExpressionEStringParserRuleCall_4_0_1 = (RuleCall)cExpressionExpressionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParseExpression returns ParseExpression:
		//    'ParseExpression'
		//    '{'
		//        ('outputType' outputType=Type)?
		//        'expression' expression=[Expression|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ParseExpression'
		//'{'
		//    ('outputType' outputType=Type)?
		//    'expression' expression=[Expression|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ParseExpression'
		public Keyword getParseExpressionKeyword_0() { return cParseExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('outputType' outputType=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'outputType'
		public Keyword getOutputTypeKeyword_2_0() { return cOutputTypeKeyword_2_0; }
		
		//outputType=Type
		public Assignment getOutputTypeAssignment_2_1() { return cOutputTypeAssignment_2_1; }
		
		//Type
		public RuleCall getOutputTypeTypeEnumRuleCall_2_1_0() { return cOutputTypeTypeEnumRuleCall_2_1_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=[Expression|EString]
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//[Expression|EString]
		public CrossReference getExpressionExpressionCrossReference_4_0() { return cExpressionExpressionCrossReference_4_0; }
		
		//EString
		public RuleCall getExpressionExpressionEStringParserRuleCall_4_0_1() { return cExpressionExpressionEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FloatConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.FloatConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatConstantExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEFloatParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FloatConstantExpression returns FloatConstantExpression:
		//    'FloatConstantExpression'
		//    '{'
		//        'value' value=EFloat
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FloatConstantExpression'
		//'{'
		//    'value' value=EFloat
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'FloatConstantExpression'
		public Keyword getFloatConstantExpressionKeyword_0() { return cFloatConstantExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EFloat
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_3_0() { return cValueEFloatParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BinaryOperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.BinaryOperationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaryOperationExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperationBinaryFunctionEnumRuleCall_2_1_0 = (RuleCall)cOperationAssignment_2_1.eContents().get(0);
		private final Keyword cRightKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightExpressionCrossReference_4_0 = (CrossReference)cRightAssignment_4.eContents().get(0);
		private final RuleCall cRightExpressionEStringParserRuleCall_4_0_1 = (RuleCall)cRightExpressionCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLeftAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cLeftExpressionCrossReference_6_0 = (CrossReference)cLeftAssignment_6.eContents().get(0);
		private final RuleCall cLeftExpressionEStringParserRuleCall_6_0_1 = (RuleCall)cLeftExpressionCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BinaryOperationExpression returns BinaryOperationExpression:
		//    'BinaryOperationExpression'
		//    '{'
		//        ('operation' operation=BinaryFunction)?
		//        'right' right=[Expression|EString]
		//        'left' left=[Expression|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BinaryOperationExpression'
		//'{'
		//    ('operation' operation=BinaryFunction)?
		//    'right' right=[Expression|EString]
		//    'left' left=[Expression|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BinaryOperationExpression'
		public Keyword getBinaryOperationExpressionKeyword_0() { return cBinaryOperationExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('operation' operation=BinaryFunction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'operation'
		public Keyword getOperationKeyword_2_0() { return cOperationKeyword_2_0; }
		
		//operation=BinaryFunction
		public Assignment getOperationAssignment_2_1() { return cOperationAssignment_2_1; }
		
		//BinaryFunction
		public RuleCall getOperationBinaryFunctionEnumRuleCall_2_1_0() { return cOperationBinaryFunctionEnumRuleCall_2_1_0; }
		
		//'right'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//right=[Expression|EString]
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//[Expression|EString]
		public CrossReference getRightExpressionCrossReference_4_0() { return cRightExpressionCrossReference_4_0; }
		
		//EString
		public RuleCall getRightExpressionEStringParserRuleCall_4_0_1() { return cRightExpressionEStringParserRuleCall_4_0_1; }
		
		//'left'
		public Keyword getLeftKeyword_5() { return cLeftKeyword_5; }
		
		//left=[Expression|EString]
		public Assignment getLeftAssignment_6() { return cLeftAssignment_6; }
		
		//[Expression|EString]
		public CrossReference getLeftExpressionCrossReference_6_0() { return cLeftExpressionCrossReference_6_0; }
		
		//EString
		public RuleCall getLeftExpressionEStringParserRuleCall_6_0_1() { return cLeftExpressionEStringParserRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabelKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLabelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_3_1_0 = (RuleCall)cLabelAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Parameter returns Parameter:
		//    {Parameter}
		//    'Parameter'
		//    '{'
		//        ('label' label=EString)?
		//        ('type' type=Type)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter}
		//'Parameter'
		//'{'
		//    ('label' label=EString)?
		//    ('type' type=Type)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'Parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('label' label=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'label'
		public Keyword getLabelKeyword_3_0() { return cLabelKeyword_3_0; }
		
		//label=EString
		public Assignment getLabelAssignment_3_1() { return cLabelAssignment_3_1; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_3_1_0() { return cLabelEStringParserRuleCall_3_1_0; }
		
		//('type' type=Type)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_4_1_0() { return cTypeTypeEnumRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatsFloatsKeyword_2_0 = (Keyword)cFloatsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSetsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSetsSetsKeyword_3_0 = (Keyword)cSetsEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateTimeDateTimeKeyword_4_0 = (Keyword)cDateTimeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNullNullKeyword_5_0 = (Keyword)cNullEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBoolBoolKeyword_6_0 = (Keyword)cBoolEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Type returns Type:
		//                string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';
		public EnumRule getRule() { return rule; }
		
		//string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string = 'string'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//integer = 'integer'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		//'integer'
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }
		
		//floats = 'floats'
		public EnumLiteralDeclaration getFloatsEnumLiteralDeclaration_2() { return cFloatsEnumLiteralDeclaration_2; }
		
		//'floats'
		public Keyword getFloatsFloatsKeyword_2_0() { return cFloatsFloatsKeyword_2_0; }
		
		//sets = 'sets'
		public EnumLiteralDeclaration getSetsEnumLiteralDeclaration_3() { return cSetsEnumLiteralDeclaration_3; }
		
		//'sets'
		public Keyword getSetsSetsKeyword_3_0() { return cSetsSetsKeyword_3_0; }
		
		//DateTime = 'DateTime'
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_4() { return cDateTimeEnumLiteralDeclaration_4; }
		
		//'DateTime'
		public Keyword getDateTimeDateTimeKeyword_4_0() { return cDateTimeDateTimeKeyword_4_0; }
		
		//Null = 'Null'
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration_5() { return cNullEnumLiteralDeclaration_5; }
		
		//'Null'
		public Keyword getNullNullKeyword_5_0() { return cNullNullKeyword_5_0; }
		
		//bool = 'bool'
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_6() { return cBoolEnumLiteralDeclaration_6; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_6_0() { return cBoolBoolKeyword_6_0; }
	}
	public class BooleanFunctionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.BooleanFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotequalNotequalKeyword_1_0 = (Keyword)cNotequalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSmallerSmallerKeyword_2_0 = (Keyword)cSmallerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOrOrKeyword_4_0 = (Keyword)cOrEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAndAndKeyword_5_0 = (Keyword)cAndEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BooleanFunction returns BooleanFunction:
		//                equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';
		public EnumRule getRule() { return rule; }
		
		//equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal = 'equal'
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_0_0() { return cEqualEqualKeyword_0_0; }
		
		//notequal = 'notequal'
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_1() { return cNotequalEnumLiteralDeclaration_1; }
		
		//'notequal'
		public Keyword getNotequalNotequalKeyword_1_0() { return cNotequalNotequalKeyword_1_0; }
		
		//smaller = 'smaller'
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_2() { return cSmallerEnumLiteralDeclaration_2; }
		
		//'smaller'
		public Keyword getSmallerSmallerKeyword_2_0() { return cSmallerSmallerKeyword_2_0; }
		
		//greater = 'greater'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }
		
		//'greater'
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }
		
		//or = 'or'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_4() { return cOrEnumLiteralDeclaration_4; }
		
		//'or'
		public Keyword getOrOrKeyword_4_0() { return cOrOrKeyword_4_0; }
		
		//and = 'and'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_5() { return cAndEnumLiteralDeclaration_5; }
		
		//'and'
		public Keyword getAndAndKeyword_5_0() { return cAndAndKeyword_5_0; }
	}
	public class BinaryFunctionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tql.TQL.BinaryFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultMultKeyword_0_0 = (Keyword)cMultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSumSumKeyword_1_0 = (Keyword)cSumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivideDivideKeyword_2_0 = (Keyword)cDivideEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cConcatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cConcatConcatKeyword_3_0 = (Keyword)cConcatEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BinaryFunction returns BinaryFunction:
		//                mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat';
		public EnumRule getRule() { return rule; }
		
		//mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mult = 'mult'
		public EnumLiteralDeclaration getMultEnumLiteralDeclaration_0() { return cMultEnumLiteralDeclaration_0; }
		
		//'mult'
		public Keyword getMultMultKeyword_0_0() { return cMultMultKeyword_0_0; }
		
		//sum = 'sum'
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_1() { return cSumEnumLiteralDeclaration_1; }
		
		//'sum'
		public Keyword getSumSumKeyword_1_0() { return cSumSumKeyword_1_0; }
		
		//divide = 'divide'
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_2() { return cDivideEnumLiteralDeclaration_2; }
		
		//'divide'
		public Keyword getDivideDivideKeyword_2_0() { return cDivideDivideKeyword_2_0; }
		
		//concat = 'concat'
		public EnumLiteralDeclaration getConcatEnumLiteralDeclaration_3() { return cConcatEnumLiteralDeclaration_3; }
		
		//'concat'
		public Keyword getConcatConcatKeyword_3_0() { return cConcatConcatKeyword_3_0; }
	}
	
	private final TQLElements pTQL;
	private final BlockElements pBlock;
	private final Table_ImplElements pTable_Impl;
	private final Source_TableElements pSource_Table;
	private final Target_TableElements pTarget_Table;
	private final TableFieldElements pTableField;
	private final ExpressionElements pExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final StatementElements pStatement;
	private final MappingSourceTableElements pMappingSourceTable;
	private final MappingTargetTableElements pMappingTargetTable;
	private final TransformationElements pTransformation;
	private final EStringElements pEString;
	private final TypeElements eType;
	private final MappingFieldElements pMappingField;
	private final BooleanOperationExpressionElements pBooleanOperationExpression;
	private final TransformationCallElements pTransformationCall;
	private final BooleanFunctionElements eBooleanFunction;
	private final ParameterExpressionElements pParameterExpression;
	private final StringConstantExpressionElements pStringConstantExpression;
	private final BooleanConstantExpressionElements pBooleanConstantExpression;
	private final IntegerConstantExpressionElements pIntegerConstantExpression;
	private final InExpressionElements pInExpression;
	private final ConditionalStatementElements pConditionalStatement;
	private final ParseExpressionElements pParseExpression;
	private final FloatConstantExpressionElements pFloatConstantExpression;
	private final BinaryOperationExpressionElements pBinaryOperationExpression;
	private final ParameterElements pParameter;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final BinaryFunctionElements eBinaryFunction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTQL = new TQLElements();
		this.pBlock = new BlockElements();
		this.pTable_Impl = new Table_ImplElements();
		this.pSource_Table = new Source_TableElements();
		this.pTarget_Table = new Target_TableElements();
		this.pTableField = new TableFieldElements();
		this.pExpression = new ExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pStatement = new StatementElements();
		this.pMappingSourceTable = new MappingSourceTableElements();
		this.pMappingTargetTable = new MappingTargetTableElements();
		this.pTransformation = new TransformationElements();
		this.pEString = new EStringElements();
		this.eType = new TypeElements();
		this.pMappingField = new MappingFieldElements();
		this.pBooleanOperationExpression = new BooleanOperationExpressionElements();
		this.pTransformationCall = new TransformationCallElements();
		this.eBooleanFunction = new BooleanFunctionElements();
		this.pParameterExpression = new ParameterExpressionElements();
		this.pStringConstantExpression = new StringConstantExpressionElements();
		this.pBooleanConstantExpression = new BooleanConstantExpressionElements();
		this.pIntegerConstantExpression = new IntegerConstantExpressionElements();
		this.pInExpression = new InExpressionElements();
		this.pConditionalStatement = new ConditionalStatementElements();
		this.pParseExpression = new ParseExpressionElements();
		this.pFloatConstantExpression = new FloatConstantExpressionElements();
		this.pBinaryOperationExpression = new BinaryOperationExpressionElements();
		this.pParameter = new ParameterElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.eBinaryFunction = new BinaryFunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.tql.TQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TQL:
	//    (blocks += Block)
	//;
	public TQLElements getTQLAccess() {
		return pTQL;
	}
	
	public ParserRule getTQLRule() {
		return getTQLAccess().getRule();
	}
	
	//Block:
	//    Table_Impl
	//;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Table_Impl returns Table:
	//    ('source' Source_Table) |
	//    ('target' Target_Table)
	//    ;
	public Table_ImplElements getTable_ImplAccess() {
		return pTable_Impl;
	}
	
	public ParserRule getTable_ImplRule() {
		return getTable_ImplAccess().getRule();
	}
	
	//Source_Table returns SourceTable:
	//    name=EString
	//    '{'
	//        columns+=TableField ( "," columns+=TableField)*
	//    '}';
	public Source_TableElements getSource_TableAccess() {
		return pSource_Table;
	}
	
	public ParserRule getSource_TableRule() {
		return getSource_TableAccess().getRule();
	}
	
	//Target_Table returns TargetTable:
	//    name=EString
	//    '{'
	//        columns+=TableField ( "," columns+=TableField)*
	//    '}';
	public Target_TableElements getTarget_TableAccess() {
		return pTarget_Table;
	}
	
	public ParserRule getTarget_TableRule() {
		return getTarget_TableAccess().getRule();
	}
	
	//TableField returns TableField:
	//    name=EString
	//    ':'
	//        type=Type ( "," )
	//    ;
	public TableFieldElements getTableFieldAccess() {
		return pTableField;
	}
	
	public ParserRule getTableFieldRule() {
		return getTableFieldAccess().getRule();
	}
	
	////
	////
	////Mapping returns Mapping:
	////    'mapping' source+=MappingSourceTable '->' target+=MappingTargetTable
	////    ('where' '(' where+=BooleanOperationExpression ')')?
	////    '{'
	////        fields+=MappingField ('|' Transformation)? (',' MappingField ('|' Transformation)?)*
	////    '}';
	////
	//Expression returns Expression:
	//    parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ConditionalStatement | ParseExpression | FloatConstantExpression | BinaryOperationExpression | BooleanOperationExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConstantExpression returns ConstantExpression:
	//    StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//Statement returns Statement:
	//    ConditionalStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//MappingSourceTable returns MappingSourceTable:
	//    'MappingSourceTable'
	//    name=EString
	//    '{'
	//        'columns' '{' columns+=TableField ( "," columns+=TableField)* '}'
	//    '}';
	public MappingSourceTableElements getMappingSourceTableAccess() {
		return pMappingSourceTable;
	}
	
	public ParserRule getMappingSourceTableRule() {
		return getMappingSourceTableAccess().getRule();
	}
	
	//MappingTargetTable returns MappingTargetTable:
	//    'MappingTargetTable'
	//    name=EString
	//    '{'
	//        'columns' '{' columns+=TableField ( "," columns+=TableField)* '}'
	//    '}';
	public MappingTargetTableElements getMappingTargetTableAccess() {
		return pMappingTargetTable;
	}
	
	public ParserRule getMappingTargetTableRule() {
		return getMappingTargetTableAccess().getRule();
	}
	
	//Transformation returns Transformation:
	//    'Transformation'
	//    '{'
	//        'returnType' returnType=Type
	//        'selfType' selfType=Type
	//        'label' label=EString
	//        'returnStatement' '{' returnStatement+=Expression ( "," returnStatement+=Expression)* '}'
	//        ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	//    '}';
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Type returns Type:
	//                string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MappingField returns MappingField:
	//    'MappingField'
	//    '{'
	//        'souceField' souceField=[TableField|EString]
	//        'targetField' targetField=[TableField|EString]
	//        ('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
	//    '}';
	public MappingFieldElements getMappingFieldAccess() {
		return pMappingField;
	}
	
	public ParserRule getMappingFieldRule() {
		return getMappingFieldAccess().getRule();
	}
	
	//BooleanOperationExpression returns BooleanOperationExpression:
	//    'BooleanOperationExpression'
	//    '{'
	//        ('operation' operation=BooleanFunction)?
	//        'right' right=[Expression|EString]
	//        'left' left=[Expression|EString]
	//    '}';
	public BooleanOperationExpressionElements getBooleanOperationExpressionAccess() {
		return pBooleanOperationExpression;
	}
	
	public ParserRule getBooleanOperationExpressionRule() {
		return getBooleanOperationExpressionAccess().getRule();
	}
	
	//TransformationCall returns TransformationCall:
	//    'TransformationCall'
	//    '{'
	//        'transformation' transformation=[Transformation|EString]
	//        ('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
	//    '}';
	public TransformationCallElements getTransformationCallAccess() {
		return pTransformationCall;
	}
	
	public ParserRule getTransformationCallRule() {
		return getTransformationCallAccess().getRule();
	}
	
	//enum BooleanFunction returns BooleanFunction:
	//                equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';
	public BooleanFunctionElements getBooleanFunctionAccess() {
		return eBooleanFunction;
	}
	
	public EnumRule getBooleanFunctionRule() {
		return getBooleanFunctionAccess().getRule();
	}
	
	//parameterExpression returns parameterExpression:
	//    'parameterExpression'
	//    '{'
	//        'parameter' parameter=[Parameter|EString]
	//    '}';
	public ParameterExpressionElements getParameterExpressionAccess() {
		return pParameterExpression;
	}
	
	public ParserRule getParameterExpressionRule() {
		return getParameterExpressionAccess().getRule();
	}
	
	//StringConstantExpression returns StringConstantExpression:
	//    'StringConstantExpression'
	//    '{'
	//        'value' value=EString
	//    '}';
	public StringConstantExpressionElements getStringConstantExpressionAccess() {
		return pStringConstantExpression;
	}
	
	public ParserRule getStringConstantExpressionRule() {
		return getStringConstantExpressionAccess().getRule();
	}
	
	//BooleanConstantExpression returns BooleanConstantExpression:
	//    value?='value'
	//    'BooleanConstantExpression'
	//    ;
	public BooleanConstantExpressionElements getBooleanConstantExpressionAccess() {
		return pBooleanConstantExpression;
	}
	
	public ParserRule getBooleanConstantExpressionRule() {
		return getBooleanConstantExpressionAccess().getRule();
	}
	
	//IntegerConstantExpression returns IntegerConstantExpression:
	//    'IntegerConstantExpression'
	//    '{'
	//        'value' value=EInt
	//    '}';
	public IntegerConstantExpressionElements getIntegerConstantExpressionAccess() {
		return pIntegerConstantExpression;
	}
	
	public ParserRule getIntegerConstantExpressionRule() {
		return getIntegerConstantExpressionAccess().getRule();
	}
	
	//InExpression returns InExpression:
	//    'InExpression'
	//    '{'
	//        ('statement' statement=[Expression|EString])?
	//        'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')'
	//    '}';
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}
	
	//ConditionalStatement returns ConditionalStatement:
	//    'ConditionalStatement'
	//    '{'
	//        'condition' condition=[Expression|EString]
	//        'booleanoperationexpression' booleanoperationexpression=[BooleanOperationExpression|EString]
	//        'ifBody' '{' ifBody+=Statement ( "," ifBody+=Statement)* '}'
	//        'elseBody' '{' elseBody+=Statement ( "," elseBody+=Statement)* '}'
	//    '}';
	public ConditionalStatementElements getConditionalStatementAccess() {
		return pConditionalStatement;
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}
	
	//ParseExpression returns ParseExpression:
	//    'ParseExpression'
	//    '{'
	//        ('outputType' outputType=Type)?
	//        'expression' expression=[Expression|EString]
	//    '}';
	public ParseExpressionElements getParseExpressionAccess() {
		return pParseExpression;
	}
	
	public ParserRule getParseExpressionRule() {
		return getParseExpressionAccess().getRule();
	}
	
	//FloatConstantExpression returns FloatConstantExpression:
	//    'FloatConstantExpression'
	//    '{'
	//        'value' value=EFloat
	//    '}';
	public FloatConstantExpressionElements getFloatConstantExpressionAccess() {
		return pFloatConstantExpression;
	}
	
	public ParserRule getFloatConstantExpressionRule() {
		return getFloatConstantExpressionAccess().getRule();
	}
	
	//BinaryOperationExpression returns BinaryOperationExpression:
	//    'BinaryOperationExpression'
	//    '{'
	//        ('operation' operation=BinaryFunction)?
	//        'right' right=[Expression|EString]
	//        'left' left=[Expression|EString]
	//    '}';
	public BinaryOperationExpressionElements getBinaryOperationExpressionAccess() {
		return pBinaryOperationExpression;
	}
	
	public ParserRule getBinaryOperationExpressionRule() {
		return getBinaryOperationExpressionAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    {Parameter}
	//    'Parameter'
	//    '{'
	//        ('label' label=EString)?
	//        ('type' type=Type)?
	//    '}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//enum BinaryFunction returns BinaryFunction:
	//                mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat';
	public BinaryFunctionElements getBinaryFunctionAccess() {
		return eBinaryFunction;
	}
	
	public EnumRule getBinaryFunctionRule() {
		return getBinaryFunctionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
