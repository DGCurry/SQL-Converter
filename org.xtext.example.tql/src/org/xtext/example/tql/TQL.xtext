// automatically generated by Xtext
grammar org.xtext.example.tql.TQL with org.eclipse.xtext.common.Terminals

generate domainmodel "http://www.example.org/domainmodel/TQL"

import "http://www.example.org/tqlModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


TQL:
	(blocks += Block)
;

Block:
	Table_Impl
;

Table_Impl returns Table:
	('source' Source_Table) | 
	('target' Target_Table)
	;
	

Source_Table returns SourceTable:
	name=EString
	'{'
		columns+=TableField ( "," columns+=TableField)*
	'}';

Target_Table returns TargetTable:
	name=EString
	'{'
		columns+=TableField ( "," columns+=TableField)*
	'}';

TableField returns TableField:
	name=EString
	':'
		type=Type ( "," )
	;
//	
//	
//Mapping returns Mapping:
//	'mapping' source+=MappingSourceTable '->' target+=MappingTargetTable
//	('where' '(' where+=BooleanOperationExpression ')')?
//	'{'
//		fields+=MappingField ('|' Transformation)? (',' MappingField ('|' Transformation)?)*
//	'}';
//

Expression returns Expression:
	parameterExpression | StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | InExpression | ConditionalStatement | ParseExpression | FloatConstantExpression | BinaryOperationExpression | BooleanOperationExpression;


ConstantExpression returns ConstantExpression:
	StringConstantExpression | BooleanConstantExpression | IntegerConstantExpression | FloatConstantExpression;

Statement returns Statement:
	ConditionalStatement;

MappingSourceTable returns MappingSourceTable:
	'MappingSourceTable'
	name=EString
	'{'
		'columns' '{' columns+=TableField ( "," columns+=TableField)* '}' 
	'}';

	
MappingTargetTable returns MappingTargetTable:
	'MappingTargetTable'
	name=EString
	'{'
		'columns' '{' columns+=TableField ( "," columns+=TableField)* '}' 
	'}';

Transformation returns Transformation:
	'Transformation'
	'{'
		'returnType' returnType=Type
		'selfType' selfType=Type
		'label' label=EString
		'returnStatement' '{' returnStatement+=Expression ( "," returnStatement+=Expression)* '}' 
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

enum Type returns Type:
				string = 'string' | integer = 'integer' | floats = 'floats' | sets = 'sets' | DateTime = 'DateTime' | Null = 'Null' | bool = 'bool';

MappingField returns MappingField:
	'MappingField'
	'{'
		'souceField' souceField=[TableField|EString]
		'targetField' targetField=[TableField|EString]
		('calls' '{' calls+=TransformationCall ( "," calls+=TransformationCall)* '}' )?
	'}';

BooleanOperationExpression returns BooleanOperationExpression:
	'BooleanOperationExpression'
	'{'
		('operation' operation=BooleanFunction)?
		'right' right=[Expression|EString]
		'left' left=[Expression|EString]
	'}';

TransformationCall returns TransformationCall:
	'TransformationCall'
	'{'
		'transformation' transformation=[Transformation|EString]
		('parameters' '(' parameters+=[TableField|EString] ( "," parameters+=[TableField|EString])* ')' )?
	'}';

enum BooleanFunction returns BooleanFunction:
				equal = 'equal' | notequal = 'notequal' | smaller = 'smaller' | greater = 'greater' | or = 'or' | and = 'and';

parameterExpression returns parameterExpression:
	'parameterExpression'
	'{'
		'parameter' parameter=[Parameter|EString]
	'}';

StringConstantExpression returns StringConstantExpression:
	'StringConstantExpression'
	'{'
		'value' value=EString
	'}';

BooleanConstantExpression returns BooleanConstantExpression:
	value?='value'
	'BooleanConstantExpression'
	;

IntegerConstantExpression returns IntegerConstantExpression:
	'IntegerConstantExpression'
	'{'
		'value' value=EInt
	'}';

InExpression returns InExpression:
	'InExpression'
	'{'
		('statement' statement=[Expression|EString])?
		'constantSet' '(' constantSet+=[ConstantExpression|EString] ( "," constantSet+=[ConstantExpression|EString])* ')' 
	'}';

ConditionalStatement returns ConditionalStatement:
	'ConditionalStatement'
	'{'
		'condition' condition=[Expression|EString]
		'booleanoperationexpression' booleanoperationexpression=[BooleanOperationExpression|EString]
		'ifBody' '{' ifBody+=Statement ( "," ifBody+=Statement)* '}' 
		'elseBody' '{' elseBody+=Statement ( "," elseBody+=Statement)* '}' 
	'}';

ParseExpression returns ParseExpression:
	'ParseExpression'
	'{'
		('outputType' outputType=Type)?
		'expression' expression=[Expression|EString]
	'}';

FloatConstantExpression returns FloatConstantExpression:
	'FloatConstantExpression'
	'{'
		'value' value=EFloat
	'}';

BinaryOperationExpression returns BinaryOperationExpression:
	'BinaryOperationExpression'
	'{'
		('operation' operation=BinaryFunction)?
		'right' right=[Expression|EString]
		'left' left=[Expression|EString]
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	'{'
		('label' label=EString)?
		('type' type=Type)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum BinaryFunction returns BinaryFunction:
				mult = 'mult' | sum = 'sum' | divide = 'divide' | concat = 'concat';
